Current data layout: e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128
Current target triple: 
Creating plugin CorePlugin
Creating plugin BaseInstructions
Creating plugin ExecutionTracer
Creating plugin HostFiles
Creating plugin InterruptMonitor
Creating plugin LinuxSyscallMonitor
Creating plugin DasosPreproc
1 [State 0] Created initial state
Adding memory block (startAddr = 0x0, size = 0xa0000, hostAddr = 0x3d8c000, isSharedConcrete=0)
Adding memory block (startAddr = 0xa0000, size = 0x60000, hostAddr = 0x4033000, isSharedConcrete=1)
Adding memory block (startAddr = 0x100000, size = 0x7f00000, hostAddr = 0x2aaab8aad000, isSharedConcrete=0)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x20000, hostAddr = 0x1cf14000, isSharedConcrete=1)
Adding memory block (startAddr = 0xc0000, size = 0x20000, hostAddr = 0x1cf5d000, isSharedConcrete=1)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x800000, hostAddr = 0x2aaac09af000, isSharedConcrete=1)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x10000, hostAddr = 0x1ea84000, isSharedConcrete=1)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x20000, hostAddr = 0x1eaf8000, isSharedConcrete=1)
Initing initial device state.
Looking for relevant virtual devices...
   Registering device slirp
   Shared device block
   Registering device timer
   Shared device ram
   Registering device cpu_common
   Shared device cpu
   Registering device apic
   Registering device fw_cfg
   Registering device i8259
   Registering device i8259
   Registering device PCIBUS
   Registering device I440FX
   Registering device PIIX3
   Registering device cirrus_vga
   Registering device mc146818rtc
   Registering device ioapic
   Registering device i8254
   Registering device serial
   Registering device e1000
   Registering device ide
   Registering device ps2kbd
   Registering device ps2mouse
   Registering device vmmouse
   Registering device pckbd
   Registering device dma
   Registering device dma
   Registering device fdc
   Registering device piix4_pm
   Registering device i2c_bus
WARNING!!! All writes to disk will be lost after shutdown.
Initializing periodic timer
Firing timer event
Firing timer event
Firing timer event
Firing timer event
24 [State 0] Message from guest (0xbfd0f35c): << Within execShellcode with params f: 0, c: 2, eip_known: no

>> fuzzInit: datum forking for value 0
>> fuzzInit: datum forking for value 0
24 [State 0] Forking state 0 at pc = 0x8048a0e into states:
    state 0 with condition (Eq false
    (Eq (w32 0)
        (ReadLSB w32 0 v0_fuzz_symb_0)))
    state 1 with condition (Not (Eq false
         (Eq (w32 0)
             (ReadLSB w32 0 v0_fuzz_symb_0))))
Stack frame at fork:
s2e_dummyMainFunction
tcg-llvm-tb-0-8048a0e
Size=2 Low=0 splitIndex=1 high=1
24 [State 0] Switching from state 0 to state 1
Copied 34928 (count=1)
Finalizing TB execution 1
s2e_dummyMainFunction
tcg-llvm-tb-0-8048a0e
Firing timer event
24 [State 1] Message from guest (0xbfd0f35c): << About to call dasospreproc_init with shell: 0xbfd0fd00 (offset of 0 not yet applied), shell_len: 208, eip: 0x00000000

24 [State 1] Warning: EIP is not set, there may be false positives
>> Recv'ed custom insn for a DasosPreproc memory segment within pid 86716416, addr range: 0xbfd0fd00-0xbfd0fdd0 with eip: 0x00000000 buffer length: 208 and syscall number: 1024
  1  2B @0xbfd0fd00: eb 1a                              jmp 0x1c                 nextPC: 0xbfd0fd1c
  2  5B @0xbfd0fd1c: e8 e1 ff ff ff                     call 0xffffffffffffffe6  nextPC: 0xbfd0fd02
  3  1B @0xbfd0fd02: 5e                                 pop esi                  nextPC: 0xbfd0fd03
  4  2B @0xbfd0fd03: 89 f7                              mov edi, esi             nextPC: 0xbfd0fd05
  5  2B @0xbfd0fd05: 89 f2                              mov edx, esi             nextPC: 0xbfd0fd07
  6  5B @0xbfd0fd07: b9 af 00 00 00                     mov ecx, 0xaf            nextPC: 0xbfd0fd0c
  7  5B @0xbfd0fd0c: bb ff 00 00 00                     mov ebx, 0xff            nextPC: 0xbfd0fd11
  8  2B @0xbfd0fd11: 31 c0                              xor eax, eax             nextPC: 0xbfd0fd13
  9  1B @0xbfd0fd13: 50                                 push eax                 nextPC: 0xbfd0fd14
 10  1B @0xbfd0fd14: ac                                 lodsb                    nextPC: 0xbfd0fd15
 11  2B @0xbfd0fd15: 31 d8                              xor eax, ebx             nextPC: 0xbfd0fd17
 12  1B @0xbfd0fd17: aa                                 stosb                    nextPC: 0xbfd0fd18
 13  2B @0xbfd0fd18: e2 fa                              loop 0xfffffffffffffffc  nextPC: 0xbfd0fd1a jmpPc: 0xbfd0fd14
!!* pc != prev insn's next_pc; 0xbfd0fd14 != bfd0fd1a
 14  1B @0xbfd0fd14:*ac                                 lodsb                    nextPC: 0xbfd0fd15
 15  2B @0xbfd0fd15:*31*d8                              xor eax, ebx             nextPC: 0xbfd0fd17
 16  1B @0xbfd0fd17:*aa                                 stosb                    nextPC: 0xbfd0fd18
 17  2B @0xbfd0fd18:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfd0fd1a jmpPc: 0xbfd0fd14
 18  2B @0xbfd0fd1a: ff d2                              call edx                 nextPC: 0x00000000
 19  2B @0xbfd0fd21: eb 2f                              jmp 0x31                 nextPC: 0xbfd0fd52
 20  5B @0xbfd0fd52: e8 cc ff ff ff                     call 0xffffffffffffffd1  nextPC: 0xbfd0fd23
 21  2B @0xbfd0fd23: 31 c0                              xor eax, eax             nextPC: 0xbfd0fd25
 22  2B @0xbfd0fd25: 31 db                              xor ebx, ebx             nextPC: 0xbfd0fd27
 23  2B @0xbfd0fd27: 31 d2                              xor edx, edx             nextPC: 0xbfd0fd29
 24  2B @0xbfd0fd29: 31 c9                              xor ecx, ecx             nextPC: 0xbfd0fd2b
 25  1B @0xbfd0fd2b: 5a                                 pop edx                  nextPC: 0xbfd0fd2c
 26  1B @0xbfd0fd2c: 52                                 push edx                 nextPC: 0xbfd0fd2d
 27  2B @0xbfd0fd2d: 89 d6                              mov esi, edx             nextPC: 0xbfd0fd2f
 28  2B @0xbfd0fd2f: 89 d7                              mov edi, edx             nextPC: 0xbfd0fd31
 29  1B @0xbfd0fd31: 46                                 inc esi                  nextPC: 0xbfd0fd32
 30  1B @0xbfd0fd32: 47                                 inc edi                  nextPC: 0xbfd0fd33
 31  2B @0xbfd0fd33: b1 29                              mov cl, 0x29             nextPC: 0xbfd0fd35
 32  2B @0xbfd0fd35: 31 c0                              xor eax, eax             nextPC: 0xbfd0fd37
 33  2B @0xbfd0fd37: 31 db                              xor ebx, ebx             nextPC: 0xbfd0fd39
 34  2B @0xbfd0fd39: 8a 07                              mov al, [edi]            nextPC: 0xbfd0fd3b
 35  2B @0xbfd0fd3b: 01 f8                              add eax, edi             nextPC: 0xbfd0fd3d
 36  2B @0xbfd0fd3d: 8a 18                              mov bl, [eax]            nextPC: 0xbfd0fd3f
 37  2B @0xbfd0fd3f: 88 1e                              mov [esi], bl            nextPC: 0xbfd0fd41
 38  2B @0xbfd0fd41: 89 c7                              mov edi, eax             nextPC: 0xbfd0fd43
 39  1B @0xbfd0fd43: 47                                 inc edi                  nextPC: 0xbfd0fd44
 40  1B @0xbfd0fd44: 46                                 inc esi                  nextPC: 0xbfd0fd45
 41  2B @0xbfd0fd45: e2 ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd0fd47 jmpPc: 0xbfd0fd35
!!* pc != prev insn's next_pc; 0xbfd0fd35 != bfd0fd47
 42  2B @0xbfd0fd35:*31*c0                              xor eax, eax             nextPC: 0xbfd0fd37
 43  2B @0xbfd0fd37:*31*db                              xor ebx, ebx             nextPC: 0xbfd0fd39
 44  2B @0xbfd0fd39:*8a*07                              mov al, [edi]            nextPC: 0xbfd0fd3b
 45  2B @0xbfd0fd3b:*01*f8                              add eax, edi             nextPC: 0xbfd0fd3d
 46  2B @0xbfd0fd3d:*8a*18                              mov bl, [eax]            nextPC: 0xbfd0fd3f
 47  2B @0xbfd0fd3f:*88*1e                              mov [esi], bl            nextPC: 0xbfd0fd41
 48  2B @0xbfd0fd41:*89*c7                              mov edi, eax             nextPC: 0xbfd0fd43
 49  1B @0xbfd0fd43:*47                                 inc edi                  nextPC: 0xbfd0fd44
 50  1B @0xbfd0fd44:*46                                 inc esi                  nextPC: 0xbfd0fd45
 51  2B @0xbfd0fd45:*e2*ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd0fd47 jmpPc: 0xbfd0fd35
 52  1B @0xbfd0fd47: 59                                 pop ecx                  nextPC: 0xbfd0fd48
 53  2B @0xbfd0fd48: ff d1                              call ecx                 nextPC: 0x00000000
 54  2B @0xbfd0fd57: eb 13                              jmp 0x15                 nextPC: 0xbfd0fd6c
 55  5B @0xbfd0fd6c: e8 e8 ff ff ff                     call 0xffffffffffffffed  nextPC: 0xbfd0fd59
 56  1B @0xbfd0fd59: 59                                 pop ecx                  nextPC: 0xbfd0fd5a
 57  2B @0xbfd0fd5a: 31 c0                              xor eax, eax             nextPC: 0xbfd0fd5c
 58  2B @0xbfd0fd5c: b0 04                              mov al, 0x4              nextPC: 0xbfd0fd5e
 59  2B @0xbfd0fd5e: 31 db                              xor ebx, ebx             nextPC: 0xbfd0fd60
 60  1B @0xbfd0fd60: 43                                 inc ebx                  nextPC: 0xbfd0fd61
 61  2B @0xbfd0fd61: 31 d2                              xor edx, edx             nextPC: 0xbfd0fd63
 62  2B @0xbfd0fd63: b2 0f                              mov dl, 0xf              nextPC: 0xbfd0fd65
 63  2B @0xbfd0fd65: cd 80                              int 0x80                 nextPC: 0xbfd0fd67
[State 1] CPU dump
EAX=0x4
EBX=0x1
ECX=0xbfd0fd71
EDX=0xf
ESI=0xbfd0fd81
EDI=0xbfd0fdd1
EBP=0xbfd0f768
ESP=0xc6175fe4
EIP=0xc1003190
CR2=0xb764a29f
>> Be aware that sysc is not set; is the shell read from file vs libDasosFdump struct?
>> EIP Found. Syscall number 4 at addr 0xbfd0fd65 offset from base: 101 (should be EIP-2) within pid: 86716416 number of instructions: 63. This is success #1
>> Success from offset 0
>> Success densities, overlay: 0.867257; avg: 1.07965
>> Success eip: 0xbfd0fd67 offset from base: 103
>> Printing PC Trace (instructions in order of execution)
>>      1  2B @0xbfd0fd00: eb 1a                              jmp 0x1c                 nextPC: 0xbfd0fd1c
>>      2  5B @0xbfd0fd1c: e8 e1 ff ff ff                     call 0xffffffffffffffe6  nextPC: 0xbfd0fd02
>>      3  1B @0xbfd0fd02: 5e                                 pop esi                  nextPC: 0xbfd0fd03
>>      4  2B @0xbfd0fd03: 89 f7                              mov edi, esi             nextPC: 0xbfd0fd05
>>      5  2B @0xbfd0fd05: 89 f2                              mov edx, esi             nextPC: 0xbfd0fd07
>>      6  5B @0xbfd0fd07: b9 af 00 00 00                     mov ecx, 0xaf            nextPC: 0xbfd0fd0c
>>      7  5B @0xbfd0fd0c: bb ff 00 00 00                     mov ebx, 0xff            nextPC: 0xbfd0fd11
>>      8  2B @0xbfd0fd11: 31 c0                              xor eax, eax             nextPC: 0xbfd0fd13
>>      9  1B @0xbfd0fd13: 50                                 push eax                 nextPC: 0xbfd0fd14
>>     10  1B @0xbfd0fd14:*ac                                 lodsb                    nextPC: 0xbfd0fd15
>>     11  2B @0xbfd0fd15:*31*d8                              xor eax, ebx             nextPC: 0xbfd0fd17
>>     12  1B @0xbfd0fd17:*aa                                 stosb                    nextPC: 0xbfd0fd18
>>     13  2B @0xbfd0fd18:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfd0fd1a jmpPc: 0xbfd0fd14
>>     14  1B @0xbfd0fd14:*ac                                 lodsb                    nextPC: 0xbfd0fd15
>>     15  2B @0xbfd0fd15:*31*d8                              xor eax, ebx             nextPC: 0xbfd0fd17
>>     16  1B @0xbfd0fd17:*aa                                 stosb                    nextPC: 0xbfd0fd18
>>     17  2B @0xbfd0fd18:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfd0fd1a jmpPc: 0xbfd0fd14
>>     18  2B @0xbfd0fd1a: ff d2                              call edx                 nextPC: 0x00000000
>>     19  2B @0xbfd0fd21: eb 2f                              jmp 0x31                 nextPC: 0xbfd0fd52
>>     20  5B @0xbfd0fd52: e8 cc ff ff ff                     call 0xffffffffffffffd1  nextPC: 0xbfd0fd23
>>     21  2B @0xbfd0fd23: 31 c0                              xor eax, eax             nextPC: 0xbfd0fd25
>>     22  2B @0xbfd0fd25: 31 db                              xor ebx, ebx             nextPC: 0xbfd0fd27
>>     23  2B @0xbfd0fd27: 31 d2                              xor edx, edx             nextPC: 0xbfd0fd29
>>     24  2B @0xbfd0fd29: 31 c9                              xor ecx, ecx             nextPC: 0xbfd0fd2b
>>     25  1B @0xbfd0fd2b: 5a                                 pop edx                  nextPC: 0xbfd0fd2c
>>     26  1B @0xbfd0fd2c: 52                                 push edx                 nextPC: 0xbfd0fd2d
>>     27  2B @0xbfd0fd2d: 89 d6                              mov esi, edx             nextPC: 0xbfd0fd2f
>>     28  2B @0xbfd0fd2f: 89 d7                              mov edi, edx             nextPC: 0xbfd0fd31
>>     29  1B @0xbfd0fd31: 46                                 inc esi                  nextPC: 0xbfd0fd32
>>     30  1B @0xbfd0fd32: 47                                 inc edi                  nextPC: 0xbfd0fd33
>>     31  2B @0xbfd0fd33: b1 29                              mov cl, 0x29             nextPC: 0xbfd0fd35
>>     32  2B @0xbfd0fd35:*31*c0                              xor eax, eax             nextPC: 0xbfd0fd37
>>     33  2B @0xbfd0fd37:*31*db                              xor ebx, ebx             nextPC: 0xbfd0fd39
>>     34  2B @0xbfd0fd39:*8a*07                              mov al, [edi]            nextPC: 0xbfd0fd3b
>>     35  2B @0xbfd0fd3b:*01*f8                              add eax, edi             nextPC: 0xbfd0fd3d
>>     36  2B @0xbfd0fd3d:*8a*18                              mov bl, [eax]            nextPC: 0xbfd0fd3f
>>     37  2B @0xbfd0fd3f:*88*1e                              mov [esi], bl            nextPC: 0xbfd0fd41
>>     38  2B @0xbfd0fd41:*89*c7                              mov edi, eax             nextPC: 0xbfd0fd43
>>     39  1B @0xbfd0fd43:*47                                 inc edi                  nextPC: 0xbfd0fd44
>>     40  1B @0xbfd0fd44:*46                                 inc esi                  nextPC: 0xbfd0fd45
>>     41  2B @0xbfd0fd45:*e2*ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd0fd47 jmpPc: 0xbfd0fd35
>>     42  2B @0xbfd0fd35:*31*c0                              xor eax, eax              *vestigial* nextPC: 0xbfd0fd37
>>     43  2B @0xbfd0fd37:*31*db                              xor ebx, ebx             nextPC: 0xbfd0fd39
>>     44  2B @0xbfd0fd39:*8a*07                              mov al, [edi]            nextPC: 0xbfd0fd3b
>>     45  2B @0xbfd0fd3b:*01*f8                              add eax, edi             nextPC: 0xbfd0fd3d
>>     46  2B @0xbfd0fd3d:*8a*18                              mov bl, [eax]            nextPC: 0xbfd0fd3f
>>     47  2B @0xbfd0fd3f:*88*1e                              mov [esi], bl            nextPC: 0xbfd0fd41
>>     48  2B @0xbfd0fd41:*89*c7                              mov edi, eax             nextPC: 0xbfd0fd43
>>     49  1B @0xbfd0fd43:*47                                 inc edi                  nextPC: 0xbfd0fd44
>>     50  1B @0xbfd0fd44:*46                                 inc esi                  nextPC: 0xbfd0fd45
>>     51  2B @0xbfd0fd45:*e2*ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd0fd47 jmpPc: 0xbfd0fd35
>>     52  1B @0xbfd0fd47: 59                                 pop ecx                  nextPC: 0xbfd0fd48
>>     53  2B @0xbfd0fd48: ff d1                              call ecx                 nextPC: 0x00000000
>>     54  2B @0xbfd0fd57: eb 13                              jmp 0x15                 nextPC: 0xbfd0fd6c
>>     55  5B @0xbfd0fd6c: e8 e8 ff ff ff                     call 0xffffffffffffffed  nextPC: 0xbfd0fd59
>>     56  1B @0xbfd0fd59: 59                                 pop ecx                  nextPC: 0xbfd0fd5a
>>     57  2B @0xbfd0fd5a: 31 c0                              xor eax, eax             nextPC: 0xbfd0fd5c
>>     58  2B @0xbfd0fd5c: b0 04                              mov al, 0x4              nextPC: 0xbfd0fd5e
>>     59  2B @0xbfd0fd5e: 31 db                              xor ebx, ebx             nextPC: 0xbfd0fd60
>>     60  1B @0xbfd0fd60: 43                                 inc ebx                  nextPC: 0xbfd0fd61
>>     61  2B @0xbfd0fd61: 31 d2                              xor edx, edx             nextPC: 0xbfd0fd63
>>     62  2B @0xbfd0fd63: b2 0f                              mov dl, 0xf              nextPC: 0xbfd0fd65
>>     63  2B @0xbfd0fd65: cd 80                              int 0x80                 nextPC: 0xbfd0fd67
>> Printing the memory map (1 snapshots)
>>    Printing snapshot 0
>>    The density (0 to 1) of this state's path is (122/113) = 1.07965
>>    Mem_map start_addr: 0xbfd0fd00, length: 208B, valid bytes: 122, exec'ed bytes: 100, range: 113B, end_addr: 0xbfd0fd70
           0 1 2 3  4 5 6 7  8 9 a b  c d e f   ASCII
0xbfd0fd00 eb1a5e89 f789f2b9 af000000 bbff0000  ..^.............
0xbfd0fd10 0031c050 ac31d8aa e2faffd2 e8e1ffff  .1.P.1..........
0xbfd0fd20 ffeb2f31 c031db31 d231c95a 5289d689  ../1.1.1.1.ZR...
0xbfd0fd30 d74647b1 29----31 db8a0701 f88a1888  .FG.)..1........
0xbfd0fd40 1e89c747 46e2ee59 ffd1---- --------  ...GF..Y........
0xbfd0fd50 ----e8cc ffffffeb 135931c0 b00431db  .........Y1...1.
0xbfd0fd60 4331d2b2 0fcd80-- -------- e8e8ffff  C1..............

24 [State 1] Terminating state 1 with message 'EIP reached, success'
24 [State 1] Switching from state 1 to state 0
Copied 34928 (count=1)
Deleting state 1 0x0x203086b0
24 [State 0] Message from guest (0xbfd0f35c): << Looping fork, currently at 0
>> fuzzInit: datum forking for value 1
>> fuzzInit: datum forking for value 1
24 [State 0] Forking state 0 at pc = 0x8048a0e into states:
    state 0 with condition (Eq false
    (Eq (w32 1)
        (ReadLSB w32 0 v1_fuzz_symb_1)))
    state 2 with condition (Not (Eq false
         (Eq (w32 1)
             (ReadLSB w32 0 v1_fuzz_symb_1))))
Stack frame at fork:
s2e_dummyMainFunction
tcg-llvm-tb-1-8048a0e
Size=2 Low=0 splitIndex=1 high=1
24 [State 0] Switching from state 0 to state 2
Copied 34928 (count=1)
Finalizing TB execution 2
s2e_dummyMainFunction
tcg-llvm-tb-1-8048a0e
24 [State 2] Message from guest (0xbfd0f35c): << About to call dasospreproc_init with shell: 0xbfd0fd00 (offset of 1 not yet applied), shell_len: 208, eip: 0x00000000

24 [State 2] Warning: EIP is not set, there may be false positives
>> Recv'ed custom insn for a DasosPreproc memory segment within pid 86716416, addr range: 0xbfd0fd00-0xbfd0fdd0 with eip: 0x00000000 buffer length: 208 and syscall number: 1024
  1  3B @0xbfd0fd01: 1a 5e 89                           sbb bl, [esi-0x77]       nextPC: 0xbfd0fd04
  2  6B @0xbfd0fd04: f7 89 f2 b9 af 00                  invalid                  nextPC: 0xbfd0fd0a
24 [State 2] @0x080499bf, left buffer range after 2 IoB insns; last IoB insn @0xbfd0fd04, disasm in debug.
  1  6B @0xbfd0fd04: f7 89 f2 b9 af 00                  invalid                  nextPC: 0xbfd0fd0a
24 [State 2] ERROR: we've left our module/shellcode unexpectedly, terminateStateEarly
24 [State 2] Terminating state 2 with message 'eliminated a state that exec'ed out of module bounds unexpectedly'
24 [State 2] Switching from state 2 to state 0
Copied 34928 (count=1)
Deleting state 2 0x0x2020cac0
25 [State 0] Message from guest (0xbfd0f35c): << Looping fork, currently at 1
25 [State 0] >> Recv'ed onFini custom insn
>> Recv'ed onFini custom insn
>> There were 1 successes
>>    Printing success 0
>> Success from offset 0
>> Success densities, overlay: 0.867257; avg: 1.07965
>> Success eip: 0xbfd0fd67 offset from base: 103
>> Printing PC Trace (instructions in order of execution)
>>      1  2B @0xbfd0fd00: eb 1a                              jmp 0x1c                 nextPC: 0xbfd0fd1c
>>      2  5B @0xbfd0fd1c: e8 e1 ff ff ff                     call 0xffffffffffffffe6  nextPC: 0xbfd0fd02
>>      3  1B @0xbfd0fd02: 5e                                 pop esi                  nextPC: 0xbfd0fd03
>>      4  2B @0xbfd0fd03: 89 f7                              mov edi, esi             nextPC: 0xbfd0fd05
>>      5  2B @0xbfd0fd05: 89 f2                              mov edx, esi             nextPC: 0xbfd0fd07
>>      6  5B @0xbfd0fd07: b9 af 00 00 00                     mov ecx, 0xaf            nextPC: 0xbfd0fd0c
>>      7  5B @0xbfd0fd0c: bb ff 00 00 00                     mov ebx, 0xff            nextPC: 0xbfd0fd11
>>      8  2B @0xbfd0fd11: 31 c0                              xor eax, eax             nextPC: 0xbfd0fd13
>>      9  1B @0xbfd0fd13: 50                                 push eax                 nextPC: 0xbfd0fd14
>>     10  1B @0xbfd0fd14:*ac                                 lodsb                    nextPC: 0xbfd0fd15
>>     11  2B @0xbfd0fd15:*31*d8                              xor eax, ebx             nextPC: 0xbfd0fd17
>>     12  1B @0xbfd0fd17:*aa                                 stosb                    nextPC: 0xbfd0fd18
>>     13  2B @0xbfd0fd18:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfd0fd1a jmpPc: 0xbfd0fd14
>>     14  1B @0xbfd0fd14:*ac                                 lodsb                    nextPC: 0xbfd0fd15
>>     15  2B @0xbfd0fd15:*31*d8                              xor eax, ebx             nextPC: 0xbfd0fd17
>>     16  1B @0xbfd0fd17:*aa                                 stosb                    nextPC: 0xbfd0fd18
>>     17  2B @0xbfd0fd18:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfd0fd1a jmpPc: 0xbfd0fd14
>>     18  2B @0xbfd0fd1a: ff d2                              call edx                 nextPC: 0x00000000
>>     19  2B @0xbfd0fd21: eb 2f                              jmp 0x31                 nextPC: 0xbfd0fd52
>>     20  5B @0xbfd0fd52: e8 cc ff ff ff                     call 0xffffffffffffffd1  nextPC: 0xbfd0fd23
>>     21  2B @0xbfd0fd23: 31 c0                              xor eax, eax             nextPC: 0xbfd0fd25
>>     22  2B @0xbfd0fd25: 31 db                              xor ebx, ebx             nextPC: 0xbfd0fd27
>>     23  2B @0xbfd0fd27: 31 d2                              xor edx, edx             nextPC: 0xbfd0fd29
>>     24  2B @0xbfd0fd29: 31 c9                              xor ecx, ecx             nextPC: 0xbfd0fd2b
>>     25  1B @0xbfd0fd2b: 5a                                 pop edx                  nextPC: 0xbfd0fd2c
>>     26  1B @0xbfd0fd2c: 52                                 push edx                 nextPC: 0xbfd0fd2d
>>     27  2B @0xbfd0fd2d: 89 d6                              mov esi, edx             nextPC: 0xbfd0fd2f
>>     28  2B @0xbfd0fd2f: 89 d7                              mov edi, edx             nextPC: 0xbfd0fd31
>>     29  1B @0xbfd0fd31: 46                                 inc esi                  nextPC: 0xbfd0fd32
>>     30  1B @0xbfd0fd32: 47                                 inc edi                  nextPC: 0xbfd0fd33
>>     31  2B @0xbfd0fd33: b1 29                              mov cl, 0x29             nextPC: 0xbfd0fd35
>>     32  2B @0xbfd0fd35:*31*c0                              xor eax, eax             nextPC: 0xbfd0fd37
>>     33  2B @0xbfd0fd37:*31*db                              xor ebx, ebx             nextPC: 0xbfd0fd39
>>     34  2B @0xbfd0fd39:*8a*07                              mov al, [edi]            nextPC: 0xbfd0fd3b
>>     35  2B @0xbfd0fd3b:*01*f8                              add eax, edi             nextPC: 0xbfd0fd3d
>>     36  2B @0xbfd0fd3d:*8a*18                              mov bl, [eax]            nextPC: 0xbfd0fd3f
>>     37  2B @0xbfd0fd3f:*88*1e                              mov [esi], bl            nextPC: 0xbfd0fd41
>>     38  2B @0xbfd0fd41:*89*c7                              mov edi, eax             nextPC: 0xbfd0fd43
>>     39  1B @0xbfd0fd43:*47                                 inc edi                  nextPC: 0xbfd0fd44
>>     40  1B @0xbfd0fd44:*46                                 inc esi                  nextPC: 0xbfd0fd45
>>     41  2B @0xbfd0fd45:*e2*ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd0fd47 jmpPc: 0xbfd0fd35
>>     42  2B @0xbfd0fd35:*31*c0                              xor eax, eax              *vestigial* nextPC: 0xbfd0fd37
>>     43  2B @0xbfd0fd37:*31*db                              xor ebx, ebx             nextPC: 0xbfd0fd39
>>     44  2B @0xbfd0fd39:*8a*07                              mov al, [edi]            nextPC: 0xbfd0fd3b
>>     45  2B @0xbfd0fd3b:*01*f8                              add eax, edi             nextPC: 0xbfd0fd3d
>>     46  2B @0xbfd0fd3d:*8a*18                              mov bl, [eax]            nextPC: 0xbfd0fd3f
>>     47  2B @0xbfd0fd3f:*88*1e                              mov [esi], bl            nextPC: 0xbfd0fd41
>>     48  2B @0xbfd0fd41:*89*c7                              mov edi, eax             nextPC: 0xbfd0fd43
>>     49  1B @0xbfd0fd43:*47                                 inc edi                  nextPC: 0xbfd0fd44
>>     50  1B @0xbfd0fd44:*46                                 inc esi                  nextPC: 0xbfd0fd45
>>     51  2B @0xbfd0fd45:*e2*ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd0fd47 jmpPc: 0xbfd0fd35
>>     52  1B @0xbfd0fd47: 59                                 pop ecx                  nextPC: 0xbfd0fd48
>>     53  2B @0xbfd0fd48: ff d1                              call ecx                 nextPC: 0x00000000
>>     54  2B @0xbfd0fd57: eb 13                              jmp 0x15                 nextPC: 0xbfd0fd6c
>>     55  5B @0xbfd0fd6c: e8 e8 ff ff ff                     call 0xffffffffffffffed  nextPC: 0xbfd0fd59
>>     56  1B @0xbfd0fd59: 59                                 pop ecx                  nextPC: 0xbfd0fd5a
>>     57  2B @0xbfd0fd5a: 31 c0                              xor eax, eax             nextPC: 0xbfd0fd5c
>>     58  2B @0xbfd0fd5c: b0 04                              mov al, 0x4              nextPC: 0xbfd0fd5e
>>     59  2B @0xbfd0fd5e: 31 db                              xor ebx, ebx             nextPC: 0xbfd0fd60
>>     60  1B @0xbfd0fd60: 43                                 inc ebx                  nextPC: 0xbfd0fd61
>>     61  2B @0xbfd0fd61: 31 d2                              xor edx, edx             nextPC: 0xbfd0fd63
>>     62  2B @0xbfd0fd63: b2 0f                              mov dl, 0xf              nextPC: 0xbfd0fd65
>>     63  2B @0xbfd0fd65: cd 80                              int 0x80                 nextPC: 0xbfd0fd67
>> Printing the memory map (1 snapshots)
>>    Printing snapshot 0
>>    The density (0 to 1) of this state's path is (122/113) = 1.07965
>>    Mem_map start_addr: 0xbfd0fd00, length: 208B, valid bytes: 122, exec'ed bytes: 100, range: 113B, end_addr: 0xbfd0fd70
           0 1 2 3  4 5 6 7  8 9 a b  c d e f   ASCII
0xbfd0fd00 eb1a5e89 f789f2b9 af000000 bbff0000  ..^.............
0xbfd0fd10 0031c050 ac31d8aa e2faffd2 e8e1ffff  .1.P.1..........
0xbfd0fd20 ffeb2f31 c031db31 d231c95a 5289d689  ../1.1.1.1.ZR...
0xbfd0fd30 d74647b1 29----31 db8a0701 f88a1888  .FG.)..1........
0xbfd0fd40 1e89c747 46e2ee59 ffd1---- --------  ...GF..Y........
0xbfd0fd50 ----e8cc ffffffeb 135931c0 b00431db  .........Y1...1.
0xbfd0fd60 4331d2b2 0fcd80-- -------- e8e8ffff  C1..............

>>    Done printing success 0
>> Done printing successes
>> The success/offset with the highest overlay density is 0, value of 0.867257
>> The success/offset with the highest average density is 0, value of 1.07965
>> There were 1 different eips: 0xbfd0fd67 
25 [State 0] Killing state 0
25 [State 0] Terminating state 0 with message 'State was terminated by opcode
            message: "<< Ending state 0"
            status: 0'
All states were terminated
Deleting state 0 0x0x396d3d0
Stack trace
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x742189]
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x44e685]
  /lib/libc.so.6 : exit()+0xe2
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x71d9e1]
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x51e77d]
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x4530b1]
  /lib/libc.so.6 : __libc_start_main()+0xfe
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x44bea9]
