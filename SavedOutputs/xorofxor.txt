Current data layout: e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128
Current target triple: 
Creating plugin CorePlugin
Creating plugin BaseInstructions
Creating plugin ExecutionTracer
Creating plugin HostFiles
Creating plugin InterruptMonitor
Creating plugin LinuxSyscallMonitor
Creating plugin DasosPreproc
1 [State 0] Created initial state
Adding memory block (startAddr = 0x0, size = 0xa0000, hostAddr = 0x43f5000, isSharedConcrete=0)
Adding memory block (startAddr = 0xa0000, size = 0x60000, hostAddr = 0x469c000, isSharedConcrete=1)
Adding memory block (startAddr = 0x100000, size = 0x7f00000, hostAddr = 0x2aaab8aad000, isSharedConcrete=0)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x20000, hostAddr = 0x1d57d000, isSharedConcrete=1)
Adding memory block (startAddr = 0xc0000, size = 0x20000, hostAddr = 0x1d5c6000, isSharedConcrete=1)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x800000, hostAddr = 0x2aaac09af000, isSharedConcrete=1)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x10000, hostAddr = 0x1f0ed000, isSharedConcrete=1)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x20000, hostAddr = 0x1f161000, isSharedConcrete=1)
Initing initial device state.
Looking for relevant virtual devices...
   Registering device slirp
   Shared device block
   Registering device timer
   Shared device ram
   Registering device cpu_common
   Shared device cpu
   Registering device apic
   Registering device fw_cfg
   Registering device i8259
   Registering device i8259
   Registering device PCIBUS
   Registering device I440FX
   Registering device PIIX3
   Registering device cirrus_vga
   Registering device mc146818rtc
   Registering device ioapic
   Registering device i8254
   Registering device serial
   Registering device e1000
   Registering device ide
   Registering device ps2kbd
   Registering device ps2mouse
   Registering device vmmouse
   Registering device pckbd
   Registering device dma
   Registering device dma
   Registering device fdc
   Registering device piix4_pm
   Registering device i2c_bus
WARNING!!! All writes to disk will be lost after shutdown.
Initializing periodic timer
Firing timer event
Firing timer event
Firing timer event
Firing timer event
24 [State 0] Message from guest (0xbfcf47fc): << Within execShellcode with params f: 0, c: 2, eip_known: no

>> fuzzInit: datum forking for value 0
>> fuzzInit: datum forking for value 0
25 [State 0] Forking state 0 at pc = 0x8048a0e into states:
    state 0 with condition (Eq false
    (Eq (w32 0)
        (ReadLSB w32 0 v0_fuzz_symb_0)))
    state 1 with condition (Not (Eq false
         (Eq (w32 0)
             (ReadLSB w32 0 v0_fuzz_symb_0))))
Stack frame at fork:
s2e_dummyMainFunction
tcg-llvm-tb-0-8048a0e
Size=2 Low=0 splitIndex=1 high=1
25 [State 0] Switching from state 0 to state 1
Copied 34928 (count=1)
Finalizing TB execution 1
s2e_dummyMainFunction
tcg-llvm-tb-0-8048a0e
25 [State 1] Message from guest (0xbfcf47fc): << About to call dasospreproc_init with shell: 0xbfcf51a0 (offset of 0 not yet applied), shell_len: 107, eip: 0x00000000

Firing timer event
25 [State 1] Warning: EIP is not set, there may be false positives
>> Recv'ed custom insn for a DasosPreproc memory segment within pid 86716416, addr range: 0xbfcf51a0-0xbfcf520b with eip: 0x00000000 buffer length: 107 and syscall number: 1024
  1  2B @0xbfcf51a0: eb 1a                              jmp 0x1c                 nextPC: 0xbfcf51bc
  2  5B @0xbfcf51bc: e8 e1 ff ff ff                     call 0xffffffffffffffe6  nextPC: 0xbfcf51a2
  3  1B @0xbfcf51a2: 5e                                 pop esi                  nextPC: 0xbfcf51a3
  4  2B @0xbfcf51a3: 89 f7                              mov edi, esi             nextPC: 0xbfcf51a5
  5  2B @0xbfcf51a5: 89 f2                              mov edx, esi             nextPC: 0xbfcf51a7
  6  5B @0xbfcf51a7: b9 4a 00 00 00                     mov ecx, 0x4a            nextPC: 0xbfcf51ac
  7  5B @0xbfcf51ac: bb ff 00 00 00                     mov ebx, 0xff            nextPC: 0xbfcf51b1
  8  2B @0xbfcf51b1: 31 c0                              xor eax, eax             nextPC: 0xbfcf51b3
  9  1B @0xbfcf51b3: 50                                 push eax                 nextPC: 0xbfcf51b4
 10  1B @0xbfcf51b4: ac                                 lodsb                    nextPC: 0xbfcf51b5
 11  2B @0xbfcf51b5: 31 d8                              xor eax, ebx             nextPC: 0xbfcf51b7
 12  1B @0xbfcf51b7: aa                                 stosb                    nextPC: 0xbfcf51b8
 13  2B @0xbfcf51b8: e2 fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51ba jmpPc: 0xbfcf51b4
!!* pc != prev insn's next_pc; 0xbfcf51b4 != bfcf51ba
 14  1B @0xbfcf51b4:*ac                                 lodsb                    nextPC: 0xbfcf51b5
 15  2B @0xbfcf51b5:*31*d8                              xor eax, ebx             nextPC: 0xbfcf51b7
 16  1B @0xbfcf51b7:*aa                                 stosb                    nextPC: 0xbfcf51b8
 17  2B @0xbfcf51b8:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51ba jmpPc: 0xbfcf51b4
 18  2B @0xbfcf51ba: ff d2                              call edx                 nextPC: 0x00000000
 19  2B @0xbfcf51c1: eb 1a                              jmp 0x1c                 nextPC: 0xbfcf51dd
 20  5B @0xbfcf51dd: e8 e1 ff ff ff                     call 0xffffffffffffffe6  nextPC: 0xbfcf51c3
 21  1B @0xbfcf51c3: 5e                                 pop esi                  nextPC: 0xbfcf51c4
 22  2B @0xbfcf51c4: 89 f7                              mov edi, esi             nextPC: 0xbfcf51c6
 23  2B @0xbfcf51c6: 89 f2                              mov edx, esi             nextPC: 0xbfcf51c8
 24  5B @0xbfcf51c8: b9 29 00 00 00                     mov ecx, 0x29            nextPC: 0xbfcf51cd
 25  5B @0xbfcf51cd: bb ff 00 00 00                     mov ebx, 0xff            nextPC: 0xbfcf51d2
 26  2B @0xbfcf51d2: 31 c0                              xor eax, eax             nextPC: 0xbfcf51d4
 27  1B @0xbfcf51d4: 50                                 push eax                 nextPC: 0xbfcf51d5
 28  1B @0xbfcf51d5: ac                                 lodsb                    nextPC: 0xbfcf51d6
 29  2B @0xbfcf51d6: 31 d8                              xor eax, ebx             nextPC: 0xbfcf51d8
 30  1B @0xbfcf51d8: aa                                 stosb                    nextPC: 0xbfcf51d9
 31  2B @0xbfcf51d9: e2 fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51db jmpPc: 0xbfcf51d5
!!* pc != prev insn's next_pc; 0xbfcf51d5 != bfcf51db
 32  1B @0xbfcf51d5:*ac                                 lodsb                    nextPC: 0xbfcf51d6
 33  2B @0xbfcf51d6:*31*d8                              xor eax, ebx             nextPC: 0xbfcf51d8
 34  1B @0xbfcf51d8:*aa                                 stosb                    nextPC: 0xbfcf51d9
 35  2B @0xbfcf51d9:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51db jmpPc: 0xbfcf51d5
 36  2B @0xbfcf51db: ff d2                              call edx                 nextPC: 0x00000000
 37  2B @0xbfcf51e2: eb 13                              jmp 0x15                 nextPC: 0xbfcf51f7
 38  5B @0xbfcf51f7: e8 e8 ff ff ff                     call 0xffffffffffffffed  nextPC: 0xbfcf51e4
 39  1B @0xbfcf51e4: 59                                 pop ecx                  nextPC: 0xbfcf51e5
 40  2B @0xbfcf51e5: 31 c0                              xor eax, eax             nextPC: 0xbfcf51e7
 41  2B @0xbfcf51e7: b0 04                              mov al, 0x4              nextPC: 0xbfcf51e9
 42  2B @0xbfcf51e9: 31 db                              xor ebx, ebx             nextPC: 0xbfcf51eb
 43  1B @0xbfcf51eb: 43                                 inc ebx                  nextPC: 0xbfcf51ec
 44  2B @0xbfcf51ec: 31 d2                              xor edx, edx             nextPC: 0xbfcf51ee
 45  2B @0xbfcf51ee: b2 0f                              mov dl, 0xf              nextPC: 0xbfcf51f0
 46  2B @0xbfcf51f0: cd 80                              int 0x80                 nextPC: 0xbfcf51f2
[State 1] CPU dump
EAX=0x4
EBX=0x1
ECX=0xbfcf51fc
EDX=0xf
ESI=0xbfcf520b
EDI=0xbfcf520b
EBP=0xbfcf4c08
ESP=0xc618ffe4
EIP=0xc1003190
CR2=0xb75e729f
>> Be aware that sysc is not set; is the shell read from file vs libDasosFdump struct?
>> EIP Found. Syscall number 4 at addr 0xbfcf51f0 offset from base: 80 (should be EIP-2) within pid: 86716416 number of instructions: 46. This is success #1
>> Success from offset 0
>> Success densities, overlay: 0.945652; avg: 1.07609
>> Success eip: 0xbfcf51f2 offset from base: 82
>> Printing PC Trace (instructions in order of execution)
>>      1  2B @0xbfcf51a0: eb 1a                              jmp 0x1c                 nextPC: 0xbfcf51bc
>>      2  5B @0xbfcf51bc: e8 e1 ff ff ff                     call 0xffffffffffffffe6  nextPC: 0xbfcf51a2
>>      3  1B @0xbfcf51a2: 5e                                 pop esi                  nextPC: 0xbfcf51a3
>>      4  2B @0xbfcf51a3: 89 f7                              mov edi, esi             nextPC: 0xbfcf51a5
>>      5  2B @0xbfcf51a5: 89 f2                              mov edx, esi             nextPC: 0xbfcf51a7
>>      6  5B @0xbfcf51a7: b9 4a 00 00 00                     mov ecx, 0x4a            nextPC: 0xbfcf51ac
>>      7  5B @0xbfcf51ac: bb ff 00 00 00                     mov ebx, 0xff            nextPC: 0xbfcf51b1
>>      8  2B @0xbfcf51b1: 31 c0                              xor eax, eax             nextPC: 0xbfcf51b3
>>      9  1B @0xbfcf51b3: 50                                 push eax                 nextPC: 0xbfcf51b4
>>     10  1B @0xbfcf51b4:*ac                                 lodsb                    nextPC: 0xbfcf51b5
>>     11  2B @0xbfcf51b5:*31*d8                              xor eax, ebx             nextPC: 0xbfcf51b7
>>     12  1B @0xbfcf51b7:*aa                                 stosb                    nextPC: 0xbfcf51b8
>>     13  2B @0xbfcf51b8:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51ba jmpPc: 0xbfcf51b4
>>     14  1B @0xbfcf51b4:*ac                                 lodsb                    nextPC: 0xbfcf51b5
>>     15  2B @0xbfcf51b5:*31*d8                              xor eax, ebx             nextPC: 0xbfcf51b7
>>     16  1B @0xbfcf51b7:*aa                                 stosb                    nextPC: 0xbfcf51b8
>>     17  2B @0xbfcf51b8:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51ba jmpPc: 0xbfcf51b4
>>     18  2B @0xbfcf51ba: ff d2                              call edx                 nextPC: 0x00000000
>>     19  2B @0xbfcf51c1: eb 1a                              jmp 0x1c                 nextPC: 0xbfcf51dd
>>     20  5B @0xbfcf51dd: e8 e1 ff ff ff                     call 0xffffffffffffffe6  nextPC: 0xbfcf51c3
>>     21  1B @0xbfcf51c3: 5e                                 pop esi                  nextPC: 0xbfcf51c4
>>     22  2B @0xbfcf51c4: 89 f7                              mov edi, esi             nextPC: 0xbfcf51c6
>>     23  2B @0xbfcf51c6: 89 f2                              mov edx, esi             nextPC: 0xbfcf51c8
>>     24  5B @0xbfcf51c8: b9 29 00 00 00                     mov ecx, 0x29            nextPC: 0xbfcf51cd
>>     25  5B @0xbfcf51cd: bb ff 00 00 00                     mov ebx, 0xff            nextPC: 0xbfcf51d2
>>     26  2B @0xbfcf51d2: 31 c0                              xor eax, eax             nextPC: 0xbfcf51d4
>>     27  1B @0xbfcf51d4: 50                                 push eax                 nextPC: 0xbfcf51d5
>>     28  1B @0xbfcf51d5:*ac                                 lodsb                    nextPC: 0xbfcf51d6
>>     29  2B @0xbfcf51d6:*31*d8                              xor eax, ebx             nextPC: 0xbfcf51d8
>>     30  1B @0xbfcf51d8:*aa                                 stosb                    nextPC: 0xbfcf51d9
>>     31  2B @0xbfcf51d9:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51db jmpPc: 0xbfcf51d5
>>     32  1B @0xbfcf51d5:*ac                                 lodsb                    nextPC: 0xbfcf51d6
>>     33  2B @0xbfcf51d6:*31*d8                              xor eax, ebx             nextPC: 0xbfcf51d8
>>     34  1B @0xbfcf51d8:*aa                                 stosb                    nextPC: 0xbfcf51d9
>>     35  2B @0xbfcf51d9:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51db jmpPc: 0xbfcf51d5
>>     36  2B @0xbfcf51db: ff d2                              call edx                 nextPC: 0x00000000
>>     37  2B @0xbfcf51e2: eb 13                              jmp 0x15                 nextPC: 0xbfcf51f7
>>     38  5B @0xbfcf51f7: e8 e8 ff ff ff                     call 0xffffffffffffffed  nextPC: 0xbfcf51e4
>>     39  1B @0xbfcf51e4: 59                                 pop ecx                  nextPC: 0xbfcf51e5
>>     40  2B @0xbfcf51e5: 31 c0                              xor eax, eax             nextPC: 0xbfcf51e7
>>     41  2B @0xbfcf51e7: b0 04                              mov al, 0x4              nextPC: 0xbfcf51e9
>>     42  2B @0xbfcf51e9: 31 db                              xor ebx, ebx             nextPC: 0xbfcf51eb
>>     43  1B @0xbfcf51eb: 43                                 inc ebx                  nextPC: 0xbfcf51ec
>>     44  2B @0xbfcf51ec: 31 d2                              xor edx, edx             nextPC: 0xbfcf51ee
>>     45  2B @0xbfcf51ee: b2 0f                              mov dl, 0xf              nextPC: 0xbfcf51f0
>>     46  2B @0xbfcf51f0: cd 80                              int 0x80                 nextPC: 0xbfcf51f2
>> Printing the memory map (1 snapshots)
>>    Printing snapshot 0
>>    The density (0 to 1) of this state's path is (99/92) = 1.07609
>>    Mem_map start_addr: 0xbfcf51a0, length: 107B, valid bytes: 99, exec'ed bytes: 87, range: 92B, end_addr: 0xbfcf51fb
           0 1 2 3  4 5 6 7  8 9 a b  c d e f   ASCII
0xbfcf51a0 eb1a5e89 f789f2b9 4a000000 bbff0000  ..^.....J.......
0xbfcf51b0 0031c050 ac31d8aa e2faffd2 e8e1ffff  .1.P.1..........
0xbfcf51c0 ffeb1a5e 89f789f2 b9290000 00bbff00  ...^.....)......
0xbfcf51d0 000031c0 50ac31d8 aae2faff d2e8e1ff  ..1.P.1.........
0xbfcf51e0 ffffeb13 5931c0b0 0431db43 31d2b20f  ....Y1...1.C1...
0xbfcf51f0 cd80---- ------e8 e8ffffff           ............    

25 [State 1] Terminating state 1 with message 'EIP reached, success'
25 [State 1] Switching from state 1 to state 0
Copied 34928 (count=1)
Deleting state 1 0x0x20985ee0
25 [State 0] Message from guest (0xbfcf47fc): << Looping fork, currently at 0
>> fuzzInit: datum forking for value 1
>> fuzzInit: datum forking for value 1
25 [State 0] Forking state 0 at pc = 0x8048a0e into states:
    state 0 with condition (Eq false
    (Eq (w32 1)
        (ReadLSB w32 0 v1_fuzz_symb_1)))
    state 2 with condition (Not (Eq false
         (Eq (w32 1)
             (ReadLSB w32 0 v1_fuzz_symb_1))))
Stack frame at fork:
s2e_dummyMainFunction
tcg-llvm-tb-1-8048a0e
Size=2 Low=0 splitIndex=1 high=1
25 [State 0] Switching from state 0 to state 2
Copied 34928 (count=1)
Finalizing TB execution 2
s2e_dummyMainFunction
tcg-llvm-tb-1-8048a0e
25 [State 2] Message from guest (0xbfcf47fc): << About to call dasospreproc_init with shell: 0xbfcf51a0 (offset of 1 not yet applied), shell_len: 107, eip: 0x00000000

25 [State 2] Warning: EIP is not set, there may be false positives
>> Recv'ed custom insn for a DasosPreproc memory segment within pid 86716416, addr range: 0xbfcf51a0-0xbfcf520b with eip: 0x00000000 buffer length: 107 and syscall number: 1024
  1  3B @0xbfcf51a1: 1a 5e 89                           sbb bl, [esi-0x77]       nextPC: 0xbfcf51a4
  2  6B @0xbfcf51a4: f7 89 f2 b9 4a 00                  invalid                  nextPC: 0xbfcf51aa
25 [State 2] @0x080499bf, left buffer range after 2 IoB insns; last IoB insn @0xbfcf51a4, disasm in debug.
  1  6B @0xbfcf51a4: f7 89 f2 b9 4a 00                  invalid                  nextPC: 0xbfcf51aa
25 [State 2] ERROR: we've left our module/shellcode unexpectedly, terminateStateEarly
25 [State 2] Terminating state 2 with message 'eliminated a state that exec'ed out of module bounds unexpectedly'
25 [State 2] Switching from state 2 to state 0
Copied 34928 (count=1)
Deleting state 2 0x0x20b6c990
25 [State 0] Message from guest (0xbfcf47fc): << Looping fork, currently at 1
25 [State 0] >> Recv'ed onFini custom insn
>> Recv'ed onFini custom insn
>> There were 1 successes
>>    Printing success 0
>> Success from offset 0
>> Success densities, overlay: 0.945652; avg: 1.07609
>> Success eip: 0xbfcf51f2 offset from base: 82
>> Printing PC Trace (instructions in order of execution)
>>      1  2B @0xbfcf51a0: eb 1a                              jmp 0x1c                 nextPC: 0xbfcf51bc
>>      2  5B @0xbfcf51bc: e8 e1 ff ff ff                     call 0xffffffffffffffe6  nextPC: 0xbfcf51a2
>>      3  1B @0xbfcf51a2: 5e                                 pop esi                  nextPC: 0xbfcf51a3
>>      4  2B @0xbfcf51a3: 89 f7                              mov edi, esi             nextPC: 0xbfcf51a5
>>      5  2B @0xbfcf51a5: 89 f2                              mov edx, esi             nextPC: 0xbfcf51a7
>>      6  5B @0xbfcf51a7: b9 4a 00 00 00                     mov ecx, 0x4a            nextPC: 0xbfcf51ac
>>      7  5B @0xbfcf51ac: bb ff 00 00 00                     mov ebx, 0xff            nextPC: 0xbfcf51b1
>>      8  2B @0xbfcf51b1: 31 c0                              xor eax, eax             nextPC: 0xbfcf51b3
>>      9  1B @0xbfcf51b3: 50                                 push eax                 nextPC: 0xbfcf51b4
>>     10  1B @0xbfcf51b4:*ac                                 lodsb                    nextPC: 0xbfcf51b5
>>     11  2B @0xbfcf51b5:*31*d8                              xor eax, ebx             nextPC: 0xbfcf51b7
>>     12  1B @0xbfcf51b7:*aa                                 stosb                    nextPC: 0xbfcf51b8
>>     13  2B @0xbfcf51b8:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51ba jmpPc: 0xbfcf51b4
>>     14  1B @0xbfcf51b4:*ac                                 lodsb                    nextPC: 0xbfcf51b5
>>     15  2B @0xbfcf51b5:*31*d8                              xor eax, ebx             nextPC: 0xbfcf51b7
>>     16  1B @0xbfcf51b7:*aa                                 stosb                    nextPC: 0xbfcf51b8
>>     17  2B @0xbfcf51b8:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51ba jmpPc: 0xbfcf51b4
>>     18  2B @0xbfcf51ba: ff d2                              call edx                 nextPC: 0x00000000
>>     19  2B @0xbfcf51c1: eb 1a                              jmp 0x1c                 nextPC: 0xbfcf51dd
>>     20  5B @0xbfcf51dd: e8 e1 ff ff ff                     call 0xffffffffffffffe6  nextPC: 0xbfcf51c3
>>     21  1B @0xbfcf51c3: 5e                                 pop esi                  nextPC: 0xbfcf51c4
>>     22  2B @0xbfcf51c4: 89 f7                              mov edi, esi             nextPC: 0xbfcf51c6
>>     23  2B @0xbfcf51c6: 89 f2                              mov edx, esi             nextPC: 0xbfcf51c8
>>     24  5B @0xbfcf51c8: b9 29 00 00 00                     mov ecx, 0x29            nextPC: 0xbfcf51cd
>>     25  5B @0xbfcf51cd: bb ff 00 00 00                     mov ebx, 0xff            nextPC: 0xbfcf51d2
>>     26  2B @0xbfcf51d2: 31 c0                              xor eax, eax             nextPC: 0xbfcf51d4
>>     27  1B @0xbfcf51d4: 50                                 push eax                 nextPC: 0xbfcf51d5
>>     28  1B @0xbfcf51d5:*ac                                 lodsb                    nextPC: 0xbfcf51d6
>>     29  2B @0xbfcf51d6:*31*d8                              xor eax, ebx             nextPC: 0xbfcf51d8
>>     30  1B @0xbfcf51d8:*aa                                 stosb                    nextPC: 0xbfcf51d9
>>     31  2B @0xbfcf51d9:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51db jmpPc: 0xbfcf51d5
>>     32  1B @0xbfcf51d5:*ac                                 lodsb                    nextPC: 0xbfcf51d6
>>     33  2B @0xbfcf51d6:*31*d8                              xor eax, ebx             nextPC: 0xbfcf51d8
>>     34  1B @0xbfcf51d8:*aa                                 stosb                    nextPC: 0xbfcf51d9
>>     35  2B @0xbfcf51d9:*e2*fa                              loop 0xfffffffffffffffc  nextPC: 0xbfcf51db jmpPc: 0xbfcf51d5
>>     36  2B @0xbfcf51db: ff d2                              call edx                 nextPC: 0x00000000
>>     37  2B @0xbfcf51e2: eb 13                              jmp 0x15                 nextPC: 0xbfcf51f7
>>     38  5B @0xbfcf51f7: e8 e8 ff ff ff                     call 0xffffffffffffffed  nextPC: 0xbfcf51e4
>>     39  1B @0xbfcf51e4: 59                                 pop ecx                  nextPC: 0xbfcf51e5
>>     40  2B @0xbfcf51e5: 31 c0                              xor eax, eax             nextPC: 0xbfcf51e7
>>     41  2B @0xbfcf51e7: b0 04                              mov al, 0x4              nextPC: 0xbfcf51e9
>>     42  2B @0xbfcf51e9: 31 db                              xor ebx, ebx             nextPC: 0xbfcf51eb
>>     43  1B @0xbfcf51eb: 43                                 inc ebx                  nextPC: 0xbfcf51ec
>>     44  2B @0xbfcf51ec: 31 d2                              xor edx, edx             nextPC: 0xbfcf51ee
>>     45  2B @0xbfcf51ee: b2 0f                              mov dl, 0xf              nextPC: 0xbfcf51f0
>>     46  2B @0xbfcf51f0: cd 80                              int 0x80                 nextPC: 0xbfcf51f2
>> Printing the memory map (1 snapshots)
>>    Printing snapshot 0
>>    The density (0 to 1) of this state's path is (99/92) = 1.07609
>>    Mem_map start_addr: 0xbfcf51a0, length: 107B, valid bytes: 99, exec'ed bytes: 87, range: 92B, end_addr: 0xbfcf51fb
           0 1 2 3  4 5 6 7  8 9 a b  c d e f   ASCII
0xbfcf51a0 eb1a5e89 f789f2b9 4a000000 bbff0000  ..^.....J.......
0xbfcf51b0 0031c050 ac31d8aa e2faffd2 e8e1ffff  .1.P.1..........
0xbfcf51c0 ffeb1a5e 89f789f2 b9290000 00bbff00  ...^.....)......
0xbfcf51d0 000031c0 50ac31d8 aae2faff d2e8e1ff  ..1.P.1.........
0xbfcf51e0 ffffeb13 5931c0b0 0431db43 31d2b20f  ....Y1...1.C1...
0xbfcf51f0 cd80---- ------e8 e8ffffff           ............    

>>    Done printing success 0
>> Done printing successes
>> The success/offset with the highest overlay density is 0, value of 0.945652
>> The success/offset with the highest average density is 0, value of 1.07609
>> There were 1 different eips: 0xbfcf51f2 
25 [State 0] Killing state 0
25 [State 0] Terminating state 0 with message 'State was terminated by opcode
            message: "<< Ending state 0"
            status: 0'
All states were terminated
Deleting state 0 0x0x3fd6420
Stack trace
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x742189]
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x44e685]
  /lib/libc.so.6 : exit()+0xe2
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x71d9e1]
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x51e77d]
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x4530b1]
  /lib/libc.so.6 : __libc_start_main()+0xfe
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x44bea9]
