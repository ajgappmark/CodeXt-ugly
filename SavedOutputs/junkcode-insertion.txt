Current data layout: e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128
Current target triple: 
Creating plugin CorePlugin
Creating plugin BaseInstructions
Creating plugin ExecutionTracer
Creating plugin HostFiles
Creating plugin InterruptMonitor
Creating plugin LinuxSyscallMonitor
Creating plugin DasosPreproc
1 [State 0] Created initial state
Adding memory block (startAddr = 0x0, size = 0xa0000, hostAddr = 0x3a83000, isSharedConcrete=0)
Adding memory block (startAddr = 0xa0000, size = 0x60000, hostAddr = 0x3d2a000, isSharedConcrete=1)
Adding memory block (startAddr = 0x100000, size = 0x7f00000, hostAddr = 0x2aaab8aad000, isSharedConcrete=0)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x20000, hostAddr = 0x1cc0b000, isSharedConcrete=1)
Adding memory block (startAddr = 0xc0000, size = 0x20000, hostAddr = 0x1cc54000, isSharedConcrete=1)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x800000, hostAddr = 0x2aaac09af000, isSharedConcrete=1)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x10000, hostAddr = 0x1e77b000, isSharedConcrete=1)
Adding memory block (startAddr = 0xffffffffffffffff, size = 0x20000, hostAddr = 0x1e7ef000, isSharedConcrete=1)
Initing initial device state.
Looking for relevant virtual devices...
   Registering device slirp
   Shared device block
   Registering device timer
   Shared device ram
   Registering device cpu_common
   Shared device cpu
   Registering device apic
   Registering device fw_cfg
   Registering device i8259
   Registering device i8259
   Registering device PCIBUS
   Registering device I440FX
   Registering device PIIX3
   Registering device cirrus_vga
   Registering device mc146818rtc
   Registering device ioapic
   Registering device i8254
   Registering device serial
   Registering device e1000
   Registering device ide
   Registering device ps2kbd
   Registering device ps2mouse
   Registering device vmmouse
   Registering device pckbd
   Registering device dma
   Registering device dma
   Registering device fdc
   Registering device piix4_pm
   Registering device i2c_bus
WARNING!!! All writes to disk will be lost after shutdown.
Initializing periodic timer
Firing timer event
Firing timer event
Firing timer event
Firing timer event
Firing timer event
27 [State 0] Message from guest (0xbfd30adc): << Within execShellcode with params f: 0, c: 2, eip_known: no

>> fuzzInit: datum forking for value 0
>> fuzzInit: datum forking for value 0
27 [State 0] Forking state 0 at pc = 0x8048a0e into states:
    state 0 with condition (Eq false
    (Eq (w32 0)
        (ReadLSB w32 0 v0_fuzz_symb_0)))
    state 1 with condition (Not (Eq false
         (Eq (w32 0)
             (ReadLSB w32 0 v0_fuzz_symb_0))))
Stack frame at fork:
s2e_dummyMainFunction
tcg-llvm-tb-0-8048a0e
Size=2 Low=0 splitIndex=1 high=1
27 [State 0] Switching from state 0 to state 1
Copied 34928 (count=1)
Finalizing TB execution 1
s2e_dummyMainFunction
tcg-llvm-tb-0-8048a0e
27 [State 1] Message from guest (0xbfd30adc): << About to call dasospreproc_init with shell: 0xbfd31480 (offset of 0 not yet applied), shell_len: 175, eip: 0x00000000

27 [State 1] Warning: EIP is not set, there may be false positives
>> Recv'ed custom insn for a DasosPreproc memory segment within pid 86716416, addr range: 0xbfd31480-0xbfd3152f with eip: 0x00000000 buffer length: 175 and syscall number: 1024
  1  2B @0xbfd31480: eb 2f                              jmp 0x31                 nextPC: 0xbfd314b1
  2  5B @0xbfd314b1: e8 cc ff ff ff                     call 0xffffffffffffffd1  nextPC: 0xbfd31482
  3  2B @0xbfd31482: 31 c0                              xor eax, eax             nextPC: 0xbfd31484
  4  2B @0xbfd31484: 31 db                              xor ebx, ebx             nextPC: 0xbfd31486
  5  2B @0xbfd31486: 31 d2                              xor edx, edx             nextPC: 0xbfd31488
  6  2B @0xbfd31488: 31 c9                              xor ecx, ecx             nextPC: 0xbfd3148a
  7  1B @0xbfd3148a: 5a                                 pop edx                  nextPC: 0xbfd3148b
  8  1B @0xbfd3148b: 52                                 push edx                 nextPC: 0xbfd3148c
  9  2B @0xbfd3148c: 89 d6                              mov esi, edx             nextPC: 0xbfd3148e
 10  2B @0xbfd3148e: 89 d7                              mov edi, edx             nextPC: 0xbfd31490
 11  1B @0xbfd31490: 46                                 inc esi                  nextPC: 0xbfd31491
 12  1B @0xbfd31491: 47                                 inc edi                  nextPC: 0xbfd31492
 13  2B @0xbfd31492: b1 29                              mov cl, 0x29             nextPC: 0xbfd31494
 14  2B @0xbfd31494: 31 c0                              xor eax, eax             nextPC: 0xbfd31496
 15  2B @0xbfd31496: 31 db                              xor ebx, ebx             nextPC: 0xbfd31498
 16  2B @0xbfd31498: 8a 07                              mov al, [edi]            nextPC: 0xbfd3149a
 17  2B @0xbfd3149a: 01 f8                              add eax, edi             nextPC: 0xbfd3149c
 18  2B @0xbfd3149c: 8a 18                              mov bl, [eax]            nextPC: 0xbfd3149e
 19  2B @0xbfd3149e: 88 1e                              mov [esi], bl            nextPC: 0xbfd314a0
 20  2B @0xbfd314a0: 89 c7                              mov edi, eax             nextPC: 0xbfd314a2
 21  1B @0xbfd314a2: 47                                 inc edi                  nextPC: 0xbfd314a3
 22  1B @0xbfd314a3: 46                                 inc esi                  nextPC: 0xbfd314a4
 23  2B @0xbfd314a4: e2 ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd314a6 jmpPc: 0xbfd31494
!!* pc != prev insn's next_pc; 0xbfd31494 != bfd314a6
 24  2B @0xbfd31494:*31*c0                              xor eax, eax             nextPC: 0xbfd31496
 25  2B @0xbfd31496:*31*db                              xor ebx, ebx             nextPC: 0xbfd31498
 26  2B @0xbfd31498:*8a*07                              mov al, [edi]            nextPC: 0xbfd3149a
 27  2B @0xbfd3149a:*01*f8                              add eax, edi             nextPC: 0xbfd3149c
 28  2B @0xbfd3149c:*8a*18                              mov bl, [eax]            nextPC: 0xbfd3149e
 29  2B @0xbfd3149e:*88*1e                              mov [esi], bl            nextPC: 0xbfd314a0
 30  2B @0xbfd314a0:*89*c7                              mov edi, eax             nextPC: 0xbfd314a2
 31  1B @0xbfd314a2:*47                                 inc edi                  nextPC: 0xbfd314a3
 32  1B @0xbfd314a3:*46                                 inc esi                  nextPC: 0xbfd314a4
 33  2B @0xbfd314a4:*e2*ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd314a6 jmpPc: 0xbfd31494
 34  1B @0xbfd314a6: 59                                 pop ecx                  nextPC: 0xbfd314a7
 35  2B @0xbfd314a7: ff d1                              call ecx                 nextPC: 0x00000000
 36  2B @0xbfd314b6: eb 13                              jmp 0x15                 nextPC: 0xbfd314cb
 37  5B @0xbfd314cb: e8 e8 ff ff ff                     call 0xffffffffffffffed  nextPC: 0xbfd314b8
 38  1B @0xbfd314b8: 59                                 pop ecx                  nextPC: 0xbfd314b9
 39  2B @0xbfd314b9: 31 c0                              xor eax, eax             nextPC: 0xbfd314bb
 40  2B @0xbfd314bb: b0 04                              mov al, 0x4              nextPC: 0xbfd314bd
 41  2B @0xbfd314bd: 31 db                              xor ebx, ebx             nextPC: 0xbfd314bf
 42  1B @0xbfd314bf: 43                                 inc ebx                  nextPC: 0xbfd314c0
 43  2B @0xbfd314c0: 31 d2                              xor edx, edx             nextPC: 0xbfd314c2
 44  2B @0xbfd314c2: b2 0f                              mov dl, 0xf              nextPC: 0xbfd314c4
 45  2B @0xbfd314c4: cd 80                              int 0x80                 nextPC: 0xbfd314c6
[State 1] CPU dump
EAX=0x4
EBX=0x1
ECX=0xbfd314d0
EDX=0xf
ESI=0xbfd314e0
EDI=0xbfd31530
EBP=0xbfd30ee8
ESP=0xc6175fe4
EIP=0xc1003190
CR2=0xb75e829f
>> Be aware that sysc is not set; is the shell read from file vs libDasosFdump struct?
>> EIP Found. Syscall number 4 at addr 0xbfd314c4 offset from base: 68 (should be EIP-2) within pid: 86716416 number of instructions: 45. This is success #1
>> Success from offset 0
>> Success densities, overlay: 0.8125; avg: 1.0375
>> Success eip: 0xbfd314c6 offset from base: 70
>> Printing PC Trace (instructions in order of execution)
>>      1  2B @0xbfd31480: eb 2f                              jmp 0x31                 nextPC: 0xbfd314b1
>>      2  5B @0xbfd314b1: e8 cc ff ff ff                     call 0xffffffffffffffd1  nextPC: 0xbfd31482
>>      3  2B @0xbfd31482: 31 c0                              xor eax, eax             nextPC: 0xbfd31484
>>      4  2B @0xbfd31484: 31 db                              xor ebx, ebx             nextPC: 0xbfd31486
>>      5  2B @0xbfd31486: 31 d2                              xor edx, edx             nextPC: 0xbfd31488
>>      6  2B @0xbfd31488: 31 c9                              xor ecx, ecx             nextPC: 0xbfd3148a
>>      7  1B @0xbfd3148a: 5a                                 pop edx                  nextPC: 0xbfd3148b
>>      8  1B @0xbfd3148b: 52                                 push edx                 nextPC: 0xbfd3148c
>>      9  2B @0xbfd3148c: 89 d6                              mov esi, edx             nextPC: 0xbfd3148e
>>     10  2B @0xbfd3148e: 89 d7                              mov edi, edx             nextPC: 0xbfd31490
>>     11  1B @0xbfd31490: 46                                 inc esi                  nextPC: 0xbfd31491
>>     12  1B @0xbfd31491: 47                                 inc edi                  nextPC: 0xbfd31492
>>     13  2B @0xbfd31492: b1 29                              mov cl, 0x29             nextPC: 0xbfd31494
>>     14  2B @0xbfd31494:*31*c0                              xor eax, eax             nextPC: 0xbfd31496
>>     15  2B @0xbfd31496:*31*db                              xor ebx, ebx             nextPC: 0xbfd31498
>>     16  2B @0xbfd31498:*8a*07                              mov al, [edi]            nextPC: 0xbfd3149a
>>     17  2B @0xbfd3149a:*01*f8                              add eax, edi             nextPC: 0xbfd3149c
>>     18  2B @0xbfd3149c:*8a*18                              mov bl, [eax]            nextPC: 0xbfd3149e
>>     19  2B @0xbfd3149e:*88*1e                              mov [esi], bl            nextPC: 0xbfd314a0
>>     20  2B @0xbfd314a0:*89*c7                              mov edi, eax             nextPC: 0xbfd314a2
>>     21  1B @0xbfd314a2:*47                                 inc edi                  nextPC: 0xbfd314a3
>>     22  1B @0xbfd314a3:*46                                 inc esi                  nextPC: 0xbfd314a4
>>     23  2B @0xbfd314a4:*e2*ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd314a6 jmpPc: 0xbfd31494
>>     24  2B @0xbfd31494:*31*c0                              xor eax, eax              *vestigial* nextPC: 0xbfd31496
>>     25  2B @0xbfd31496:*31*db                              xor ebx, ebx             nextPC: 0xbfd31498
>>     26  2B @0xbfd31498:*8a*07                              mov al, [edi]            nextPC: 0xbfd3149a
>>     27  2B @0xbfd3149a:*01*f8                              add eax, edi             nextPC: 0xbfd3149c
>>     28  2B @0xbfd3149c:*8a*18                              mov bl, [eax]            nextPC: 0xbfd3149e
>>     29  2B @0xbfd3149e:*88*1e                              mov [esi], bl            nextPC: 0xbfd314a0
>>     30  2B @0xbfd314a0:*89*c7                              mov edi, eax             nextPC: 0xbfd314a2
>>     31  1B @0xbfd314a2:*47                                 inc edi                  nextPC: 0xbfd314a3
>>     32  1B @0xbfd314a3:*46                                 inc esi                  nextPC: 0xbfd314a4
>>     33  2B @0xbfd314a4:*e2*ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd314a6 jmpPc: 0xbfd31494
>>     34  1B @0xbfd314a6: 59                                 pop ecx                  nextPC: 0xbfd314a7
>>     35  2B @0xbfd314a7: ff d1                              call ecx                 nextPC: 0x00000000
>>     36  2B @0xbfd314b6: eb 13                              jmp 0x15                 nextPC: 0xbfd314cb
>>     37  5B @0xbfd314cb: e8 e8 ff ff ff                     call 0xffffffffffffffed  nextPC: 0xbfd314b8
>>     38  1B @0xbfd314b8: 59                                 pop ecx                  nextPC: 0xbfd314b9
>>     39  2B @0xbfd314b9: 31 c0                              xor eax, eax             nextPC: 0xbfd314bb
>>     40  2B @0xbfd314bb: b0 04                              mov al, 0x4              nextPC: 0xbfd314bd
>>     41  2B @0xbfd314bd: 31 db                              xor ebx, ebx             nextPC: 0xbfd314bf
>>     42  1B @0xbfd314bf: 43                                 inc ebx                  nextPC: 0xbfd314c0
>>     43  2B @0xbfd314c0: 31 d2                              xor edx, edx             nextPC: 0xbfd314c2
>>     44  2B @0xbfd314c2: b2 0f                              mov dl, 0xf              nextPC: 0xbfd314c4
>>     45  2B @0xbfd314c4: cd 80                              int 0x80                 nextPC: 0xbfd314c6
>> Printing the memory map (1 snapshots)
>>    Printing snapshot 0
>>    The density (0 to 1) of this state's path is (83/80) = 1.0375
>>    Mem_map start_addr: 0xbfd31480, length: 175B, valid bytes: 83, exec'ed bytes: 67, range: 80B, end_addr: 0xbfd314cf
           0 1 2 3  4 5 6 7  8 9 a b  c d e f   ASCII
0xbfd31480 eb2f31c0 31db31d2 31c95a52 89d689d7  ./1.1.1.1.ZR....
0xbfd31490 4647b129 ----31db 8a0701f8 8a18881e  FG.)..1.........
0xbfd314a0 89c74746 e2ee59ff d1------ --------  ..GF..Y.........
0xbfd314b0 --e8ccff ffffeb13 5931c0b0 0431db43  ........Y1...1.C
0xbfd314c0 31d2b20f cd80---- ------e8 e8ffffff  1...............

27 [State 1] Terminating state 1 with message 'EIP reached, success'
27 [State 1] Switching from state 1 to state 0
Copied 34928 (count=1)
Deleting state 1 0x0x2002c950
27 [State 0] Message from guest (0xbfd30adc): << Looping fork, currently at 0
>> fuzzInit: datum forking for value 1
>> fuzzInit: datum forking for value 1
27 [State 0] Forking state 0 at pc = 0x8048a0e into states:
    state 0 with condition (Eq false
    (Eq (w32 1)
        (ReadLSB w32 0 v1_fuzz_symb_1)))
    state 2 with condition (Not (Eq false
         (Eq (w32 1)
             (ReadLSB w32 0 v1_fuzz_symb_1))))
Stack frame at fork:
s2e_dummyMainFunction
tcg-llvm-tb-1-8048a0e
Size=2 Low=0 splitIndex=1 high=1
27 [State 0] Switching from state 0 to state 2
Copied 34928 (count=1)
Finalizing TB execution 2
s2e_dummyMainFunction
tcg-llvm-tb-1-8048a0e
27 [State 2] Message from guest (0xbfd30adc): << About to call dasospreproc_init with shell: 0xbfd31480 (offset of 1 not yet applied), shell_len: 175, eip: 0x00000000

27 [State 2] Warning: EIP is not set, there may be false positives
>> Recv'ed custom insn for a DasosPreproc memory segment within pid 86716416, addr range: 0xbfd31480-0xbfd3152f with eip: 0x00000000 buffer length: 175 and syscall number: 1024
  1  1B @0xbfd31481: 2f                                 das                      nextPC: 0xbfd31482
  2  2B @0xbfd31482: 31 c0                              xor eax, eax             nextPC: 0xbfd31484
  3  2B @0xbfd31484: 31 db                              xor ebx, ebx             nextPC: 0xbfd31486
  4  2B @0xbfd31486: 31 d2                              xor edx, edx             nextPC: 0xbfd31488
  5  2B @0xbfd31488: 31 c9                              xor ecx, ecx             nextPC: 0xbfd3148a
  6  1B @0xbfd3148a: 5a                                 pop edx                  nextPC: 0xbfd3148b
  7  1B @0xbfd3148b: 52                                 push edx                 nextPC: 0xbfd3148c
  8  2B @0xbfd3148c: 89 d6                              mov esi, edx             nextPC: 0xbfd3148e
  9  2B @0xbfd3148e: 89 d7                              mov edi, edx             nextPC: 0xbfd31490
 10  1B @0xbfd31490: 46                                 inc esi                  nextPC: 0xbfd31491
 11  1B @0xbfd31491: 47                                 inc edi                  nextPC: 0xbfd31492
 12  2B @0xbfd31492: b1 29                              mov cl, 0x29             nextPC: 0xbfd31494
 13  2B @0xbfd31494: 31 c0                              xor eax, eax             nextPC: 0xbfd31496
 14  2B @0xbfd31496: 31 db                              xor ebx, ebx             nextPC: 0xbfd31498
 15  2B @0xbfd31498: 8a 07                              mov al, [edi]            nextPC: 0xbfd3149a
 16  2B @0xbfd3149a: 01 f8                              add eax, edi             nextPC: 0xbfd3149c
 17  2B @0xbfd3149c: 8a 18                              mov bl, [eax]            nextPC: 0xbfd3149e
 18  2B @0xbfd3149e: 88 1e                              mov [esi], bl            nextPC: 0xbfd314a0
 19  2B @0xbfd314a0: 89 c7                              mov edi, eax             nextPC: 0xbfd314a2
 20  1B @0xbfd314a2: 47                                 inc edi                  nextPC: 0xbfd314a3
 21  1B @0xbfd314a3: 46                                 inc esi                  nextPC: 0xbfd314a4
 22  2B @0xbfd314a4: e2 ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd314a6 jmpPc: 0xbfd31494
27 [State 2] @0x080499bf, left buffer range after 22 IoB insns; last IoB insn @0xbfd314a4, disasm in debug.
  1  2B @0xbfd314a4: e2 ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd314a6 jmpPc: 0xbfd31494
27 [State 2] ERROR: we've left our module/shellcode unexpectedly, terminateStateEarly
27 [State 2] Terminating state 2 with message 'eliminated a state that exec'ed out of module bounds unexpectedly'
27 [State 2] Switching from state 2 to state 0
Copied 34928 (count=1)
Deleting state 2 0x0x202060a0
27 [State 0] Message from guest (0xbfd30adc): << Looping fork, currently at 1
27 [State 0] >> Recv'ed onFini custom insn
>> Recv'ed onFini custom insn
>> There were 1 successes
>>    Printing success 0
>> Success from offset 0
>> Success densities, overlay: 0.8125; avg: 1.0375
>> Success eip: 0xbfd314c6 offset from base: 70
>> Printing PC Trace (instructions in order of execution)
>>      1  2B @0xbfd31480: eb 2f                              jmp 0x31                 nextPC: 0xbfd314b1
>>      2  5B @0xbfd314b1: e8 cc ff ff ff                     call 0xffffffffffffffd1  nextPC: 0xbfd31482
>>      3  2B @0xbfd31482: 31 c0                              xor eax, eax             nextPC: 0xbfd31484
>>      4  2B @0xbfd31484: 31 db                              xor ebx, ebx             nextPC: 0xbfd31486
>>      5  2B @0xbfd31486: 31 d2                              xor edx, edx             nextPC: 0xbfd31488
>>      6  2B @0xbfd31488: 31 c9                              xor ecx, ecx             nextPC: 0xbfd3148a
>>      7  1B @0xbfd3148a: 5a                                 pop edx                  nextPC: 0xbfd3148b
>>      8  1B @0xbfd3148b: 52                                 push edx                 nextPC: 0xbfd3148c
>>      9  2B @0xbfd3148c: 89 d6                              mov esi, edx             nextPC: 0xbfd3148e
>>     10  2B @0xbfd3148e: 89 d7                              mov edi, edx             nextPC: 0xbfd31490
>>     11  1B @0xbfd31490: 46                                 inc esi                  nextPC: 0xbfd31491
>>     12  1B @0xbfd31491: 47                                 inc edi                  nextPC: 0xbfd31492
>>     13  2B @0xbfd31492: b1 29                              mov cl, 0x29             nextPC: 0xbfd31494
>>     14  2B @0xbfd31494:*31*c0                              xor eax, eax             nextPC: 0xbfd31496
>>     15  2B @0xbfd31496:*31*db                              xor ebx, ebx             nextPC: 0xbfd31498
>>     16  2B @0xbfd31498:*8a*07                              mov al, [edi]            nextPC: 0xbfd3149a
>>     17  2B @0xbfd3149a:*01*f8                              add eax, edi             nextPC: 0xbfd3149c
>>     18  2B @0xbfd3149c:*8a*18                              mov bl, [eax]            nextPC: 0xbfd3149e
>>     19  2B @0xbfd3149e:*88*1e                              mov [esi], bl            nextPC: 0xbfd314a0
>>     20  2B @0xbfd314a0:*89*c7                              mov edi, eax             nextPC: 0xbfd314a2
>>     21  1B @0xbfd314a2:*47                                 inc edi                  nextPC: 0xbfd314a3
>>     22  1B @0xbfd314a3:*46                                 inc esi                  nextPC: 0xbfd314a4
>>     23  2B @0xbfd314a4:*e2*ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd314a6 jmpPc: 0xbfd31494
>>     24  2B @0xbfd31494:*31*c0                              xor eax, eax              *vestigial* nextPC: 0xbfd31496
>>     25  2B @0xbfd31496:*31*db                              xor ebx, ebx             nextPC: 0xbfd31498
>>     26  2B @0xbfd31498:*8a*07                              mov al, [edi]            nextPC: 0xbfd3149a
>>     27  2B @0xbfd3149a:*01*f8                              add eax, edi             nextPC: 0xbfd3149c
>>     28  2B @0xbfd3149c:*8a*18                              mov bl, [eax]            nextPC: 0xbfd3149e
>>     29  2B @0xbfd3149e:*88*1e                              mov [esi], bl            nextPC: 0xbfd314a0
>>     30  2B @0xbfd314a0:*89*c7                              mov edi, eax             nextPC: 0xbfd314a2
>>     31  1B @0xbfd314a2:*47                                 inc edi                  nextPC: 0xbfd314a3
>>     32  1B @0xbfd314a3:*46                                 inc esi                  nextPC: 0xbfd314a4
>>     33  2B @0xbfd314a4:*e2*ee                              loop 0xfffffffffffffff0  nextPC: 0xbfd314a6 jmpPc: 0xbfd31494
>>     34  1B @0xbfd314a6: 59                                 pop ecx                  nextPC: 0xbfd314a7
>>     35  2B @0xbfd314a7: ff d1                              call ecx                 nextPC: 0x00000000
>>     36  2B @0xbfd314b6: eb 13                              jmp 0x15                 nextPC: 0xbfd314cb
>>     37  5B @0xbfd314cb: e8 e8 ff ff ff                     call 0xffffffffffffffed  nextPC: 0xbfd314b8
>>     38  1B @0xbfd314b8: 59                                 pop ecx                  nextPC: 0xbfd314b9
>>     39  2B @0xbfd314b9: 31 c0                              xor eax, eax             nextPC: 0xbfd314bb
>>     40  2B @0xbfd314bb: b0 04                              mov al, 0x4              nextPC: 0xbfd314bd
>>     41  2B @0xbfd314bd: 31 db                              xor ebx, ebx             nextPC: 0xbfd314bf
>>     42  1B @0xbfd314bf: 43                                 inc ebx                  nextPC: 0xbfd314c0
>>     43  2B @0xbfd314c0: 31 d2                              xor edx, edx             nextPC: 0xbfd314c2
>>     44  2B @0xbfd314c2: b2 0f                              mov dl, 0xf              nextPC: 0xbfd314c4
>>     45  2B @0xbfd314c4: cd 80                              int 0x80                 nextPC: 0xbfd314c6
>> Printing the memory map (1 snapshots)
>>    Printing snapshot 0
>>    The density (0 to 1) of this state's path is (83/80) = 1.0375
>>    Mem_map start_addr: 0xbfd31480, length: 175B, valid bytes: 83, exec'ed bytes: 67, range: 80B, end_addr: 0xbfd314cf
           0 1 2 3  4 5 6 7  8 9 a b  c d e f   ASCII
0xbfd31480 eb2f31c0 31db31d2 31c95a52 89d689d7  ./1.1.1.1.ZR....
0xbfd31490 4647b129 ----31db 8a0701f8 8a18881e  FG.)..1.........
0xbfd314a0 89c74746 e2ee59ff d1------ --------  ..GF..Y.........
0xbfd314b0 --e8ccff ffffeb13 5931c0b0 0431db43  ........Y1...1.C
0xbfd314c0 31d2b20f cd80---- ------e8 e8ffffff  1...............

>>    Done printing success 0
>> Done printing successes
>> The success/offset with the highest overlay density is 0, value of 0.8125
>> The success/offset with the highest average density is 0, value of 1.0375
>> There were 1 different eips: 0xbfd314c6 
27 [State 0] Killing state 0
27 [State 0] Terminating state 0 with message 'State was terminated by opcode
            message: "<< Ending state 0"
            status: 0'
All states were terminated
Deleting state 0 0x0x36643d0
Stack trace
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x742189]
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x44e685]
  /lib/libc.so.6 : exit()+0xe2
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x71d9e1]
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x51e77d]
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x4530b1]
  /lib/libc.so.6 : __libc_start_main()+0xfe
  /home/s2e/s2e/dasos/s2e/build/qemu-release/i386-s2e-softmmu/qemu() [0x44bea9]
