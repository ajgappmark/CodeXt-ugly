bash: cd: /home/s2e/s2e: No such file or directory
bash: README: No such file or directory
s2e@ubuntu:~$ ls
dasos  dasosRJF  Desktop  Documents  Downloads  examples.desktop  HostShared  metasm  Music  Pictures  Public  Templates  Videos
s2e@ubuntu:~$ cd dasosr
bash: cd: dasosr: No such file or directory
s2e@ubuntu:~$ ls dasos
dumps  libDasosfDump.c  libDasosfDump.c~  libDasosfDump.h  libDasosfDump.h~  libDasosfDump.o  s2ePreproc
s2e@ubuntu:~$ mv dasos dasos.old
s2e@ubuntu:~$ mv dasosRJF dasos
s2e@ubuntu:~$ cd dasos
s2e@ubuntu:~/dasos$ ls
buildPluginsQuick.sh  buildPlugins.sh  InstructionTracker  PluginsDir  PluginsMakefile  PluginsMakefile~  PluginsReadme.txt  PluginsReadme.txt~  Run  SyscallTracker
s2e@ubuntu:~/dasos$ cd SyscallTracker/
s2e@ubuntu:~/dasos/SyscallTracker$ ls
20120209-LinuxSyscallMonitor.patch  InterruptMonitor.cpp~    LinuxSyscallMonitor.cpp~  pushCode.sh            syscallent-simple.h  SyscallTracker.h
conf-SyscallTracker.lua             InterruptMonitor.h       LinuxSyscallMonitor.h     runS2E-SyscallTracker  SyscallTracker.cpp   transform-syscallent.sh
InterruptMonitor.cpp                LinuxSyscallMonitor.cpp  old                       syscallent.h           SyscallTracker.cpp~
s2e@ubuntu:~/dasos/SyscallTracker$ locate exec-all/h
s2e@ubuntu:~/dasos/SyscallTracker$ locate exec-all.h
/usr/local/src/s2e/s2e/qemu/exec-all.h
s2e@ubuntu:~/dasos/SyscallTracker$ ./pushCode.sh 
`InterruptMonitor.cpp' -> `../PluginsDir/./InterruptMonitor.cpp'
`InterruptMonitor.h' -> `../PluginsDir/./InterruptMonitor.h'
`LinuxSyscallMonitor.cpp' -> `../PluginsDir/./LinuxSyscallMonitor.cpp'
`LinuxSyscallMonitor.h' -> `../PluginsDir/./LinuxSyscallMonitor.h'
`SyscallTracker.cpp' -> `../PluginsDir/./SyscallTracker.cpp'
`SyscallTracker.h' -> `../PluginsDir/./SyscallTracker.h'
`syscallent-simple.h' -> `../PluginsDir/./syscallent-simple.h'
s2e@ubuntu:~/dasos/SyscallTracker$ ls ..
buildPluginsQuick.sh  buildPlugins.sh  InstructionTracker  PluginsDir  PluginsMakefile  PluginsMakefile~  PluginsReadme.txt  PluginsReadme.txt~  Run  SyscallTracker
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPlugins.sh 
cp -Rup /usr/local/src/s2e/build/../s2e/stp stp
cd stp && make -j1
make[1]: Entering directory `/usr/local/src/s2e/build/stp'
make -C src/AST 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/AST'
make[2]: `libast.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/AST'
make -C src/main 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/main'
make[2]: `libmain.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/main'
make -C src/STPManager 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/STPManager'
make[2]: `libstpmgr.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/STPManager'
make -C src/printer 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/printer'
make[2]: `libprinter.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/printer'
make -C src/absrefine_counterexample 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/absrefine_counterexample'
make[2]: `libabstractionrefinement.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/absrefine_counterexample'
make -C src/to-sat 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/to-sat'
make[2]: `libtosat.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/to-sat'
make -C src/sat core
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/sat'
make -C core libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/core'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/core'
make -C core_prop libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/core_prop'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/core_prop'
make -C simp libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/simp'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/simp'
make -C utils libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/utils'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/utils'
make -C cryptominisat2 lib all
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/cryptominisat2'
make[3]: Nothing to be done for `lib'.
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/cryptominisat2'
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat'
make -C src/simplifier 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/simplifier'
make[2]: `libsimplifier.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/simplifier'
make -C src/extlib-constbv 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/extlib-constbv'
make[2]: `libconstantbv.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/extlib-constbv'
make -C src/extlib-abc 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/extlib-abc'
make[2]: `libabc.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/extlib-abc'
make -C src/c_interface 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/c_interface'
make[2]: `libcinterface.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/c_interface'
make -C src/parser 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/parser'
make[2]: `libparser.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/parser'

Compilation successful.
Type 'make install' to install STP.
make[1]: Leaving directory `/usr/local/src/s2e/build/stp'
mkdir -p stamps && touch stamps/stp-make
cd klee && make ENABLE_OPTIMIZED=1 -j1
make[1]: Entering directory `/usr/local/src/s2e/build/klee'
make[2]: Entering directory `/usr/local/src/s2e/build/klee/lib'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Basic'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Basic'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Support'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Support'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Expr'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Expr'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Solver'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Solver'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Module'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Module'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Core'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Core'
make[2]: Leaving directory `/usr/local/src/s2e/build/klee/lib'
make[2]: Entering directory `/usr/local/src/s2e/build/klee/tools'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/klee-config'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/klee-config'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/kleaver'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/kleaver'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/ktest-tool'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/ktest-tool'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/gen-random-bout'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/gen-random-bout'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/klee-stats'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/klee-stats'
make[2]: Leaving directory `/usr/local/src/s2e/build/klee/tools'
make[1]: Leaving directory `/usr/local/src/s2e/build/klee'
mkdir -p stamps && touch stamps/klee-make-release
mkdir -p qemu-release
cd qemu-release && /usr/local/src/s2e/build/../s2e/qemu/configure \
		--prefix=/usr/local/src/s2e/build/opt \
		--with-llvm=/usr/local/src/s2e/build/llvm/Release+Asserts  \
		--with-clang=/usr/local/src/s2e/build/llvm-native/Release/bin/clang \
		--with-stp=/usr/local/src/s2e/build/stp \
		--with-klee=/usr/local/src/s2e/build/klee/Release+Asserts \
		--target-list=i386-s2e-softmmu,i386-softmmu \
		--enable-llvm \
		--enable-s2e --compile-all-with-clang \
                
cc1plus: warning: command line option "-Wstrict-prototypes" is valid for Ada/C/ObjC but not for C++
cc1plus: warning: command line option "-Wmissing-prototypes" is valid for Ada/C/ObjC but not for C++
Install prefix    /usr/local/src/s2e/build/opt
BIOS directory    /usr/local/src/s2e/build/opt/share/qemu
binary directory  /usr/local/src/s2e/build/opt/bin
library directory /usr/local/src/s2e/build/opt/lib
include directory /usr/local/src/s2e/build/opt/include
config directory  /usr/local/src/s2e/build/opt/etc
Manual directory  /usr/local/src/s2e/build/opt/share/man
ELF interp prefix /usr/gnemul/qemu-%M
Source path       /usr/local/src/s2e/s2e/qemu
C compiler        gcc
C++ compiler      g++
ASAN C compiler   
ASAN C++ compiler 
Host C compiler   gcc
CFLAGS            -O2 -g -g 
CXXFLAGS          -Wno-mismatched-tags -g 
QEMU_CFLAGS       -Werror -fPIE -DPIE -m64 -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -Wstrict-prototypes -Wredundant-decls -Wall -Wundef -Wwrite-strings -Wmissing-prototypes -fno-strict-aliasing  -fstack-protector-all -Wendif-labels -Wmissing-include-dirs -Wempty-body -Wformat-security -Wformat-y2k -Winit-self -Wignored-qualifiers -Wtype-limits -I/usr/include/libpng12  
QEMU_CCFLAGS      
QEMU_CXXFLAGS     
External plugins  
LDFLAGS           -Wl,--warn-common -Wl,-z,relro -Wl,-z,now -pie -m64 -g -g 
make              make
install           install
python            python
smbd              /usr/sbin/smbd
host CPU          x86_64
host big endian   no
target list       i386-s2e-softmmu i386-softmmu
tcg debug enabled no
Mon debug enabled no
gprof enabled     no
sparse enabled    no
strip binaries    yes
profiler          no
static build      no
-Werror enabled   yes
SDL support       yes
curses support    yes
curl support      no
mingw32 support   no
Audio drivers     oss
Extra audio cards ac97 es1370 sb16 hda
Block whitelist   
Mixer emulation   no
VirtFS support    
VNC support       yes
VNC TLS support   yes
VNC SASL support  yes
VNC JPEG support  no
VNC PNG support   yes
VNC thread        no
xen support       no
brlapi support    no
bluez  support    no
Documentation     yes
NPTL support      yes
GUEST_BASE        yes
PIE               yes
vde support       no
Linux AIO support yes
ATTR/XATTR support yes
Install blobs     yes
LLVM support      yes
S2E targets       yes
KVM support       yes
TCG interpreter   no
fdt support       no
preadv support    yes
fdatasync         yes
madvise           yes
posix_madvise     yes
uuid support      yes
libcap-ng support no
vhost-net support yes
Trace backend     nop
Trace output file trace-<pid>
spice support     no
rbd support       no
xfsctl support    no
nss used          no
usb net redir     no
OpenGL support    yes
libiscsi support  no
build guest agent yes
coroutine backend ucontext
mkdir -p stamps && touch stamps/qemu-configure-release
cd qemu-release && make -j1
make[1]: Entering directory `/usr/local/src/s2e/build/qemu-release'
  GEN   config-host.h
  GEN   trace.h
  GEN   trace.c
  GEN   config-target.h
  CC    i386-s2e-softmmu/arch_init.o
  CC    i386-s2e-softmmu/cpus.o
  CC    i386-s2e-softmmu/monitor.o
  CC    i386-s2e-softmmu/machine.o
  CC    i386-s2e-softmmu/gdbstub.o
  CC    i386-s2e-softmmu/balloon.o
  CC    i386-s2e-softmmu/ioport.o
  CC    i386-s2e-softmmu/virtio.o
  CC    i386-s2e-softmmu/virtio-blk.o
  CC    i386-s2e-softmmu/virtio-balloon.o
  CC    i386-s2e-softmmu/virtio-net.o
  CC    i386-s2e-softmmu/virtio-serial-bus.o
  CC    i386-s2e-softmmu/virtio-scsi.o
  CC    i386-s2e-softmmu/vhost_net.o
  CC    i386-s2e-softmmu/vhost.o
  CC    i386-s2e-softmmu/kvm.o
  CC    i386-s2e-softmmu/kvm-all.o
  CC    i386-s2e-softmmu/vga.o
  CC    i386-s2e-softmmu/memory.o
  CC    i386-s2e-softmmu/savevm.o
  CC    i386-s2e-softmmu/xen-stub.o
  CC    i386-s2e-softmmu/ivshmem.o
  CC    i386-s2e-softmmu/device-hotplug.o
  CC    i386-s2e-softmmu/exec.o
  CC    i386-s2e-softmmu/translate-all.o
  CC    i386-s2e-softmmu/cpu-exec.o
  CC    i386-s2e-softmmu/translate.o
  CC    i386-s2e-softmmu/tcg/tcg.o
  CC    i386-s2e-softmmu/tcg/optimize.o
  CXX   i386-s2e-softmmu/tcg/tcg-llvm.o
  CC    i386-s2e-softmmu/helper.o
  CC    i386-s2e-softmmu/cpuid.o
  CC    i386-s2e-softmmu/disas.o
  CC    i386-s2e-softmmu/hyperv.o
  CC    i386-s2e-softmmu/vl.o
  CC    i386-s2e-softmmu/pci.o
  CC    i386-s2e-softmmu/mc146818rtc.o
  CC    i386-s2e-softmmu/pc.o
  CC    i386-s2e-softmmu/apic_common.o
  CC    i386-s2e-softmmu/apic.o
  CC    i386-s2e-softmmu/kvmvapic.o
  CC    i386-s2e-softmmu/sga.o
  CC    i386-s2e-softmmu/ioapic_common.o
  CC    i386-s2e-softmmu/ioapic.o
  CC    i386-s2e-softmmu/piix_pci.o
  CC    i386-s2e-softmmu/vmport.o
  CC    i386-s2e-softmmu/pci-hotplug.o
  CC    i386-s2e-softmmu/smbios.o
  CC    i386-s2e-softmmu/wdt_ib700.o
  CC    i386-s2e-softmmu/debugcon.o
  CC    i386-s2e-softmmu/multiboot.o
  CC    i386-s2e-softmmu/pc_piix.o
  CC    i386-s2e-softmmu/pc_sysfw.o
  CC    i386-s2e-softmmu/kvm/clock.o
  CC    i386-s2e-softmmu/kvm/apic.o
  CC    i386-s2e-softmmu/kvm/i8259.o
  CC    i386-s2e-softmmu/kvm/ioapic.o
  CC    i386-s2e-softmmu/kvm/i8254.o
  CXX   i386-s2e-softmmu/s2e/Plugin.o
In file included from /usr/local/src/s2e/s2e/qemu/s2e/Plugin.cpp:43:
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/InterruptMonitor.h:36:29: error: unknown type name 'ExecutionSignal'
        void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
                                   ^
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/InterruptMonitor.h:39:28: error: unknown type name 'ExecutionSignal'
        void onTranslateJumpStart(ExecutionSignal *signal,
                                  ^
/usr/local/src/s2e/s2e/qemu/s2e/Plugin.cpp:45:10: fatal error: 's2e/Plugins/SystemTracker.h' file not found
#include <s2e/Plugins/SystemTracker.h>
         ^
3 errors generated.
make[2]: *** [s2e/Plugin.o] Error 1
make[1]: *** [subdir-i386-s2e-softmmu] Error 2
make[1]: Leaving directory `/usr/local/src/s2e/build/qemu-release'
make: *** [stamps/qemu-make-release] Error 2
s2e@ubuntu:~/dasos/SyscallTracker$ ls
20120209-LinuxSyscallMonitor.patch  InterruptMonitor.cpp   InterruptMonitor.h       LinuxSyscallMonitor.cpp~  old          runS2E-SyscallTracker  syscallent-simple.h  SyscallTracker.cpp~  transform-syscallent.sh
conf-SyscallTracker.lua             InterruptMonitor.cpp~  LinuxSyscallMonitor.cpp  LinuxSyscallMonitor.h     pushCode.sh  syscallent.h           SyscallTracker.cpp   SyscallTracker.h
s2e@ubuntu:~/dasos/SyscallTracker$ ../
buildPluginsQuick.sh  buildPlugins.sh       InstructionTracker/   PluginsDir/           Run/                  SyscallTracker/       
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPluginsQuick.sh 
  CXX   i386-s2e-softmmu/s2e/Plugin.o
In file included from /usr/local/src/s2e/s2e/qemu/s2e/Plugin.cpp:43:
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/InterruptMonitor.h:36:29: error: unknown type name 'ExecutionSignal'
        void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
                                   ^
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/InterruptMonitor.h:39:28: error: unknown type name 'ExecutionSignal'
        void onTranslateJumpStart(ExecutionSignal *signal,
                                  ^
In file included from /usr/local/src/s2e/s2e/qemu/s2e/Plugin.cpp:45:
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/SyscallTracker.h:8:10: fatal error: 'offset_defines.h' file not found
#include "offset_defines.h"
         ^
3 errors generated.
make[1]: *** [s2e/Plugin.o] Error 1
make: *** [subdir-i386-s2e-softmmu] Error 2
s2e@ubuntu:~/dasos/SyscallTracker$ fgrep -R "ExecutionSignal" /usr/local/src/s2e/* | less

s2e@ubuntu:~/dasos/SyscallTracker$ fgrep -R "ExecutionSignal" /usr/local/src/s2e/* 
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/qemu-system-i386 matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/S2EExecutor.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/StateManager.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/RawMonitor.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/ExecutionStatisticsCollector.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/StackChecker.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/CacheSim.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/CodeSelector.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/ModuleExecutionDetector.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/EventTracer.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/ModuleTracer.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/MemoryTracer.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/InstructionCounter.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/StackMonitor.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/Debugger.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/Searchers/MaxTbSearcher.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/Annotation.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/MemoryChecker.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/InstructionTracker.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/FunctionMonitor.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsApi/NdisHandlers.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsApi/Api.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsApi/NdisHandlersUtils.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsApi/NdisMemoryCheck.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsApi/HalHandlers.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/Example.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/EdgeKiller.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/LibraryCallMonitor.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/X86ExceptionInterceptor.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/InterruptInjector.o matches
Binary file /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/s2e/Plugins/CorePlugin.o matches
/usr/local/src/s2e/s2e/qemu/s2e/S2EExecutor.cpp:            delete static_cast<ExecutionSignal*>(s);
/usr/local/src/s2e/s2e/qemu/s2e/S2EExecutor.cpp:    tb->s2e_tb->executionSignals.push_back(new s2e::ExecutionSignal);
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/StackMonitor.h:    void onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/StackMonitor.h:            ExecutionSignal *signal, S2EExecutionState* state,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/StackMonitor.h:            ExecutionSignal *signal, S2EExecutionState* state, TranslationBlock* tb,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Debugger.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    void onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onTranslateBlockEnd(ExecutionSignal, S2EExecutionState, TranslationBlock, uint64_t, bool, uint64_t);
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onFirstInstruction( ExecutionSignal* signal, S2EExecutionState* state, TranslationBlock* tb, uint64_t pc);
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.h:typedef sigc::signal<void, S2EExecutionState*, uint64_t /* pc */> ExecutionSignal;
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*, 
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*, 
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.h:                 ExecutionSignal*,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/InstructionTracker.h:    void onTranslateInstruction(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Example.h:    void slotTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state, 
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/RawMonitor.h:    void onTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CodeSelector.cpp:void CodeSelector::onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CodeSelector.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CodeSelector.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:        ExecutionSignal *s = (ExecutionSignal*)signal;
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:static void s2e_tcg_instrument_code(S2E*, ExecutionSignal* signal, uint64_t pc, uint64_t nextpc=-1)
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:        tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/StateManager.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    void onTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Example.cpp:void Example::slotTranslateBlockStart(ExecutionSignal *signal, 
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/StateManager.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/EdgeKiller.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/RawMonitor.cpp:void RawMonitor::onTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CodeSelector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CodeSelector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CodeSelector.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Debugger.h:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/SyscallTracker.cpp:void SyscallTracker::onFirstInstruction( ExecutionSignal* signal, S2EExecutionState* state, TranslationBlock* tb, uint64_t pc)
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CacheSim.h:        ExecutionSignal* signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CacheSim.h:    void onTranslateBlockStart(ExecutionSignal* signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:void X86ExceptionInterceptor::onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CacheSim.cpp:    ExecutionSignal* signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/CacheSim.cpp:void CacheSim::onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/InstructionTracker.cpp:void InstructionTracker::onTranslateInstruction(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/EdgeKiller.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::slotTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::onTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:void LinuxSyscallMonitor::onTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/StackMonitor.cpp:        ExecutionSignal *signal, S2EExecutionState* state,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/StackMonitor.cpp:             ExecutionSignal *signal, S2EExecutionState* state, TranslationBlock* tb,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void onTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:        ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	void onTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        ExecutionSignal *signal,
q^C
s2e@ubuntu:~/dasos/SyscallTracker$ fgrep -R "ExecutionSignal" /usr/local/src/s2e/*.cpp 
fgrep: /usr/local/src/s2e/*.cpp: No such file or directory
s2e@ubuntu:~/dasos/SyscallTracker$ fgrep -R "ExecutionSignal" /usr/local/src/s2e/* | grep "\.cpp|\.h" 
^C
s2e@ubuntu:~/dasos/SyscallTracker$ ./pushCode.sh 
`InterruptMonitor.cpp' -> `../PluginsDir/./InterruptMonitor.cpp'
`InterruptMonitor.h' -> `../PluginsDir/./InterruptMonitor.h'
`LinuxSyscallMonitor.cpp' -> `../PluginsDir/./LinuxSyscallMonitor.cpp'
`LinuxSyscallMonitor.h' -> `../PluginsDir/./LinuxSyscallMonitor.h'
`SyscallTracker.cpp' -> `../PluginsDir/./SyscallTracker.cpp'
`SyscallTracker.h' -> `../PluginsDir/./SyscallTracker.h'
`syscallent-simple.h' -> `../PluginsDir/./syscallent-simple.h'
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPluginsQuick.sh 
  CXX   i386-s2e-softmmu/s2e/Plugin.o
In file included from /usr/local/src/s2e/s2e/qemu/s2e/Plugin.cpp:45:
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/SyscallTracker.h:8:10: fatal error: 'offset_defines.h' file not found
#include "offset_defines.h"
         ^
1 error generated.
make[1]: *** [s2e/Plugin.o] Error 1
make: *** [subdir-i386-s2e-softmmu] Error 2
s2e@ubuntu:~/dasos/SyscallTracker$ locate offset_defines.h
s2e@ubuntu:~/dasos/SyscallTracker$ ls
20120209-LinuxSyscallMonitor.patch  InterruptMonitor.cpp   InterruptMonitor.h   LinuxSyscallMonitor.cpp   LinuxSyscallMonitor.h  pushCode.sh            syscallent.h         SyscallTracker.cpp   SyscallTracker.h
conf-SyscallTracker.lua             InterruptMonitor.cpp~  InterruptMonitor.h~  LinuxSyscallMonitor.cpp~  old                    runS2E-SyscallTracker  syscallent-simple.h  SyscallTracker.cpp~  transform-syscallent.sh
s2e@ubuntu:~/dasos/SyscallTracker$ ./pushCode.sh 
`InterruptMonitor.cpp' -> `../PluginsDir/./InterruptMonitor.cpp'
`InterruptMonitor.h' -> `../PluginsDir/./InterruptMonitor.h'
`LinuxSyscallMonitor.cpp' -> `../PluginsDir/./LinuxSyscallMonitor.cpp'
`LinuxSyscallMonitor.h' -> `../PluginsDir/./LinuxSyscallMonitor.h'
`SyscallTracker.cpp' -> `../PluginsDir/./SyscallTracker.cpp'
`SyscallTracker.h' -> `../PluginsDir/./SyscallTracker.h'
`syscallent-simple.h' -> `../PluginsDir/./syscallent-simple.h'
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPluginsQuick.sh 
  CXX   i386-s2e-softmmu/s2e/Plugin.o
In file included from /usr/local/src/s2e/s2e/qemu/s2e/Plugin.cpp:45:
In file included from /usr/local/src/s2e/s2e/qemu/s2e/Plugins/SyscallTracker.h:10:
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/syscallent-simple.h:33:2: error: expected unqualified-id
        { 0,    0,      "restart_syscall" }, /* 0 */
        ^
1 error generated.
make[1]: *** [s2e/Plugin.o] Error 1
make: *** [subdir-i386-s2e-softmmu] Error 2
s2e@ubuntu:~/dasos/SyscallTracker$ locate syscallent.h
s2e@ubuntu:~/dasos/SyscallTracker$ cd ..
s2e@ubuntu:~/dasos$ ls
buildPluginsQuick.sh  buildPlugins.sh  InstructionTracker  PluginsDir  PluginsMakefile  PluginsMakefile~  PluginsReadme.txt  PluginsReadme.txt~  Run  SyscallTracker
s2e@ubuntu:~/dasos$ vi searchSource.sh
s2e@ubuntu:~/dasos$ chmod 755 searchSource.sh 
s2e@ubuntu:~/dasos$ ./searchSource.sh Execution
grep: /usr/loca/src/s2e/.: No such file or directory
s2e@ubuntu:~/dasos$ vi searchSource.sh
s2e@ubuntu:~/dasos$ ./searchSource.sh Execution
/usr/local/src/s2e/./s2e/qemu/llvm-lib.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/exec-all.h: * The file was modified for S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/cpu-all.h: * The file was modified for S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/softmmu_header.h: * The file was modified for S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/target-arm/cpu.h:/* Execution state bits.  MRS read as zero, MSR writes ignored.  */
/usr/local/src/s2e/./s2e/qemu/softmmu_template.h: * The file was modified for S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Signals/functors.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Signals/fsigc++.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Signals/Signals.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Signals/sig-template.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/SelectRemovalPass.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EStatsTracker.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EStatsTracker.h:class S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EStatsTracker.h:    void updateStats(S2EExecutionState* state);
/usr/local/src/s2e/./s2e/qemu/s2e/ExprInterface.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/ExprInterface.cpp:#include "S2EExecutionState.h"
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:void ConfigFile::invokeAnnotation(const std::string &annotation, S2EExecutionState *param)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    S2ELUAExecutionState state(param);
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    Lunar<S2ELUAExecutionState>::push(L, &state);
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    Lunar<S2ELUAExecutionState>::Register(m_luaState);
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:const char S2ELUAExecutionState::className[] = "S2ELUAExecutionState";
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:Lunar<S2ELUAExecutionState>::RegType S2ELUAExecutionState::methods[] = {
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:  LUNAR_DECLARE_METHOD(S2ELUAExecutionState, writeRegister),
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:  LUNAR_DECLARE_METHOD(S2ELUAExecutionState, writeRegisterSymb),
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:  LUNAR_DECLARE_METHOD(S2ELUAExecutionState, readRegister),
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:  LUNAR_DECLARE_METHOD(S2ELUAExecutionState, readParameter),
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:  LUNAR_DECLARE_METHOD(S2ELUAExecutionState, writeParameter),
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:  LUNAR_DECLARE_METHOD(S2ELUAExecutionState, writeMemorySymb),
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:  LUNAR_DECLARE_METHOD(S2ELUAExecutionState, readMemory),
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:  LUNAR_DECLARE_METHOD(S2ELUAExecutionState, writeMemory),
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:S2ELUAExecutionState::S2ELUAExecutionState(lua_State *L)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    g_s2e->getDebugStream() << "Creating S2ELUAExecutionState" << '\n';
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:S2ELUAExecutionState::S2ELUAExecutionState(S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    g_s2e->getDebugStream() << "Creating S2ELUAExecutionState" << '\n';
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:S2ELUAExecutionState::~S2ELUAExecutionState()
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    g_s2e->getDebugStream() << "Deleting S2ELUAExecutionState" << '\n';
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:int S2ELUAExecutionState::readParameter(lua_State *L)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    g_s2e->getDebugStream() << "S2ELUAExecutionState: Reading parameter " << param
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:        g_s2e->getDebugStream() << "S2ELUAExecutionState: could not read parameter " << param <<
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:int S2ELUAExecutionState::writeParameter(lua_State *L)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    g_s2e->getDebugStream() << "S2ELUAExecutionState: Writing parameter " << param
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:        g_s2e->getDebugStream() << "S2ELUAExecutionState: could not write parameter " << param <<
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:int S2ELUAExecutionState::readMemory(lua_State *L)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:int S2ELUAExecutionState::writeMemory(lua_State *L)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:int S2ELUAExecutionState::writeMemorySymb(lua_State *L)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    g_s2e->getDebugStream() << "S2ELUAExecutionState: Writing symbolic value to memory location" <<
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:int S2ELUAExecutionState::writeRegister(lua_State *L)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    g_s2e->getDebugStream() << "S2ELUAExecutionState: Writing to register "
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:int S2ELUAExecutionState::writeRegisterSymb(lua_State *L)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    g_s2e->getDebugStream() << "S2ELUAExecutionState: Writing to register "
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:int S2ELUAExecutionState::readRegister(lua_State *L)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.cpp:    g_s2e->getDebugStream() << "S2ELUAExecutionState: Reading register "
/usr/local/src/s2e/./s2e/qemu/s2e/S2EDeviceState.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EDeviceState.h:class S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugin.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugin.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugin.cpp:PluginState *Plugin::getPluginState(S2EExecutionState *s, PluginStateFactory f) const
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.cpp:#include <llvm/ExecutionEngine/ExecutionEngine.h>
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.cpp:    m_tcgLLVMContext->deleteExecutionEngine();
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.cpp:    m_tcgLLVMContext->deleteExecutionEngine();
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.cpp:                             const S2EExecutionState* state) const
/usr/local/src/s2e/./s2e/qemu/s2e/Utils.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:class S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void processTestCase(const klee::ExecutionState &state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:typedef void (*StateManagerCb)(S2EExecutionState *s, bool killingState);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    std::vector<S2EExecutionState*> m_deletedStates;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    S2EExecutionState* createInitialState();
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void initializeExecution(S2EExecutionState *initialState,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void registerCpu(S2EExecutionState *initialState, CPUX86State *cpuEnv);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void registerRam(S2EExecutionState *initialState,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void registerDirtyMask(S2EExecutionState *initial_state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    klee::ref<klee::Expr> executeFunction(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    klee::ref<klee::Expr> executeFunction(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    S2EExecutionState* selectNextState(S2EExecutionState* state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    klee::ExecutionState* selectNonSpeculativeState(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    uintptr_t executeTranslationBlock(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void finalizeTranslationBlockExec(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void cleanupTranslationBlock(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void updateStates(klee::ExecutionState *current) {
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void setCCOpEflags(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void doInterrupt(S2EExecutionState *state, int intno, int is_int,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    bool suspendState(S2EExecutionState *state, bool onlyRemoveFromPtree = false);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    bool resumeState(S2EExecutionState *state, bool onlyAddToPtree = false);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    StatePair fork(klee::ExecutionState &current,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    bool merge(klee::ExecutionState &base, klee::ExecutionState &other);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void queueStateForMerge(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void updateStats(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    virtual void terminateStateEarly(klee::ExecutionState &state, const llvm::Twine &message);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                                    klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                                    klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                                         klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                                         klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                                         klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void prepareFunctionExecution(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void executeOneInstruction(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    uintptr_t executeTranslationBlockKlee(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    uintptr_t executeTranslationBlockConcrete(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void deleteState(klee::ExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void doStateSwitch(S2EExecutionState* oldState,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                       S2EExecutionState* newState);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void doStateFork(S2EExecutionState *originalState,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                     const std::vector<S2EExecutionState*>& newStates,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void switchToConcrete(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void switchToSymbolic(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void copyOutConcretes(klee::ExecutionState &state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    bool copyInConcretes(klee::ExecutionState &state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void branch(klee::ExecutionState &state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:              std::vector<klee::ExecutionState*> &result);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    virtual void terminateState(klee::ExecutionState &state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:    void terminateStateAtFork(S2EExecutionState &state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.h:                        klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugin.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugin.h:class S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugin.h:    mutable S2EExecutionState *m_CachedPluginS2EState;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugin.h:    PluginState *getPluginState(S2EExecutionState *s, PluginState* (*f)(Plugin *, S2EExecutionState *)) const;
/usr/local/src/s2e/./s2e/qemu/s2e/machine.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_config.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_block.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_block.h:extern struct S2EExecutionState **g_block_s2e_state;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:#include <llvm/ExecutionEngine/ExecutionEngine.h>
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:#include <llvm/ExecutionEngine/GenericValue.h>
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    S2EExternalDispatcher(ExecutionEngine* engine):
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EHandler::processTestCase(const klee::ExecutionState &state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        assert(dynamic_cast<S2EExecutionState*>(state));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        S2EExecutionState* s2eState = static_cast<S2EExecutionState*>(state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:                                klee::ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    S2EExecutionState* s2eState = static_cast<S2EExecutionState*>(state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    S2EExecutionState* s2eState = static_cast<S2EExecutionState*>(state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        assert(dynamic_cast<S2EExecutionState*>(state));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        S2EExecutionState* s2eState = static_cast<S2EExecutionState*>(state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    S2EExecutionState* s2eState = static_cast<S2EExecutionState*>(state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    std::vector<ExecutionState *> branches;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        : Executor(opts, ie, tcgLLVMContext->getExecutionEngine()),
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:            tcgLLVMContext->getExecutionEngine());
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    // XXX: how to get data layout without without ExecutionEngine ?
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:            m_tcgLLVMContext->getExecutionEngine()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:S2EExecutionState* S2EExecutor::createInitialState()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    S2EExecutionState *state =
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        new S2EExecutionState(m_dummyMain);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    searcher->update(0, states, std::set<ExecutionState*>());
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::initializeExecution(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::registerCpu(S2EExecutionState *initialState,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::registerRam(S2EExecutionState *initialState,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::registerDirtyMask(S2EExecutionState *initial_state, uint64_t host_address, uint64_t size)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::switchToConcrete(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        s2e::plugins::ModuleExecutionDetector *md =
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:                dynamic_cast<s2e::plugins::ModuleExecutionDetector*>(m_s2e->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    static_cast<S2EExecutionState*>(state)->m_runningConcrete = true;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::switchToSymbolic(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::copyOutConcretes(ExecutionState &state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:bool S2EExecutor::copyInConcretes(klee::ExecutionState &state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    std::vector<ExecutionState*> allStates;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        S2EExecutionState *s2estate = static_cast<S2EExecutionState*>(*it);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        S2EExecutionState *s2estate = static_cast<S2EExecutionState*>(allStates[i]);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        S2EExecutionState *nextState = c->selectNextState(g_s2e_state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::doStateSwitch(S2EExecutionState* oldState,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:                                S2EExecutionState* newState)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:ExecutionState* S2EExecutor::selectNonSpeculativeState(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    ExecutionState *newState;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    std::set<ExecutionState*> empty;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        foreach(S2EExecutionState* s, m_deletedStates) {
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:S2EExecutionState* S2EExecutor::selectNextState(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    ExecutionState *nstate = selectNonSpeculativeState(state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    ExecutionState& newKleeState = *nstate;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    assert(dynamic_cast<S2EExecutionState*>(&newKleeState));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    S2EExecutionState* newState =
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:            static_cast<S2EExecutionState*  >(&newKleeState);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    foreach(S2EExecutionState* s, m_deletedStates) {
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::prepareFunctionExecution(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:inline void S2EExecutor::executeOneInstruction(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:            std::vector<ExecutionState*> arr(states.begin(), states.end());
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::finalizeTranslationBlockExec(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        prepareFunctionExecution(state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:uintptr_t S2EExecutor::executeTranslationBlockConcrete(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:klee::ref<klee::Expr> S2EExecutor::executeFunction(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    prepareFunctionExecution(state, function, args);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:klee::ref<klee::Expr> S2EExecutor::executeFunction(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::deleteState(klee::ExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    assert(dynamic_cast<S2EExecutionState*>(state));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    m_deletedStates.push_back(static_cast<S2EExecutionState*>(state));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::doStateFork(S2EExecutionState *originalState,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:                 const vector<S2EExecutionState*>& newStates,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        S2EExecutionState* newState = newStates[i];
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:S2EExecutor::StatePair S2EExecutor::fork(ExecutionState &current,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    assert(dynamic_cast<S2EExecutionState*>(&current));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    assert(!static_cast<S2EExecutionState*>(&current)->m_runningConcrete);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        assert(dynamic_cast<S2EExecutionState*>(res.first));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        assert(dynamic_cast<S2EExecutionState*>(res.second));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        std::vector<S2EExecutionState*> newStates(2);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        newStates[0] = static_cast<S2EExecutionState*>(res.first);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        newStates[1] = static_cast<S2EExecutionState*>(res.second);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        doStateFork(static_cast<S2EExecutionState*>(&current),
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::branch(klee::ExecutionState &state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:          vector<ExecutionState*> &result)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    assert(dynamic_cast<S2EExecutionState*>(&state));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    assert(!static_cast<S2EExecutionState*>(&state)->m_runningConcrete);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    vector<S2EExecutionState*> newStates;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:            assert(dynamic_cast<S2EExecutionState*>(result[i]));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:            newStates.push_back(static_cast<S2EExecutionState*>(result[i]));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:        doStateFork(static_cast<S2EExecutionState*>(&state),
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:bool S2EExecutor::merge(klee::ExecutionState &_base, klee::ExecutionState &_other)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    assert(dynamic_cast<S2EExecutionState*>(&_base));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    assert(dynamic_cast<S2EExecutionState*>(&_other));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    S2EExecutionState& base = static_cast<S2EExecutionState&>(_base);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    S2EExecutionState& other = static_cast<S2EExecutionState&>(_other);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::terminateStateEarly(klee::ExecutionState &state, const llvm::Twine &message)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    S2EExecutionState  *s2estate = static_cast<S2EExecutionState*>(&state);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::terminateState(ExecutionState &s)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    S2EExecutionState& state = static_cast<S2EExecutionState&>(s);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::terminateStateAtFork(S2EExecutionState &state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:inline void S2EExecutor::setCCOpEflags(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:inline void S2EExecutor::doInterrupt(S2EExecutionState *state, int intno,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:bool S2EExecutor::suspendState(S2EExecutionState *state, bool onlyRemoveFromPtree)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:bool S2EExecutor::resumeState(S2EExecutionState *state, bool onlyAddToPtree)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:            delete static_cast<ExecutionSignal*>(s);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::queueStateForMerge(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void S2EExecutor::updateStats(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:S2EExecutionState* s2e_create_initial_state(S2E *s2e)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void s2e_initialize_execution(S2E *s2e, S2EExecutionState *initial_state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    s2e->getExecutor()->initializeExecution(initial_state, execute_always_klee);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void s2e_register_cpu(S2E *s2e, S2EExecutionState *initial_state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void s2e_register_ram(S2E* s2e, S2EExecutionState *initial_state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void s2e_register_dirty_mask(S2E *s2e, S2EExecutionState *initial_state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void s2e_qemu_finalize_tb_exec(S2E *s2e, S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void s2e_qemu_cleanup_tb_exec(S2E* s2e, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void s2e_switch_to_symbolic(S2E *s2e, S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    state->enableSymbolicExecution();
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void s2e_ensure_symbolic(S2E *s2e, S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:void s2e_update_tlb_entry(S2EExecutionState* state, CPUX86State* env,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    tb->s2e_tb->executionSignals.push_back(new s2e::ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Slab.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:#include "S2EExecutionState.h"
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:MemoryObject *S2EExecutionState::m_cpuRegistersState = NULL;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:MemoryObject *S2EExecutionState::m_cpuSystemState = NULL;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:MemoryObject *S2EExecutionState::m_dirtyMask = NULL;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:unsigned S2EExecutionState::s_lastSymbolicId = 0;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:S2EExecutionState::S2EExecutionState(klee::KFunction *kf) :
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:        klee::ExecutionState(kf), m_stateID(g_s2e->fetchAndIncrementStateId()),
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:S2EExecutionState::~S2EExecutionState()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::enableSymbolicExecution()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::disableSymbolicExecution()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::enableForking()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::disableForking()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::addressSpaceChange(const klee::MemoryObject *mo,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:ExecutionState* S2EExecutionState::clone()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:    S2EExecutionState *ret = new S2EExecutionState(*this);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:ref<Expr> S2EExecutionState::readCpuRegister(unsigned offset,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::writeCpuRegister(unsigned offset,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::writeCpuRegisterSymbolic(unsigned offset,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::readCpuRegisterConcrete(unsigned offset,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::writeCpuRegisterConcrete(unsigned offset,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:uint64_t S2EExecutionState::readCpuState(unsigned offset,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::writeCpuState(unsigned offset, uint64_t value,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::isRamRegistered(uint64_t hostAddress)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::isRamSharedConcrete(uint64_t hostAddress)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:uint64_t S2EExecutionState::getPc() const
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:uint64_t S2EExecutionState::getFlags()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::setPc(uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::setSp(uint64_t sp)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:uint64_t S2EExecutionState::getSp() const
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::bypassFunction(unsigned paramCount)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::getReturnAddress(uint64_t *retAddr)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::dumpStack(unsigned count)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::dumpStack(unsigned count, uint64_t sp)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:uint64_t S2EExecutionState::getTotalInstructionCount()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:TranslationBlock *S2EExecutionState::getTb() const
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:uint64_t S2EExecutionState::getPid() const
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:uint64_t S2EExecutionState::getSymbolicRegistersMask() const
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::readMemoryConcrete(uint64_t address, void *buf,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::writeMemoryConcrete(uint64_t address, void *buf,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:uint64_t S2EExecutionState::getPhysicalAddress(uint64_t virtualAddress) const
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:uint64_t S2EExecutionState::getHostAddress(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::readString(uint64_t address, std::string &s, unsigned maxLen)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::readUnicodeString(uint64_t address, std::string &s, unsigned maxLen)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:ref<Expr> S2EExecutionState::readMemory(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:ref<Expr> S2EExecutionState::readMemory8(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::readMemoryConcrete8(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::writeMemory(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::writeMemory8(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::writeMemory(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::writeMemory8(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::writeMemory16(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::writeMemory32(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::writeMemory64(uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::readRamConcreteCheck(uint64_t hostAddress, uint8_t* buf, uint64_t size)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::readRamConcrete(uint64_t hostAddress, uint8_t* buf, uint64_t size)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::writeRamConcrete(uint64_t hostAddress, const uint8_t* buf, uint64_t size)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::readRegisterConcrete(
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::writeRegisterConcrete(CPUX86State *cpuState,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:std::string S2EExecutionState::getUniqueVarName(const std::string &name)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:ref<Expr> S2EExecutionState::createConcolicValue(
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:ref<Expr> S2EExecutionState::createSymbolicValue(
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:std::vector<ref<Expr> > S2EExecutionState::createConcolicArray(
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:std::vector<ref<Expr> > S2EExecutionState::createSymbolicArray(
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::undoCallAndJumpToSymbolic()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::jumpToSymbolicCpp()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::jumpToSymbolic()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::needToJumpToSymbolic() const
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::dumpX86State(llvm::raw_ostream &os) const
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:bool S2EExecutionState::merge(const ExecutionState &_b)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:    assert(dynamic_cast<const S2EExecutionState*>(&_b));
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:    const S2EExecutionState& b = static_cast<const S2EExecutionState&>(_b);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:CPUX86State *S2EExecutionState::getConcreteCpuState() const
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::dmaRead(uint64_t hostAddress, uint8_t *buf, unsigned size)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::dmaWrite(uint64_t hostAddress, uint8_t *buf, unsigned size)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::flushTlbCache()
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::flushTlbCachePage(klee::ObjectState *objectState, int mmu_idx, int index)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::updateTlbEntry(CPUX86State* env,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:uint8_t S2EExecutionState::readDirtyMask(uint64_t host_address)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::writeDirtyMask(uint64_t host_address, uint8_t val)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void S2EExecutionState::addConstraint(klee::ref<klee::Expr> e)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:S2EExecutionState* g_s2e_state = NULL;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:int s2e_is_ram_registered(S2E *s2e, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:int s2e_is_ram_shared_concrete(S2E *s2e, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void s2e_read_ram_concrete_check(S2E *s2e, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:    if(state->isSymbolicExecutionEnabled())
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void s2e_read_ram_concrete(S2E *s2e, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void s2e_write_ram_concrete(S2E *s2e, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void s2e_read_register_concrete(S2E* s2e, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:void s2e_write_register_concrete(S2E* s2e, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:int s2e_is_zombie(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:int s2e_is_speculative(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.cpp:int s2e_is_runnable(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Synchronization.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EDeviceState.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EDeviceState.cpp:#include "S2EExecutionState.h"
/usr/local/src/s2e/./s2e/qemu/s2e/S2EDeviceState.cpp:void s2e_init_device_state(S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.h:class S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.h:                            const S2EExecutionState* state) const;
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.h:    llvm::raw_ostream& getInfoStream(const S2EExecutionState* state = 0) const {
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.h:    llvm::raw_ostream& getDebugStream(const S2EExecutionState* state = 0) const {
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.h:    llvm::raw_ostream& getMessagesStream(const S2EExecutionState* state = 0) const {
/usr/local/src/s2e/./s2e/qemu/s2e/S2E.h:    llvm::raw_ostream& getWarningsStream(const S2EExecutionState* state = 0) const {
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:#include "S2EExecutionState.h"
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:static void io_write_chk(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:        state->writeMemory(pa, val, S2EExecutionState::HostAddress);
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:static ref<Expr> io_read_chk(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:        return state->readMemory(pa, width, S2EExecutionState::HostAddress);
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:    S2EExecutionState *s2estate = static_cast<S2EExecutionState*>(state);
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                s2estate->writeMemory(addr + addend, value, S2EExecutionState::HostAddress);
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                value = s2estate->readMemory(addr + addend, width, S2EExecutionState::HostAddress);
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:                                     ExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:    S2EExecutionState *s2estate = static_cast<S2EExecutionState*>(state);
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:            s2estate->writeMemory(physaddr, value, S2EExecutionState::HostAddress);
/usr/local/src/s2e/./s2e/qemu/s2e/MMUFunctionHandlers.cpp:            value = s2estate->readMemory(physaddr, width, S2EExecutionState::HostAddress);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:#include <klee/ExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:class S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:typedef PluginState* (*PluginStateFactory)(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:class S2EExecutionState : public klee::ExecutionState
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:    /* Mostly accessed from S2EExecutionState anyway, extra indirection if moved...*/
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:    ExecutionState* clone();
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:    S2EExecutionState(klee::KFunction *kf);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:    ~S2EExecutionState();
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:    bool isSymbolicExecutionEnabled() const {
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:    void enableSymbolicExecution();
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:    void disableSymbolicExecution();
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutionState.h:    bool merge(const ExecutionState &b);
/usr/local/src/s2e/./s2e/qemu/s2e/Slab.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:#include "ModuleExecutionDetector.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:#include "ExecutionStatisticsCollector.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    bool getFrameInfo(S2EExecutionState *state, uint64_t sp, bool &onTheStack, StackFrameInfo &info) const;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void dump(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    bool getCallStacks(S2EExecutionState *state, CallStacks &callStacks) const;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    sigc::signal<void, S2EExecutionState*> onStackCreation;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    sigc::signal<void, S2EExecutionState*> onStackDeletion;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    ModuleExecutionDetector *m_detector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    ExecutionStatisticsCollector *m_statsCollector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void onThreadCreate(S2EExecutionState *state, const ThreadDescriptor &thread);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void onThreadExit(S2EExecutionState *state, const ThreadDescriptor &thread);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:            S2EExecutionState *state, const ModuleDescriptor &desc,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:            ExecutionSignal *signal, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:            ExecutionSignal *signal, S2EExecutionState* state, TranslationBlock* tb,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void onStackPointerModification(S2EExecutionState *state, uint64_t pc, bool isCall);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void onModuleLoad(S2EExecutionState* state, const ModuleDescriptor &module);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void onModuleUnload(S2EExecutionState* state, const ModuleDescriptor &module);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void onModuleTransition(S2EExecutionState* state, const ModuleDescriptor *prev,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.cpp:bool Debugger::decideTracing(S2EExecutionState *state, uint64_t addr, uint64_t data) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.cpp:void Debugger::onDataMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.cpp:    S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.cpp:void Debugger::onInstruction(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/DataStructureSpy.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:                  "Interceptor", "ModuleExecutionDetector", "ExecutionTracer", "MemoryTracer");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:    static PluginState *factory(Plugin*, S2EExecutionState*) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:    m_moduleDetector = static_cast<ModuleExecutionDetector*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:                            s2e()->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:    m_executionTracer = static_cast<ExecutionTracer*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:                s2e()->getPlugin("ExecutionTracer"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:void MemoryChecker::onModuleTransition(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:void MemoryChecker::onStateSwitch(S2EExecutionState *currentState,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:                                  S2EExecutionState *nextState)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:void MemoryChecker::onException(S2EExecutionState *state, unsigned intNb, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:void MemoryChecker::onDataMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:            S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:            S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:            S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:            S2EExecutionState *state
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:void MemoryChecker::grantMemoryForModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:std::string MemoryChecker::getRegionTypePrefix(S2EExecutionState *state, const std::string &regionType)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:void MemoryChecker::grantMemoryForModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:bool MemoryChecker::revokeMemoryForModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:void MemoryChecker::grantMemory(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:    ExecutionTraceMemChecker::Flags traceFlags = ExecutionTraceMemChecker::GRANT;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:    if (perms & READ) traceFlags = ExecutionTraceMemChecker::Flags(traceFlags | ExecutionTraceMemChecker::READ);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:    if (perms & WRITE) traceFlags = ExecutionTraceMemChecker::Flags(traceFlags | ExecutionTraceMemChecker::WRITE);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:    ExecutionTraceMemChecker::Serialized *traceEntry =
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:            ExecutionTraceMemChecker::serialize(&traceEntrySize, start, size,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:                                                ExecutionTraceMemChecker::GRANT,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:bool MemoryChecker::revokeMemory(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:    ExecutionTraceMemChecker::Serialized *traceEntry =
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:            ExecutionTraceMemChecker::serialize(&traceEntrySize, start, size,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:                                                ExecutionTraceMemChecker::REVOKE,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:bool MemoryChecker::revokeMemory(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:bool MemoryChecker::revokeMemoryByPointerForModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:bool MemoryChecker::revokeMemoryByPointer(S2EExecutionState *state, uint64_t pointer,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:void MemoryChecker::grantResourceForModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:void MemoryChecker::grantResource(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:    ExecutionTraceMemChecker::Flags traceFlags =
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:            ExecutionTraceMemChecker::Flags(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:            ExecutionTraceMemChecker::GRANT |
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:            ExecutionTraceMemChecker::RESOURCE);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:    ExecutionTraceMemChecker::Serialized *traceEntry =
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:            ExecutionTraceMemChecker::serialize(&traceEntrySize, handle, 0,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:void MemoryChecker::revokeResource(S2EExecutionState *state,  uint64_t handle)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:bool MemoryChecker::checkMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:bool MemoryChecker::findMemoryRegion(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:bool MemoryChecker::checkResourceLeaks(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:bool MemoryChecker::checkMemoryLeaks(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.cpp:std::string MemoryChecker::getPrettyCodeLocation(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:struct ModuleExecutionCfg
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    bool operator()(const ModuleExecutionCfg &d1,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        const ModuleExecutionCfg &d2) const {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    bool operator()(const ModuleExecutionCfg &d1,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        const ModuleExecutionCfg &d2) const {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:struct ModuleExecutionDesc {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    bool operator()(const ModuleExecutionDesc &d1,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        const ModuleExecutionDesc &d2) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    bool operator==(const ModuleExecutionDesc &d1) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:typedef std::set<ModuleExecutionCfg, ModuleExecCfgById> ConfiguredModulesById;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:typedef std::set<ModuleExecutionCfg, ModuleExecCfgByName> ConfiguredModulesByName;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:class ModuleExecutionDetector:public Plugin
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        void, S2EExecutionState *,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:            S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:            S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:       S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    bool opAddModuleConfigEntry(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:            S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    void onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    void onExecution(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    ModuleExecutionDetector(S2E* s2e): Plugin(s2e) {}
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    virtual ~ModuleExecutionDetector();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    //bool toExecutionDesc(ModuleExecutionDesc *desc, const ModuleDescriptor *md);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    const ModuleDescriptor *getModule(S2EExecutionState *state, uint64_t pc, bool tracked=true);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    const ModuleDescriptor *getCurrentDescriptor(S2EExecutionState* state) const;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    void dumpMemory(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:      S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    friend class ModuleExecutionDetector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptInjector.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptInjector.cpp:void InterruptInjector::onLibraryCall(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onException(s2e::S2EExecutionState*, unsigned int, uint64_t);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onTranslateBlockEnd(ExecutionSignal, S2EExecutionState, TranslationBlock, uint64_t, bool, uint64_t);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onSysexit(S2EExecutionState* , uint64_t);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onSysenter(S2EExecutionState* , uint64_t);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onSyscall(S2EExecutionState*, uint64_t, LinuxSyscallMonitor::SyscallType, uint32_t, LinuxSyscallMonitor::SyscallReturnSignal& );
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onFirstInstruction( ExecutionSignal* signal, S2EExecutionState* state, TranslationBlock* tb, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    static PluginState *factory(Plugin*, S2EExecutionState*) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:class S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:typedef sigc::signal<void, S2EExecutionState*, uint64_t /* pc */> ExecutionSignal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:            S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:            S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:            S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 S2EExecutionState* /* current state */,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:            S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, S2EExecutionState*, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, S2EExecutionState*, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, S2EExecutionState* /* originalState */,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 const std::vector<S2EExecutionState*>& /* newStates */,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 S2EExecutionState*, /* currentState */
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 S2EExecutionState*> /* nextState */
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 S2EExecutionState*, /* currentState */
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, S2EExecutionState*> onStateKill;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, S2EExecutionState*, uint64_t, bool> onTlbMiss;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, S2EExecutionState*, uint64_t, bool> onPageFault;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 S2EExecutionState* /* current state */,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 S2EExecutionState* /* current state */,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 S2EExecutionState* /* current state */>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.h:    void onTranslateInstruction(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.h:                                                    S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.h:    void onInstructionExecution(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Opcodes.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.h:    void slotTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.h:    void slotExecuteBlockStart(S2EExecutionState* state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.h:    bool m_traceBlockExecution;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    void onCustomInstruction(S2EExecutionState* state, uint64_t opcode);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    void loadModule(S2EExecutionState *state, const Cfg &c, bool delay);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    void opLoadConfiguredModule(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    void opCreateImportDescriptor(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    void opLoadModule(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    void onTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:                                     S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    virtual bool getImports(S2EExecutionState *s, const ModuleDescriptor &desc, Imports &I);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    virtual bool getExports(S2EExecutionState *s, const ModuleDescriptor &desc, Exports &E);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    virtual uint64_t getPid(S2EExecutionState *s, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    virtual bool getCurrentStack(S2EExecutionState *state, uint64_t *base, uint64_t *size) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptInjector.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptInjector.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptInjector.h:    void onLibraryCall(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:#include "ModuleExecutionDetector.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:                  "ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:    m_executionDetector = (ModuleExecutionDetector*)s2e()->getPlugin("ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:void CodeSelector::opSelectProcess(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:void CodeSelector::opUnselectProcess(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:bool CodeSelector::opSelectModule(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:    m_executionDetector = (ModuleExecutionDetector*)s2e()->getPlugin("ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:bool CodeSelector::instrumentationNeeded(const ModuleExecutionDesc &desc,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:void CodeSelector::onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        const ModuleExecutionDesc* desc,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:    S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        const ModuleExecutionDesc*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:void CodeSelector::symbexSignal(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:            s2e()->getExecutor()->disableSymbolicExecution(state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:            s2e()->getExecutor()->enableSymbolicExecution(state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        const ModuleExecutionDesc *prevModule,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        const ModuleExecutionDesc *currentModule
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        s2e()->getExecutor()->disableSymbolicExecution(state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        s2e()->getExecutor()->disableSymbolicExecution(state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:PluginState *CodeSelectorState::factory(Plugin *p, S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:const CodeSelDesc* CodeSelectorState::activateModule(CodeSelector *plugin, const ModuleExecutionDesc* mod)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:    ModuleExecutionDetector *executionDetector = (ModuleExecutionDetector*)m_s2e->getPlugin("ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:     ModuleExecutionCfg tmp;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ThreadDescriptor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        ExecutionSignal *s = (ExecutionSignal*)signal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:static void s2e_tcg_instrument_code(S2E*, ExecutionSignal* signal, uint64_t pc, uint64_t nextpc=-1)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        S2E* s2e, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        S2E* s2e, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        S2E* s2e, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        S2E* s2e, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        S2E* s2e, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:void s2e_on_page_fault(S2E *s2e, S2EExecutionState* state, uint64_t addr, int is_write)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:void s2e_on_tlb_miss(S2E *s2e, S2EExecutionState* state, uint64_t addr, int is_write)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        S2E *s2e, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:int s2e_is_port_symbolic(struct S2E *s2e, struct S2EExecutionState* state, uint64_t port)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SymbolicHardware.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SymbolicHardware.cpp:bool SymbolicHardware::setSymbolicMmioRange(S2EExecutionState *state, uint64_t physaddr, uint64_t size)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SymbolicHardware.cpp:bool SymbolicHardware::resetSymbolicMmioRange(S2EExecutionState *state, uint64_t physaddr, uint64_t size)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SymbolicHardware.cpp:PluginState *SymbolicHardwareState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:void sm_callback(S2EExecutionState *s, bool killingState);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:    typedef std::set<S2EExecutionState*> StateSet;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:    ModuleExecutionDetector *m_detector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:    bool resumeSucceededState(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:    void onCustomInstruction(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:    bool succeedState(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:    friend void sm_callback(S2EExecutionState *s, bool killingState);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:S2E_DEFINE_PLUGIN(MemoryTracer, "Memory tracer plugin", "MemoryTracer", "ExecutionTracer");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:    m_tracer = static_cast<ExecutionTracer*>(s2e()->getPlugin("ExecutionTracer"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:    m_execDetector = static_cast<ModuleExecutionDetector*>(s2e()->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:        s2e()->getWarningsStream() << "MemoryTracer: The monitorModules option requires ModuleExecutionDetector\n";
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:void MemoryTracer::traceDataMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:    ExecutionTraceMemory e;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:void MemoryTracer::onDataMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:void MemoryTracer::onModuleTransition(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:void MemoryTracer::onTlbMiss(S2EExecutionState *state, uint64_t addr, bool is_write)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:    ExecutionTraceTlbMiss e;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:void MemoryTracer::onPageFault(S2EExecutionState *state, uint64_t addr, bool is_write)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:    ExecutionTracePageFault e;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.cpp:void MemoryTracer::onCustomInstruction(S2EExecutionState* state, uint64_t opcode)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h: *  Each write is encapsulated in an ExecutionTraceItem before being
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:class ExecutionTracer : public Plugin
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:    ExecutionTracer(S2E* s2e): Plugin(s2e) {}
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:    ~ExecutionTracer();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:            const S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:    void onFork(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:                const std::vector<S2EExecutionState*>& newStates,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:class ExecutionTracerState: public PluginState
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:    ExecutionTracerState();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:    virtual ~ExecutionTracerState();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:    virtual ExecutionTracerState* clone() const;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.h:    friend class ExecutionTracer;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceItemHeader{
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceModuleLoad {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceModuleUnload {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceProcessUnload {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceCall {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceReturn {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceFork {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceBranchCoverage {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceCacheSimParams {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceCacheSimName {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    static ExecutionTraceCacheSimName *allocate(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:        unsigned size = sizeof(ExecutionTraceCacheSimName) +
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:        ExecutionTraceCacheSimName *ret = (ExecutionTraceCacheSimName*)a;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    static void deallocate(ExecutionTraceCacheSimName *o) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceCacheSimEntry {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:union ExecutionTraceCache {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    ExecutionTraceCacheSimParams params;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    ExecutionTraceCacheSimName name;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    ExecutionTraceCacheSimEntry entry;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceMemChecker
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    static void deserialize(const Serialized *in, ExecutionTraceMemChecker *out) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceTestCase {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    static ExecutionTraceTestCase *serialize(unsigned *size, const ConcreteInputs &inputs) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:        ExecutionTraceTestCase *ret = (ExecutionTraceTestCase*)a;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    static void deallocate(ExecutionTraceTestCase *o) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceMemory
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTracePageFault
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceTlbMiss
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceICount
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:struct ExecutionTraceTb
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:union ExecutionTraceAll {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    ExecutionTraceModuleLoad moduleLoad;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    ExecutionTraceModuleUnload moduleUnload;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    ExecutionTraceCall call;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TraceEntries.h:    ExecutionTraceReturn ret;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h:#include "ExecutionTracer.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h:    ExecutionTracer *m_tracer;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h:    ModuleExecutionDetector *m_execDetector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h:    void onTlbMiss(S2EExecutionState *state, uint64_t addr, bool is_write);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h:    void onPageFault(S2EExecutionState *state, uint64_t addr, bool is_write);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h:    void onCustomInstruction(S2EExecutionState* state, uint64_t opcode);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h:    void onDataMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h:    void onModuleTransition(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/MemoryTracer.h:    void traceDataMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:    ExecutionTracer *m_Tracer;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:    bool getCurrentModule(S2EExecutionState *s,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:    bool addModule(S2EExecutionState *s, const ModuleDescriptor *m,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:                   ExecutionTracer *tracer);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:    bool delModule(S2EExecutionState *s, const ModuleDescriptor *m,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:                   ExecutionTracer *tracer);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:    bool delProcess(S2EExecutionState *s, uint64_t pid,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:                    ExecutionTracer *tracer);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.h:    bool getCurrentModule(S2EExecutionState *s,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/EventTracer.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/EventTracer.cpp:    m_Tracer = (ExecutionTracer*)s2e()->getPlugin("ExecutionTracer");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/EventTracer.cpp:    m_Detector = (ModuleExecutionDetector*)s2e()->getPlugin("ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/EventTracer.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/EventTracer.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/EventTracer.h:#include "ExecutionTracer.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/EventTracer.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/EventTracer.h:    ModuleExecutionDetector *m_Detector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/EventTracer.h:    ExecutionTracer *m_Tracer;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.cpp:#include "ExecutionTracer.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.cpp:S2E_DEFINE_PLUGIN(TestCaseGenerator, "TestCaseGenerator plugin", "TestCaseGenerator", "ExecutionTracer");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.cpp:void TestCaseGenerator::onTestCaseGeneration(S2EExecutionState *state, const std::string &message)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.cpp:    ExecutionTracer *tracer = (ExecutionTracer*)s2e()->getPlugin("ExecutionTracer");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.cpp:    ExecutionTraceTestCase *tc = ExecutionTraceTestCase::serialize(&bufsize, out);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.cpp:    ExecutionTraceTestCase::deallocate(tc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.h:    void onTestCaseGeneration(S2EExecutionState *state, const std::string &message);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:#include "ExecutionTracer.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:S2E_DEFINE_PLUGIN(ExecutionTracer, "ExecutionTracer plugin", "",);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:void ExecutionTracer::initialize()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:            sigc::mem_fun(*this, &ExecutionTracer::onFork));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:        sigc::mem_fun(*this, &ExecutionTracer::onTimer)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:        sigc::mem_fun(*this, &ExecutionTracer::onProcessFork)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:ExecutionTracer::~ExecutionTracer()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:void ExecutionTracer::createNewTraceFile(bool append)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:        m_fileName = s2e()->getOutputFilename("ExecutionTracer.dat");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:        s2e()->getWarningsStream() << "Could not create ExecutionTracer.dat" << '\n';
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:void ExecutionTracer::onTimer()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:uint32_t ExecutionTracer::writeData(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:        const S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:    ExecutionTraceItemHeader item;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:void ExecutionTracer::flush()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:void ExecutionTracer::onProcessFork(bool preFork, bool isChild, unsigned parentProcId)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:void ExecutionTracer::onFork(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:            const std::vector<S2EExecutionState*>& newStates,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:    unsigned itemSize = sizeof(ExecutionTraceFork) +
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ExecutionTracer.cpp:    ExecutionTraceFork *itemFork = reinterpret_cast<ExecutionTraceFork*>(itemBytes);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:#include "ExecutionTracer.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:    ExecutionTracer *m_tracer;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:    ModuleExecutionDetector *m_detector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:    void trace(S2EExecutionState *state, uint64_t pc, ExecTraceEntryType type);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:    void onExecuteBlockStart(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:    void onExecuteBlockEnd(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:    void onCustomInstruction(S2EExecutionState* state, uint64_t opcode);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:S2E_DEFINE_PLUGIN(TranslationBlockTracer, "Tracer for executed translation blocks", "TranslationBlockTracer", "ExecutionTracer",
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:                  "ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:    m_tracer = (ExecutionTracer *)s2e()->getPlugin("ExecutionTracer");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:    m_detector = (ModuleExecutionDetector*)s2e()->getPlugin("ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:void TranslationBlockTracer::trace(S2EExecutionState *state, uint64_t pc, ExecTraceEntryType type)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:    ExecutionTraceTb tb;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:void TranslationBlockTracer::onExecuteBlockStart(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:void TranslationBlockTracer::onExecuteBlockEnd(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:void TranslationBlockTracer::onCustomInstruction(S2EExecutionState* state, uint64_t opcode)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:                  "ExecutionTracer", "Interceptor");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:    m_Tracer = (ExecutionTracer*)s2e()->getPlugin("ExecutionTracer");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:    S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:    ExecutionTraceModuleLoad te;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:    S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:    ExecutionTraceModuleUnload te;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:    S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:bool ModuleTracer::getCurrentModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:bool ModuleTracerState::addModule(S2EExecutionState *s, const ModuleDescriptor *m,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:                                  ExecutionTracer *tracer)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:    ExecutionTraceModuleLoad te;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:bool ModuleTracerState::delModule(S2EExecutionState *s, const ModuleDescriptor *m,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:                                  ExecutionTracer *tracer)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:    ExecutionTraceModuleUnload te;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:bool ModuleTracerState::delProcess(S2EExecutionState *s, uint64_t pid,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:                                   ExecutionTracer *tracer)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/ModuleTracer.cpp:bool ModuleTracerState::getCurrentModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:#include "ExecutionTracer.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:    ModuleExecutionDetector *m_executionDetector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:    ExecutionTracer *m_executionTracer;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:    void onTraceTb(S2EExecutionState* state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:    void onTraceInstruction(S2EExecutionState* state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:    InstructionCounterState(S2EExecutionState *s, Plugin *p);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:S2E_DEFINE_PLUGIN(InstructionCounter, "Instruction counter plugin", "InstructionCounter", "ExecutionTracer", "ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:    m_executionTracer = static_cast<ExecutionTracer*>(s2e()->getPlugin("ExecutionTracer"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:    m_executionDetector = static_cast<ModuleExecutionDetector*>(s2e()->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:void InstructionCounter::onTraceTb(S2EExecutionState* state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:    ExecutionTraceICount e;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:void InstructionCounter::onTraceInstruction(S2EExecutionState* state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:InstructionCounterState::InstructionCounterState(S2EExecutionState *s, Plugin *p)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:PluginState *InstructionCounterState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    static bool getIdt(S2EExecutionState *state, IDT &table);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    static bool getGdt(S2EExecutionState *state, GDT &Table);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    static bool getGdtEntry(S2EExecutionState *state, X86GDTEntry *gdtEntry, uint16_t selector);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    static bool getTss(S2EExecutionState *state, uint32_t base, X86TSS *tss);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    static bool getCurrentTss(S2EExecutionState *state, X86TSS *tss);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    void onTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    void onExecuteBlockStart(S2EExecutionState* state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    bool initializeExceptionHandlers(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    bool registerHandler(S2EExecutionState *state, EX86Exceptions idtVector);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    void handleTaskGate(S2EExecutionState *state, const Handler &hdlr);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.cpp:#include "ExecutionStatisticsCollector.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.cpp:S2E_DEFINE_PLUGIN(ExecutionStatisticsCollector, "Allows client plugins to store statistics in a central location",
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.cpp:                  "ExecutionStatisticsCollector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.cpp:void ExecutionStatisticsCollector::initialize()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.cpp:    m_detector = static_cast<ModuleExecutionDetector*>(s2e()->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.cpp:    m_traceBlockExecution = s2e()->getConfig()->getBool(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.cpp:                        getConfigKey() + ".traceBlockExecution");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.cpp:void Example::slotTranslateBlockStart(ExecutionSignal *signal, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.cpp:                                      S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.cpp:    if(m_traceBlockExecution)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.cpp:void Example::slotExecuteBlockStart(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    typedef sigc::signal<void, S2EExecutionState*> ReturnSignal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    typedef sigc::signal<void, S2EExecutionState*, FunctionMonitorState*> CallSignal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:            S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void registerReturnSignal(S2EExecutionState *state, FunctionMonitor::ReturnSignal &sig);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void eraseSp(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void disconnect(S2EExecutionState *state, const ModuleDescriptor &desc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:                                S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotCall(S2EExecutionState* state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotRet(S2EExecutionState* state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTraceCall(S2EExecutionState *state, FunctionMonitorState *fns);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTraceRet(S2EExecutionState *state, int f);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:        //S2EExecutionState *state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotCall(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotRet(S2EExecutionState *state, uint64_t pc, bool emitSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void registerReturnSignal(S2EExecutionState *s, FunctionMonitor::ReturnSignal &sig);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:                  "ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:void sm_callback(S2EExecutionState *s, bool killingState)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:bool StateManager::resumeSucceededState(S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:    m_detector = static_cast<ModuleExecutionDetector*>(s2e()->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:    const std::set<klee::ExecutionState*> &states = s2e()->getExecutor()->getStates();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:    std::set<klee::ExecutionState*>::const_iterator it = states.begin();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:        S2EExecutionState *curState = static_cast<S2EExecutionState*>(*it);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:    S2EExecutionState *one =  *m_succeeded.begin();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:bool StateManager::succeedState(S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:void StateManager::onCustomInstruction(S2EExecutionState* state, uint64_t opcode)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:    void onEdge(S2EExecutionState* state, uint64_t sourcePc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:    ModuleExecutionDetector *m_detector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:    EdgeKillerState(S2EExecutionState *s, Plugin *p);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.cpp:klee::ExecutionState& CooperativeSearcher::selectState()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.cpp:void CooperativeSearcher::update(klee::ExecutionState *current,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.cpp:                    const std::set<klee::ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.cpp:                    const std::set<klee::ExecutionState*> &removedStates)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.cpp:        S2EExecutionState *es = dynamic_cast<S2EExecutionState*>(*it);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.cpp:        S2EExecutionState *es = dynamic_cast<S2EExecutionState*>(*it);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.cpp:void CooperativeSearcher::onCustomInstruction(S2EExecutionState* state, uint64_t opcode)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:                  "MaxTbSearcher", "ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    m_moduleExecutionDetector = static_cast<ModuleExecutionDetector*>(s2e()->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    m_moduleExecutionDetector->onModuleTranslateBlockEnd.connect(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:bool MaxTbSearcher::isExplored(S2EExecutionState *s, uint64_t absTargetPc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    const ModuleDescriptor* md = m_moduleExecutionDetector->getCurrentDescriptor(s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:void MaxTbSearcher::addTb(S2EExecutionState *s, uint64_t absTargetPc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    const ModuleDescriptor* md = m_moduleExecutionDetector->getCurrentDescriptor(s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:uint64_t MaxTbSearcher::computeTargetPc(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:void MaxTbSearcher::onTraceTb(S2EExecutionState* state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    const ModuleDescriptor *curModule = m_moduleExecutionDetector->getModule(state, pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    const ModuleDescriptor *md = m_moduleExecutionDetector->getCurrentDescriptor(state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:klee::ExecutionState& MaxTbSearcher::selectState()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:        S2EExecutionState *es = dynamic_cast<S2EExecutionState*>(*it);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:        S2EExecutionState *es = dynamic_cast<S2EExecutionState*>(*m_states.begin());
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:bool MaxTbSearcher::updatePc(S2EExecutionState *es)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    const ModuleDescriptor* md = m_moduleExecutionDetector->getCurrentDescriptor(es);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:void MaxTbSearcher::update(klee::ExecutionState *current,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:                    const std::set<klee::ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:                    const std::set<klee::ExecutionState*> &removedStates)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:        S2EExecutionState *es = dynamic_cast<S2EExecutionState*>(*it);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:        S2EExecutionState *es = dynamic_cast<S2EExecutionState*>(*it);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:MaxTbSearcherState::MaxTbSearcherState(S2EExecutionState *s, Plugin *p)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:PluginState *MaxTbSearcherState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    S2EExecutionState *m_state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    MaxTbSearcherState(S2EExecutionState *s, Plugin *p);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:        bool operator()(const S2EExecutionState *s1, const S2EExecutionState *s2) const{
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:            const MaxTbSearcherState *p1 = static_cast<MaxTbSearcherState*>(p->getPluginState(const_cast<S2EExecutionState*>(s1), &MaxTbSearcherState::factory));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:            const MaxTbSearcherState *p2 = static_cast<MaxTbSearcherState*>(p->getPluginState(const_cast<S2EExecutionState*>(s2), &MaxTbSearcherState::factory));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    typedef std::set<S2EExecutionState*, MaxTbSorter> StateSet;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    virtual klee::ExecutionState& selectState();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    virtual void update(klee::ExecutionState *current,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:                        const std::set<klee::ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:                        const std::set<klee::ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    ModuleExecutionDetector *m_moduleExecutionDetector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    void addTb(S2EExecutionState *s, uint64_t absTargetPc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    bool isExplored(S2EExecutionState *s, uint64_t absTargetPc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    uint64_t computeTargetPc(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    bool updatePc(S2EExecutionState *es);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:    void onTraceTb(S2EExecutionState* state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h:        bool operator ()(const klee::ExecutionState *_s1, const klee::ExecutionState *_s2) const {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h:            const S2EExecutionState *s1 = static_cast<const S2EExecutionState*>(_s1);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h:            const S2EExecutionState *s2 = static_cast<const S2EExecutionState*>(_s2);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h:    typedef std::set<klee::ExecutionState*, SortById> States;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h:    virtual klee::ExecutionState& selectState();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h:    virtual void update(klee::ExecutionState *current,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h:                        const std::set<klee::ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.h:                        const std::set<klee::ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.cpp:klee::ExecutionState& ConcolicDFSSearcher::selectState()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.cpp:    klee::ExecutionState *state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.cpp:void ConcolicDFSSearcher::update(klee::ExecutionState *current,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.cpp:                    const std::set<klee::ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.cpp:                    const std::set<klee::ExecutionState*> &removedStates)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.cpp:        S2EExecutionState *s2estate = dynamic_cast<S2EExecutionState*>(current);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.cpp:        S2EExecutionState *es = dynamic_cast<S2EExecutionState*>(*it);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/ConcolicDFSSearcher.cpp:        S2EExecutionState *es = dynamic_cast<S2EExecutionState*>(*it);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.h:    typedef std::map<uint32_t, S2EExecutionState*> States;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.h:    virtual klee::ExecutionState& selectState();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.h:    virtual void update(klee::ExecutionState *current,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.h:                        const std::set<klee::ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.h:                        const std::set<klee::ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.h:    S2EExecutionState *m_currentState;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/CooperativeSearcher.h:    void onCustomInstruction(S2EExecutionState* state, uint64_t opcode);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:                                      S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:                                             S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotCall(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::disconnect(S2EExecutionState *state, const ModuleDescriptor &desc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::eraseSp(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::registerReturnSignal(S2EExecutionState *state, FunctionMonitor::ReturnSignal &sig)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotRet(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTraceCall(S2EExecutionState *state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTraceRet(S2EExecutionState *state, int f)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:PluginState *FunctionMonitorState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitorState::slotCall(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitorState::registerReturnSignal(S2EExecutionState *state, FunctionMonitor::ReturnSignal &sig)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitorState::slotRet(S2EExecutionState *state, uint64_t pc, bool emitSignal)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:void RawMonitor::opLoadConfiguredModule(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:void RawMonitor::opLoadModule(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:void RawMonitor::opCreateImportDescriptor(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:void RawMonitor::onCustomInstruction(S2EExecutionState* state, uint64_t opcode)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:void RawMonitor::loadModule(S2EExecutionState *state, const Cfg &c, bool skipIfDelay)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:void RawMonitor::onTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:                                                   S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:bool RawMonitor::getImports(S2EExecutionState *s, const ModuleDescriptor &desc, Imports &I)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:bool RawMonitor::getExports(S2EExecutionState *s, const ModuleDescriptor &desc, Exports &E)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:uint64_t RawMonitor::getPid(S2EExecutionState *s, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:#include "ModuleExecutionDetector.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    ModuleExecutionDetector *m_executionDetector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    void opSelectProcess(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    void opUnselectProcess(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    bool opSelectModule(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    typedef std::map<ModuleExecutionDesc, CodeSelDesc *> RunTimeModuleMap;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    ModuleExecutionDetector *m_ExecutionDetector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    const ModuleExecutionDesc* m_TbMod;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        const ModuleExecutionDesc *prevModule,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        const ModuleExecutionDesc *currentModule
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    bool instrumentationNeeded(const ModuleExecutionDesc &desc,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:            S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    void symbexSignal(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    typedef std::map<ModuleExecutionDesc, const CodeSelDesc*, ModuleExecutionDesc> ActiveModules;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    const ModuleExecutionDesc *m_ActiveModDesc;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    const CodeSelDesc* activateModule(CodeSelector *c, const ModuleExecutionDesc* mod);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:    static PluginState *factory(Plugin *p, S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:    ModuleExecutionDetector *m_moduleExecutionDetector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:    void onInstruction(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:    S2EExecutionState *m_state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:    LUAAnnotation(Annotation *plg, S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.cpp:void HostFiles::open(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.cpp:void HostFiles::read(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.cpp:void HostFiles::close(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.cpp:void HostFiles::onCustomInstruction(S2EExecutionState *state, uint64_t opcode)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.cpp:                  "Interceptor", "FunctionMonitor", "ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.cpp:    m_detector = static_cast<ModuleExecutionDetector*>(s2e()->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.cpp:void LibraryCallMonitor::onFunctionCall(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.cpp:PluginState *LibraryCallMonitorState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.h:    bool decideTracing(S2EExecutionState *state, uint64_t addr, uint64_t data) const;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.h:    void onDataMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.h:    void onInstruction(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.cpp:extern s2e::S2EExecutionState *state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.cpp:	//extern s2e::S2EExecutionState *state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.cpp:	//m_executionDetector = (ModuleExecutionDetector*)s2e()->getPlugin("ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.cpp:void SyscallTracker::onSyscall( S2EExecutionState* state, uint64_t pc, LinuxSyscallMonitor::SyscallType sysc_type, uint32_t sysc_number, LinuxSyscallMonitor::SyscallReturnSignal& returnsignal)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.cpp:void SyscallTracker::onFirstInstruction( ExecutionSignal* signal, S2EExecutionState* state, TranslationBlock* tb, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:#include "ModuleExecutionDetector.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:#include <s2e/Plugins/ExecutionTracers/ExecutionTracer.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:class S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    ModuleExecutionDetector *m_execDetector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    ExecutionTracer *m_Tracer;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:        ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    void onMemoryAccess(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    void onDataMemoryAccess(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    void onTranslateBlockStart(ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:                        S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    void onExecuteBlockStart(S2EExecutionState* state, uint64_t pc,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    void writeCacheDescriptionToLog(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    bool profileAccess(S2EExecutionState *state) const;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    bool reportAccess(S2EExecutionState *state) const;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    CacheSimState(S2EExecutionState *s, Plugin *p);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:      S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:   sigc::signal<void, S2EExecutionState*, const ModuleDescriptor &> onModuleUnload;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:   sigc::signal<void, S2EExecutionState*, uint64_t> onProcessUnload;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:   sigc::signal<void, S2EExecutionState*, const ThreadDescriptor&> onThreadCreate;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:   sigc::signal<void, S2EExecutionState*, const ThreadDescriptor&> onThreadExit;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:   virtual bool getImports(S2EExecutionState *s, const ModuleDescriptor &desc, Imports &I) = 0;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:   virtual bool getExports(S2EExecutionState *s, const ModuleDescriptor &desc, Exports &E) = 0;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:   virtual uint64_t getPid(S2EExecutionState *s, uint64_t pc) = 0;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:   virtual bool getCurrentStack(S2EExecutionState *s, uint64_t *base, uint64_t *size) = 0;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/OSMonitor.h:   bool isOnTheStack(S2EExecutionState *s, uint64_t address) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackChecker.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackChecker.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackChecker.h:    void onMemoryAccess(S2EExecutionState *state, uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:#include "ModuleExecutionDetector.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:void X86ExceptionInterceptor::onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:                                      S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:bool X86ExceptionInterceptor::initializeExceptionHandlers(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:bool X86ExceptionInterceptor::registerHandler(S2EExecutionState *state, EX86Exceptions idtVector)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:void X86ExceptionInterceptor::onExecuteBlockStart(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:void X86ExceptionInterceptor::handleTaskGate(S2EExecutionState *state, const Handler &hdlr)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:    ModuleExecutionDetector *m_exec = (ModuleExecutionDetector*)s2e()->getPlugin("ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:bool X86Parser::getIdt(S2EExecutionState *state, IDT &table)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:bool X86Parser::getGdt(S2EExecutionState *state, GDT &table)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:bool X86Parser::getGdtEntry(S2EExecutionState *state, X86GDTEntry *gdtEntry, uint16_t selector)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:bool X86Parser::getTss(S2EExecutionState *state, uint32_t base, X86TSS *tss)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:bool X86Parser::getCurrentTss(S2EExecutionState *state, X86TSS *tss)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisMemoryCheck.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisMemoryCheck.cpp:void NdisHandlers::grantPacket(S2EExecutionState *state, uint32_t pNdisPacket, uint32_t ProtocolReservedLength)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisMemoryCheck.cpp:void NdisHandlers::revokePacket(S2EExecutionState *state, uint32_t pNdisPacket)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisMemoryCheck.cpp:void NdisHandlers::grantMiniportAdapterContext(S2EExecutionState *state, uint32_t HandleParamNum)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisMemoryCheck.cpp:void NdisHandlers::revokeMiniportAdapterContext(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisMemoryCheck.cpp:void NdisHandlers::grantBindingHandle(S2EExecutionState *state, uint32_t NdisBindingHandle)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisMemoryCheck.cpp:void NdisHandlers::revokeBindingHandle(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.cpp:                  "WindowsDriverExerciser", "Interceptor", "ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.cpp:        //XXX: this should go into ModuleExecutionDetector
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.cpp:    state->enableSymbolicExecution();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.cpp:void WindowsDriverExerciser::DriverEntryPoint(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.cpp:void WindowsDriverExerciser::DriverEntryPointRet(S2EExecutionState* state, uint32_t pDriverObject, bool pushed)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.cpp:void WindowsDriverExerciser::DriverUnload(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.cpp:void WindowsDriverExerciser::DriverUnloadRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlersUtils.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlersUtils.cpp:bool NdisHandlers::makePacketSymbolic(S2EExecutionState *s, uint32_t pPacket, bool keepSymbolicData)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::NdisRegisterProtocol(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::OpenAdapterCompleteHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::OpenAdapterCompleteHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::CloseAdapterCompleteHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::CloseAdapterCompleteHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::SendCompleteHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::SendCompleteHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::TransferDataCompleteHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::TransferDataCompleteHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::ResetCompleteHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::ResetCompleteHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::RequestCompleteHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::RequestCompleteHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::ReceiveHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::ReceiveHandlerRet(S2EExecutionState* state, bool pushed)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::ReceiveCompleteHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::ReceiveCompleteHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::StatusHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::StatusHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::StatusCompleteHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::StatusCompleteHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::ReceivePacketHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::ReceivePacketHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::BindAdapterHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::BindAdapterHandlerRet(S2EExecutionState* state, uint32_t pStatus, bool pushed)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::UnbindAdapterHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::UnbindAdapterHandlerRet(S2EExecutionState* state, uint32_t pStatus)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::PnPEventHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::PnPEventHandlerRet(S2EExecutionState* state, bool pushed)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::UnloadHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::UnloadHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::CoSendCompleteHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::CoSendCompleteHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::CoStatusHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::CoStatusHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::CoReceivePacketHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::CoReceivePacketHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::CoAfRegisterNotifyHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.cpp:void NdisHandlers::CoAfRegisterNotifyHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/HalHandlers.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/HalHandlers.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/HalHandlers.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/HalHandlers.h:    typedef void (HalHandlers::*EntryPoint)(S2EExecutionState* state, FunctionMonitorState *fns);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/HalHandlers.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/HalHandlers.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/HalHandlers.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/HalHandlers.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/HalHandlers.cpp:    S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/HalHandlers.cpp:void HalHandlers::HalpValidPciSlot(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    //typedef void (NdisHandlers::*EntryPoint)(S2EExecutionState* state, FunctionMonitorState *fns);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    void NdisAllocateMemoryBase(S2EExecutionState* state, FunctionMonitorState *fns);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    void QuerySetInformationHandler(S2EExecutionState* state, FunctionMonitorState *fns, bool isQuery);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    void QuerySetInformationHandlerRet(S2EExecutionState* state, bool isQuery);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    bool makePacketSymbolic(S2EExecutionState *s, uint32_t packet, bool keepSymbolicData);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    void grantPacket(S2EExecutionState *state, uint32_t pNdisPacket, uint32_t ProtocolReservedLength);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    void revokePacket(S2EExecutionState *state, uint32_t pNdisPacket);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    void grantMiniportAdapterContext(S2EExecutionState *state, uint32_t HandleParamNum);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    void revokeMiniportAdapterContext(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    void grantBindingHandle(S2EExecutionState *state, uint32_t NdisBindingHandle);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    void revokeBindingHandle(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    virtual void detectLeaks(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:    m_detector = static_cast<ModuleExecutionDetector*>(s2e()->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:    m_statsCollector = static_cast<ExecutionStatisticsCollector*>(s2e()->getPlugin("ExecutionStatisticsCollector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:void WindowsApi::registerImports(S2EExecutionState *state, const ModuleDescriptor &module)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:        ExecutionConsistencyModel consistency;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:bool WindowsApi::NtSuccess(S2E *s2e, S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:bool WindowsApi::NtSuccess(S2E *s2e, S2EExecutionState *s, klee::ref<klee::Expr> &expr)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:bool WindowsApi::NtFailure(S2E *s2e, S2EExecutionState *s, klee::ref<klee::Expr> &expr)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:klee::ref<klee::Expr> WindowsApi::createFailure(S2EExecutionState *state, const std::string &varName)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:klee::ref<klee::Expr> WindowsApi::addDisjunctionToConstraints(S2EExecutionState *state, const std::string &varName,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:bool WindowsApi::ReadUnicodeString(S2EExecutionState *state, uint32_t address, std::string &s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:uint32_t WindowsApi::getReturnAddress(S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:bool WindowsApi::readConcreteParameter(S2EExecutionState *s, unsigned param, uint32_t *val)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:klee::ref<klee::Expr> WindowsApi::readParameter(S2EExecutionState *s, unsigned param)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:bool WindowsApi::writeParameter(S2EExecutionState *s, unsigned param, klee::ref<klee::Expr> val)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:S2EExecutionState* WindowsApi::forkSuccessFailure(S2EExecutionState *state, bool bypass,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:    S2EExecutionState *skippedState = static_cast<S2EExecutionState *>(sp.first);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:    S2EExecutionState *normalState = static_cast<S2EExecutionState *>(sp.second);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:bool WindowsApi::forkRange(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:    S2EExecutionState *curState = state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:        S2EExecutionState *ts = static_cast<S2EExecutionState *>(sp.first);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:        S2EExecutionState *fs = static_cast<S2EExecutionState *>(sp.second);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:klee::ref<klee::Expr> WindowsApi::forkStates(S2EExecutionState *state, std::vector<S2EExecutionState*> &result,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:    S2EExecutionState *curState = state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:        S2EExecutionState *ts = static_cast<S2EExecutionState *>(sp.first);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:        S2EExecutionState *fs = static_cast<S2EExecutionState *>(sp.second);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:const std::string WindowsApi::getVariableName(S2EExecutionState *state, const std::string &base)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:bool WindowsApi::grantAccessToUnicodeString(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:bool WindowsApi::revokeAccessToUnicodeString(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:#include <s2e/Plugins/ExecutionStatisticsCollector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void name(S2EExecutionState* state, FunctionMonitorState *fns); \
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void name##Ret(S2EExecutionState* state, ##__VA_ARGS__)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void name(S2EExecutionState* state, FunctionMonitorState *fns, __VA_ARGS__)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void name##Ret(S2EExecutionState* state, ##__VA_ARGS__)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void name(S2EExecutionState* state, FunctionMonitorState *fns);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    static bool NtSuccess(S2E *s2e, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    static bool NtSuccess(S2E *s2e, S2EExecutionState *s, klee::ref<klee::Expr> &eq);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    static bool NtFailure(S2E *s2e, S2EExecutionState *s, klee::ref<klee::Expr> &expr);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    static klee::ref<klee::Expr> createFailure(S2EExecutionState *state, const std::string &varName);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    klee::ref<klee::Expr> addDisjunctionToConstraints(S2EExecutionState *state, const std::string &varName,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    static bool ReadUnicodeString(S2EExecutionState *state, uint32_t address, std::string &s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    static klee::ref<klee::Expr> readParameter(S2EExecutionState *s, unsigned param);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    static bool readConcreteParameter(S2EExecutionState *s, unsigned param, uint32_t *val);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    static bool writeParameter(S2EExecutionState *s, unsigned param, klee::ref<klee::Expr> val);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    uint32_t getReturnAddress(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    typedef std::map<std::string, ExecutionConsistencyModel> ConsistencyMap;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    ModuleExecutionDetector *m_detector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    ExecutionStatisticsCollector *m_statsCollector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void onModuleUnload(S2EExecutionState* state, const ModuleDescriptor &module);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    bool forkRange(S2EExecutionState *state, const std::string &msg, std::vector<uint32_t> values);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    klee::ref<klee::Expr> forkStates(S2EExecutionState *state, std::vector<S2EExecutionState*> &result, int count,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    S2EExecutionState* forkSuccessFailure(S2EExecutionState *state, bool bypass,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void registerImports(S2EExecutionState *state, const ModuleDescriptor &module);    
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    virtual void unregisterEntryPoints(S2EExecutionState *state, const ModuleDescriptor &module) = 0;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    virtual void unregisterCaller(S2EExecutionState *state, const ModuleDescriptor &modDesc) = 0;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    const std::string getVariableName(S2EExecutionState *state, const std::string &base);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    bool grantAccessToUnicodeString(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    bool revokeAccessToUnicodeString(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void warning(S2EExecutionState *state, const std::string &msg) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void incrementFailures(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void incrementSuccesses(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void incrementEntryPoint(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    typedef void (ANNOTATIONS_PLUGIN::*Annotation)(S2EExecutionState* state, FunctionMonitorState *fns);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:        typedef void (ANNOTATIONS_PLUGIN::*Callback)(S2EExecutionState* state, FunctionMonitorState *fns);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:        typedef void (ANNOTATIONS_PLUGIN::*Callback)(S2EExecutionState* state, FunctionMonitorState *fns, T1 t1);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:                                      S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    ExecutionConsistencyModel getConsistency(S2EExecutionState *state, const std::string &fcn) const {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void registerCaller(S2EExecutionState *state, const ModuleDescriptor &modDesc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    virtual void unregisterCaller(S2EExecutionState *state, const ModuleDescriptor &modDesc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    const ModuleDescriptor *calledFromModule(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    bool registerAnnotation(S2EExecutionState *state, uint64_t address, typename T::Callback handler)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    bool registerEntryPoint(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    bool registerEntryPoint(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    bool registerEntryPoint(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void registerEntryPoints(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    virtual void unregisterEntryPoints(S2EExecutionState *state, const ModuleDescriptor &module) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:            S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void unregisterImportedVariables(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void unregisterImportedVariables(S2EExecutionState *state, const ModuleDescriptor &module) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    virtual void detectLeaks(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    void detectLeaks(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:            S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:            ExecutionConsistencyModel model,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Api.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Ntddk.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/Ndis.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:                  "FunctionMonitor", "Interceptor", "ModuleExecutionDetector", "SymbolicHardware",
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisInitializeWrapper(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisInitializeWrapperRet(S2EExecutionState* state, uint32_t pHandle)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateMemoryWithTag(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateMemoryWithTagRet(S2EExecutionState* state, uint32_t Address, uint32_t Length)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateMemory(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateMemoryBase(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    S2EExecutionState *otherState = states[0] == state ? states[1] : states[0];
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateMemoryRet(S2EExecutionState* state, uint32_t Address, uint32_t Length)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateMemoryWithTagPriority(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateMemoryWithTagPriorityRet(S2EExecutionState* state, uint32_t Length)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisFreeMemory(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMFreeSharedMemory(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMAllocateSharedMemory(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMAllocateSharedMemoryRet(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocatePacket(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocatePacketRet(S2EExecutionState* state, uint32_t pStatus, uint32_t pPacket)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisFreePacket(S2EExecutionState *state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateBufferPool(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateBufferPoolRet(S2EExecutionState* state, uint32_t pStatus, uint32_t pPoolHandle)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocatePacketPool(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocatePacketPoolRet(S2EExecutionState* state, uint32_t pStatus, uint32_t pPoolHandle,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocatePacketPoolEx(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocatePacketPoolExRet(S2EExecutionState* state, uint32_t pStatus, uint32_t pPoolHandle)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisOpenConfiguration(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMQueryAdapterInstanceName(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisQueryAdapterInstanceName(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    S2EExecutionState *successState = states[0] == state ? states[1] : states[0];
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisQueryAdapterInstanceNameRet(S2EExecutionState* state, uint64_t pUnicodeString)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisQueryPendingIOCount(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisOpenAdapter(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisOpenAdapterRet(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateBuffer(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisAllocateBufferRet(S2EExecutionState* state, uint32_t pStatus, uint32_t pBuffer)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisFreeBuffer(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisFreePacketPool(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisFreeBufferPool(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMInitializeTimer(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMInitializeTimerRet(S2EExecutionState* state, uint32_t Timer, uint32_t TimerFunction)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisTimerEntryPoint(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState*> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:        S2EExecutionState *curState = states[stateIdx++];
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:        curState->writeMemory(physAddr, privExpr, S2EExecutionState::PhysicalAddress);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisTimerEntryPointRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisSetTimer(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMRegisterAdapterShutdownHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMRegisterAdapterShutdownHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisShutdownEntryPoint(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisShutdownEntryPointRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMMapIoSpace(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMMapIoSpaceRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMAllocateMapRegisters(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMAllocateMapRegistersRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMSetAttributesEx(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMSetAttributes(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisReadConfiguration(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisReadConfigurationRet(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisCloseConfiguration(S2EExecutionState *state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisWriteErrorLogEntry(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisReadPciSlotInformation(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisWritePciSlotInformation(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMQueryAdapterResources(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMQueryAdapterResourcesRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMRegisterInterrupt(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMRegisterInterruptRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    //ExecutionConsistencyModel: LOCAL
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMRegisterIoPortRange(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMRegisterIoPortRangeRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    //ExecutionConsistencyModel: LOCAL
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisReadNetworkAddress(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisReadNetworkAddressRet(S2EExecutionState* state, uint32_t pStatus, uint32_t pNetworkAddress,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMRegisterMiniport(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMRegisterMiniportRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMStatusHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMStatusHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::CheckForHang(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::CheckForHangRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::InitializeHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::InitializeHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::DisableInterruptHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::DisableInterruptHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::EnableInterruptHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::EnableInterruptHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::HaltHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    S2EExecutionState *ts = static_cast<S2EExecutionState *>(sp.first);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    S2EExecutionState *fs = static_cast<S2EExecutionState *>(sp.second);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::HaltHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::HandleInterruptHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::HandleInterruptHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::ISRHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::ISRHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::QuerySetInformationHandler(S2EExecutionState* state, FunctionMonitorState *fns, bool isQuery)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    S2EExecutionState *ts = static_cast<S2EExecutionState *>(sp.first);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:    S2EExecutionState *fs = static_cast<S2EExecutionState *>(sp.second);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::QuerySetInformationHandlerRet(S2EExecutionState* state, bool isQuery)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::QueryInformationHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::QueryInformationHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::SetInformationHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::SetInformationHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::ReconfigureHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::ReconfigureHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::ResetHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::ResetHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::SendHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::SendHandlerRet(S2EExecutionState* state, uint32_t pPacket)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::NdisMSendCompleteHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::SendPacketsHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::SendPacketsHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::TransferDataHandler(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:void NdisHandlers::TransferDataHandlerRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NdisHandlers.cpp:PluginState *NdisHandlersState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    DECLARE_EP_STRUC(NtoskrnlHandlers, KeStallExecutionProcessor),
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:std::string NtoskrnlHandlers::readUnicodeString(S2EExecutionState *state, uint32_t pUnicodeString)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::DebugPrint(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::IoCreateSymbolicLink(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    S2EExecutionState *normalState = forkSuccessFailure(state, true, 2, getVariableName(state, __FUNCTION__));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::IoCreateSymbolicLinkRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::IoCreateDevice(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    S2EExecutionState *otherState = states[0] == state ? states[1] : states[0];
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::IoCreateDeviceRet(S2EExecutionState* state, uint32_t pDeviceObject)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::IoDeleteDevice(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::IoIsWdmVersionAvailable(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::IoIsWdmVersionAvailableRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::IoFreeMdl(S2EExecutionState *state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::GetSystemUpTime(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::KeStallExecutionProcessor(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::RtlEqualUnicodeString(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::RtlAddAccessAllowedAce(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::MmGetSystemRoutineAddress(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::RtlCreateSecurityDescriptor(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::RtlSetDaclSecurityDescriptor(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    S2EExecutionState *otherState = states[0] == state ? states[1] : states[0];
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::RtlSetDaclSecurityDescriptorRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::RtlAbsoluteToSelfRelativeSD(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    S2EExecutionState *otherState = states[0] == state ? states[1] : states[0];
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::RtlAbsoluteToSelfRelativeSDRet(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::ExAllocatePoolWithTag(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    S2EExecutionState *otherState = states[0] == state ? states[1] : states[0];
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::ExAllocatePoolWithTagRet(S2EExecutionState* state, uint32_t poolType, uint32_t size)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::ExFreePool(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::ExFreePoolWithTag(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::DispatchWrite(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    S2EExecutionState *realState = states[0] == state ? states[1] : states[0];
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    S2EExecutionState *fakeState = state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::DispatchIoctl(S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:    ExecutionConsistencyModel consistency = getConsistency(state, __FUNCTION__);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:        std::vector<S2EExecutionState *> states;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:        S2EExecutionState *realState = states[0] == state ? states[1] : states[0];
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:        S2EExecutionState *fakeState = state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::DriverDispatch(S2EExecutionState* state, FunctionMonitorState *fns, uint32_t irpMajor)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::DriverDispatchRet(S2EExecutionState* state, uint32_t irpMajor, bool isFake, uint32_t pIrp)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::IofCompleteRequest(S2EExecutionState* state, FunctionMonitorState *fns)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::grantAccessToIrp(S2EExecutionState *state, uint32_t pIrp)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.cpp:void NtoskrnlHandlers::revokeAccessToIrp(S2EExecutionState *state, uint32_t pIrp)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.h:    typedef void (WindowsDriverExerciser::*EntryPoint)(S2EExecutionState* state, FunctionMonitorState *fns);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:    DECLARE_ENTRY_POINT(KeStallExecutionProcessor);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:    static std::string readUnicodeString(S2EExecutionState *state, uint32_t pUnicodeString);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:    void grantAccessToIrp(S2EExecutionState *state, uint32_t pIrp);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:    void revokeAccessToIrp(S2EExecutionState *state, uint32_t pIrp);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:    void DispatchIoctl(S2EExecutionState* state, uint64_t pIrp, const windows::IRP &irp,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:    void DispatchWrite(S2EExecutionState* state, uint64_t pIrp, const windows::IRP &irp,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:CacheSimState::CacheSimState(S2EExecutionState *s, Plugin *p)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:PluginState *CacheSimState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:S2E_DEFINE_PLUGIN(CacheSim, "Cache simulator", "", "ExecutionTracer");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:    m_execDetector = (ModuleExecutionDetector*)s2e()->getPlugin("ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:    m_Tracer = (ExecutionTracer*)s2e()->getPlugin("ExecutionTracer");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:        s2e()->getMessagesStream() << "ModuleExecutionDetector not found, will profile the whole system" << '\n';
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:void CacheSim::writeCacheDescriptionToLog(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:        ExecutionTraceCacheSimName *n = ExecutionTraceCacheSimName::allocate((*it).second->getId(),
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:        ExecutionTraceCacheSimName::deallocate(n);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:        ExecutionTraceCacheSimParams p;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:    ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:    S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:bool CacheSim::profileAccess(S2EExecutionState *state) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:bool CacheSim::reportAccess(S2EExecutionState *state) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:void CacheSim::onMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:                ExecutionTraceCacheSimEntry e;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:void CacheSim::onDataMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:void CacheSim::onExecuteBlockStart(S2EExecutionState *state, uint64_t pc,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:void CacheSim::onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:                                     S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.h:    void open(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.h:    void close(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.h:    void read(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/HostFiles.h:    void onCustomInstruction(S2EExecutionState* state, uint64_t opcode);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.cpp:void InstructionTracker::onTranslateInstruction(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.cpp:                                                S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.cpp:      signal->connect(sigc::mem_fun(*this, &InstructionTracker::onInstructionExecution));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.cpp:void InstructionTracker::onInstructionExecution(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:#include <s2e/Plugins/ExecutionTracers/MemoryTracer.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:class ModuleExecutionDetector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    ModuleExecutionDetector *m_moduleDetector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    ExecutionTracer *m_executionTracer;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    void onException(S2EExecutionState *state, unsigned intNb, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    void onModuleTransition(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    void onDataMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    void onStateSwitch(S2EExecutionState *currentState,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:                                      S2EExecutionState *nextState);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    std::string getPrettyCodeLocation(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:            S2EExecutionState *,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:            S2EExecutionState *,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:                S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:                S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:                S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:                S2EExecutionState *state
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    void grantMemoryForModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    void grantMemoryForModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    bool revokeMemoryForModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    void grantResourceForModule(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:            S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    void grantResource(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    void revokeResource(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    void grantMemory(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    bool revokeMemory(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    bool revokeMemory(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    bool revokeMemoryByPointer(S2EExecutionState *state, uint64_t pointer,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    bool revokeMemoryByPointerForModule(S2EExecutionState *state, uint64_t pointer,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:            S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    bool checkMemoryAccess(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    bool checkResourceLeaks(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    bool checkMemoryLeaks(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    bool findMemoryRegion(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/MemoryChecker.h:    std::string getRegionTypePrefix(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.h:#include "ModuleExecutionDetector.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.h:                 S2EExecutionState*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.h:    ModuleExecutionDetector *m_detector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.h:            S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.h:    void onFunctionCall(S2EExecutionState* state, FunctionMonitorState *fns);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LibraryCallMonitor.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void handleBuiltInOps(S2EExecutionState* state, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void onCustomInstruction(S2EExecutionState* state, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void invokePlugin(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void makeSymbolic(S2EExecutionState *state, bool makeConcolic);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void isSymbolic(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void killState(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void printExpression(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void printMessage(S2EExecutionState *state, bool isWarning);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void printMemory(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void concretize(S2EExecutionState *state, bool addConstraint);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    void sleep(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.h:    virtual void handleOpcodeInvocation(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SymbolicHardware.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SymbolicHardware.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SymbolicHardware.h:    bool setSymbolicMmioRange(S2EExecutionState *state, uint64_t physaddr, uint64_t size);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SymbolicHardware.h:    bool resetSymbolicMmioRange(S2EExecutionState *state, uint64_t physaddr, uint64_t size);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SymbolicHardware.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:#ifndef S2E_PLUGINS_ExecutionStatistics_H
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:#define S2E_PLUGINS_ExecutionStatistics_H
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:struct ExecutionStatistics {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    ExecutionStatistics() {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:class ExecutionStatisticsCollectorState:public PluginState
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    ExecutionStatistics m_stats;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    ExecutionStatisticsCollectorState() {}
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    virtual ~ExecutionStatisticsCollectorState() {}
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    virtual ExecutionStatisticsCollectorState* clone() const {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:        return new ExecutionStatisticsCollectorState(*this);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:        return new ExecutionStatisticsCollectorState;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    ExecutionStatistics &getStatistics() {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:class ExecutionStatisticsCollector : public Plugin
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    ExecutionStatisticsCollector(S2E* s2e): Plugin(s2e) {}
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    ExecutionStatistics &getStatistics(S2EExecutionState *state) const {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:        DECLARE_PLUGINSTATE(ExecutionStatisticsCollectorState, state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    ExecutionStatistics &getStatistics() {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    void incrementInjections(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:        DECLARE_PLUGINSTATE(ExecutionStatisticsCollectorState, state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    void incrementLibCallFailures(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:        DECLARE_PLUGINSTATE(ExecutionStatisticsCollectorState, state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    void incrementLibCallSuccesses(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:        DECLARE_PLUGINSTATE(ExecutionStatisticsCollectorState, state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    void incrementEmptyCallStacksCount(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:        DECLARE_PLUGINSTATE(ExecutionStatisticsCollectorState, state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    void incrementEntryPointCall(S2EExecutionState *state, uint64_t ep) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:        DECLARE_PLUGINSTATE(ExecutionStatisticsCollectorState, state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    void incrementEntryPointCallForModule(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:            DECLARE_PLUGINSTATE(ExecutionStatisticsCollectorState, state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    unsigned getEntryPointCallCountForModule(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:            DECLARE_PLUGINSTATE(ExecutionStatisticsCollectorState, state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    unsigned getTotalEntryPointCallCountForModule(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    void incrementModuleLoads(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:        DECLARE_PLUGINSTATE(ExecutionStatisticsCollectorState, state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    ExecutionStatistics m_globalStats;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:    ModuleExecutionDetector *m_detector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionStatisticsCollector.h:#endif // S2E_PLUGINS_ExecutionStatistics_H
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:                  "ModuleExecutionDetector", "Interceptor");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:    m_detector = (ModuleExecutionDetector*)s2e()->getPlugin("ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:void EdgeKiller::onEdge(S2EExecutionState* state, uint64_t sourcePc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:EdgeKillerState::EdgeKillerState(S2EExecutionState *s, Plugin *p)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:PluginState *EdgeKillerState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::makeSymbolic(S2EExecutionState *state, bool makeConcolic)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::isSymbolic(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::killState(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::printExpression(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::printMemory(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::concretize(S2EExecutionState *state, bool addConstraint)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:        if (!state->readMemoryConcrete8(address + i, NULL, S2EExecutionState::VirtualAddress, addConstraint)) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::sleep(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::printMessage(S2EExecutionState *state, bool isWarning)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::invokePlugin(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::handleBuiltInOps(S2EExecutionState* state, uint64_t opcode)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:        case 1: state->enableSymbolicExecution(); break;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:        case 2: state->disableSymbolicExecution(); break;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/BaseInstructions.cpp:void BaseInstructions::onCustomInstruction(S2EExecutionState* state, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:InterruptMonitor::InterruptSignal& InterruptMonitor::getInterruptSignal(S2EExecutionState* state, int interrupt)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::slotTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:                                      S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::onTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:                                             S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::onInterruptReturn(S2EExecutionState* state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:	if (!state->readMemoryConcrete(esp, &eip, sizeof(eip), S2EExecutionState::VirtualAddress))
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::onInterrupt(S2EExecutionState* state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:PluginState *InterruptMonitorState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:void LinuxSyscallMonitor::onTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:                                          S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:void LinuxSyscallMonitor::onSysenter(S2EExecutionState* state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:	if (!state->readMemoryConcrete(ebp + 12, &eip, sizeof(eip), S2EExecutionState::VirtualAddress))
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:void LinuxSyscallMonitor::onSysexit(S2EExecutionState* state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:	if (!state->readMemoryConcrete(esp + 12, &eip, sizeof(eip), S2EExecutionState::VirtualAddress))
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:void LinuxSyscallMonitor::onInt80(S2EExecutionState* state, uint64_t pc, int int_num, InterruptMonitor::InterruptReturnSignal& signal)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:LinuxSyscallMonitor::SyscallSignal& LinuxSyscallMonitor::getAllSyscallsSignal(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:LinuxSyscallMonitor::SyscallSignal& LinuxSyscallMonitor::getSyscallSignal(S2EExecutionState* state, int syscallNr)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:void LinuxSyscallMonitor::emitSyscallSignal(S2EExecutionState* state, uint64_t pc, SyscallType syscall_type, SyscallReturnSignal& signal)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:PluginState *LinuxSyscallMonitorState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:                  "ModuleExecutionDetector", "Interceptor");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:        Stack(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:        void newFrame(S2EExecutionState *state, unsigned currentModuleId, uint64_t pc, uint64_t stackPointer) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:        void update(S2EExecutionState *state, unsigned currentModuleId, uint64_t stackPointer) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    ModuleExecutionDetector *m_detector;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    void update(S2EExecutionState *state, uint64_t pc, bool isCall);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    void onModuleUnload(S2EExecutionState* state, const ModuleDescriptor &module);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    void onModuleLoad(S2EExecutionState* state, const ModuleDescriptor &module);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    void deleteStack(S2EExecutionState *state, uint64_t stackBase);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    bool getFrameInfo(S2EExecutionState *state, uint64_t sp, bool &onTheStack, StackFrameInfo &info) const;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    bool getCallStacks(S2EExecutionState *state, CallStacks &callStacks) const;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    void dump(S2EExecutionState *state) const;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    m_detector = static_cast<ModuleExecutionDetector*>(s2e()->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    m_statsCollector = static_cast<ExecutionStatisticsCollector*>(s2e()->getPlugin("ExecutionStatisticsCollector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:        S2EExecutionState *state, const ModuleDescriptor &desc,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:        ExecutionSignal *signal, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:             ExecutionSignal *signal, S2EExecutionState* state, TranslationBlock* tb,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onStackPointerModification(S2EExecutionState *state, uint64_t pc, bool isCall)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onThreadCreate(S2EExecutionState *state, const ThreadDescriptor &thread)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onThreadExit(S2EExecutionState *state, const ThreadDescriptor &thread)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onModuleLoad(S2EExecutionState* state, const ModuleDescriptor &module)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onModuleUnload(S2EExecutionState* state, const ModuleDescriptor &module)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onModuleTransition(S2EExecutionState* state, const ModuleDescriptor *prev,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:bool StackMonitor::getFrameInfo(S2EExecutionState *state, uint64_t sp, bool &onTheStack, StackFrameInfo &info) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::dump(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:bool StackMonitor::getCallStacks(S2EExecutionState *state, CallStacks &callStacks) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:    m_detector = static_cast<ModuleExecutionDetector*>(g_s2e->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:PluginState *StackMonitorState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitorState::update(S2EExecutionState *state, uint64_t pc, bool isCall)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitorState::onModuleLoad(S2EExecutionState* state, const ModuleDescriptor &module)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitorState::onModuleUnload(S2EExecutionState* state, const ModuleDescriptor &module)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitorState::deleteStack(S2EExecutionState *state, uint64_t stackBase)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:bool StackMonitorState::getFrameInfo(S2EExecutionState *state, uint64_t sp, bool &onTheStack, StackFrameInfo &info) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitorState::dump(S2EExecutionState *state) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:bool StackMonitorState::getCallStacks(S2EExecutionState *state, CallStacks &callStacks) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackChecker.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackChecker.cpp:void StackChecker::onMemoryAccess(S2EExecutionState *state, uint64_t address,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	typedef sigc::signal< void, S2EExecutionState*, uint64_t > InterruptReturnSignal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	typedef sigc::signal< void, S2EExecutionState*, uint64_t, int, InterruptReturnSignal& > InterruptSignal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	InterruptSignal& getInterruptSignal(S2EExecutionState* state, int interrupt);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void onTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	                                             S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void onInterruptReturn(S2EExecutionState* state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void onInterrupt(S2EExecutionState*, uint64_t);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:                  "ModuleExecutionDetector", "FunctionMonitor", "Interceptor");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:    m_moduleExecutionDetector = static_cast<ModuleExecutionDetector*>(s2e()->getPlugin("ModuleExecutionDetector"));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:    m_moduleExecutionDetector->onModuleLoad.connect(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        if (!m_moduleExecutionDetector->isModuleConfigured(e.module)) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:            os << "The module " << e.module << " is not configured in ModuleExecutionDetector!" << '\n';
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        const std::string *s = m_moduleExecutionDetector->getModuleId(module);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:            m_moduleExecutionDetector->onModuleTranslateBlockStart.connect(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:            m_moduleExecutionDetector->onModuleTranslateBlockEnd.connect(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:    const ModuleDescriptor *md = m_moduleExecutionDetector->getCurrentDescriptor(state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:    e.module = *m_moduleExecutionDetector->getModuleId(*md);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:    S2ELUAExecutionState lua_s2e_state(state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:    Lunar<S2ELUAExecutionState>::push(L, &lua_s2e_state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:void Annotation::onInstruction(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:    const ModuleDescriptor *md = m_moduleExecutionDetector->getModule(state, pc, true);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:    e.module = *m_moduleExecutionDetector->getModuleId(*md);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:LUAAnnotation::LUAAnnotation(Annotation *plg, S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:PluginState *AnnotationState::factory(Plugin *p, S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsSpy.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.cpp:WindowsImage::WindowsImage(S2EExecutionState *state, uint64_t Base)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.cpp:bool WindowsImage::InitSections(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.cpp:int WindowsImage::InitExports(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.cpp:int WindowsImage::InitImports(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.cpp:const Exports& WindowsImage::GetExports(S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.cpp:const Imports& WindowsImage::GetImports(S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.cpp:const ModuleSections &WindowsImage::GetSections(S2EExecutionState *s)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsSpy.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::NotifyLoadedProcesses(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::FindModules(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::WaitForProcessInit(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:void WindowsUmInterceptor::NotifyModuleLoad(S2EExecutionState *state, ModuleDescriptor &Library)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::CatchModuleLoad(S2EExecutionState *State)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::CatchProcessTerminationXp(S2EExecutionState *State)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::CatchProcessTerminationServer2008(S2EExecutionState *State)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::CatchProcessTermination(S2EExecutionState *State)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::CatchModuleUnloadBase(S2EExecutionState *State, uint64_t pLdrEntry)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::CatchModuleUnloadXPSP3(S2EExecutionState *State)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::CatchModuleUnloadServer2008(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::CatchModuleUnload(S2EExecutionState *State)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.cpp:bool WindowsUmInterceptor::GetPids(S2EExecutionState *State, PidSet &out)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool WaitForProcessInit(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool FindModules(S2EExecutionState *State);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  void NotifyLoadedProcesses(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  void NotifyModuleLoad(S2EExecutionState *state, ModuleDescriptor &Library);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool CatchModuleUnloadBase(S2EExecutionState *State, uint64_t pLdrEntry);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool CatchModuleUnloadServer2008(S2EExecutionState *State);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool CatchModuleUnloadXPSP3(S2EExecutionState *State);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool CatchProcessTerminationXp(S2EExecutionState *State);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool CatchProcessTerminationServer2008(S2EExecutionState *State);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool CatchModuleLoad(S2EExecutionState *State);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool CatchProcessTermination(S2EExecutionState *State);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool CatchModuleUnload(S2EExecutionState *State);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.h:  bool GetPids(S2EExecutionState *State, PidSet &out);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void InitializeAddresses(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void onPageDirectoryChange(S2EExecutionState *state, uint64_t previous, uint64_t current);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotMonitorProcessSwitch(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotUmCatchModuleLoad(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotUmCatchModuleUnload(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotUmCatchProcessTermination(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotKmUpdateModuleList(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotKmModuleLoad(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotKmModuleUnload(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotKmThreadInit(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotKmThreadExit(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void notifyLoadForAllThreads(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    virtual bool getImports(S2EExecutionState *s, const ModuleDescriptor &desc, Imports &I);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    virtual bool getExports(S2EExecutionState *s, const ModuleDescriptor &desc, Exports &E);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    uint64_t getCurrentProcess(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    uint64_t getCurrentThread(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    uint64_t getFirstThread(S2EExecutionState *state, uint64_t eprocess);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    uint64_t getNextThread(S2EExecutionState *state, uint64_t thread);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    uint64_t getPeb(S2EExecutionState *state, uint64_t eprocess);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    uint64_t getTibAddress(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    bool     getTib(S2EExecutionState *state, s2e::windows::NT_TIB32 *tib);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    uint64_t getDirectoryTableBase(S2EExecutionState *state, uint64_t pProcessEntry);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    virtual uint64_t getPid(S2EExecutionState *s, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    virtual bool getCurrentStack(S2EExecutionState *s, uint64_t *base, uint64_t *size);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    bool getThreadStack(S2EExecutionState *state, uint64_t pThread, uint64_t *base, uint64_t *size);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    bool getDpcStack(S2EExecutionState *state, uint64_t *base, uint64_t *size);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    bool getThreadDescriptor(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    bool getAllProcesses(S2EExecutionState *state, std::vector<uint64_t> &pEProcess);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    bool getAllThreads(S2EExecutionState *state, uint64_t process, std::vector<uint64_t> &pEThread);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    static PluginState *factory(Plugin *p, S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:#include <s2e/Plugins/ModuleExecutionDetector.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:    S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:        S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:    ModuleExecutionDetector *exec = (ModuleExecutionDetector*)s2e()->getPlugin("ModuleExecutionDetector");
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:void BlueScreenInterceptor::dumpCriticalObjectTermination(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:void BlueScreenInterceptor::dispatchErrorCodes(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.cpp:void WindowsKmInterceptor::NotifyDriverLoad(S2EExecutionState *State, ModuleDescriptor &Desc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.cpp:void WindowsKmInterceptor::NotifyDriverUnload(S2EExecutionState *State, const ModuleDescriptor &Desc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.cpp:bool WindowsKmInterceptor::ReadModuleList(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.cpp:bool WindowsKmInterceptor::GetDriverDescriptor(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.cpp:bool WindowsKmInterceptor::CatchModuleLoad(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.cpp:bool WindowsKmInterceptor::CatchModuleUnload(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::InitializeAddresses(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:                                                   S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::onPageDirectoryChange(S2EExecutionState *state, uint64_t previous, uint64_t current)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotUmCatchModuleLoad(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotUmCatchModuleUnload(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotUmCatchProcessTermination(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotKmModuleLoad(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotKmModuleUnload(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotKmThreadInit(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotKmThreadExit(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotKmUpdateModuleList(S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:bool WindowsMonitor::getAllProcesses(S2EExecutionState *state, std::vector<uint64_t> &pEProcess)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:bool WindowsMonitor::getAllThreads(S2EExecutionState *state, uint64_t process, std::vector<uint64_t> &pEThread)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::notifyLoadForAllThreads(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:bool WindowsMonitor::getImports(S2EExecutionState *s, const ModuleDescriptor &desc, Imports &I)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:bool WindowsMonitor::getExports(S2EExecutionState *s, const ModuleDescriptor &desc, Exports &E)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:uint64_t WindowsMonitor::getPid(S2EExecutionState *s, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:uint64_t WindowsMonitor::getCurrentThread(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:uint64_t WindowsMonitor::getFirstThread(S2EExecutionState *state, uint64_t eprocess)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:uint64_t WindowsMonitor::getCurrentProcess(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:uint64_t WindowsMonitor::getTibAddress(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:bool WindowsMonitor::getTib(S2EExecutionState *state, s2e::windows::NT_TIB32 *tib)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:uint64_t WindowsMonitor::getPeb(S2EExecutionState *state, uint64_t eprocess)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:uint64_t WindowsMonitor::getDirectoryTableBase(S2EExecutionState *state, uint64_t pProcessEntry)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:bool WindowsMonitor::getDpcStack(S2EExecutionState *state, uint64_t *base, uint64_t *size)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:bool WindowsMonitor::getThreadStack(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:bool WindowsMonitor::getCurrentStack(S2EExecutionState *state, uint64_t *base, uint64_t *size)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:bool WindowsMonitor::getThreadDescriptor(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:PluginState *WindowsMonitorState::factory(Plugin *p, S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:    void generateDump(S2EExecutionState *state, const std::string &prefix);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:    void generateDumpOnBsod(S2EExecutionState *state, const std::string &prefix);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:    void dumpCriticalObjectTermination(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:    void dispatchErrorCodes(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:    void onBsod(S2EExecutionState *state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.h:    void generateDump(S2EExecutionState *state, const std::string &prefix);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.h:    void generateDumpOnBsod(S2EExecutionState *state, const std::string &prefix);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.h:    uint32_t readAndConcretizeRegister(S2EExecutionState *state, unsigned offset);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.h:    bool saveContext(S2EExecutionState *state, s2e::windows::CONTEXT32 &ctx);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.h:    void generateCrashDump(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.h:    bool initializeHeader(S2EExecutionState *state, s2e::windows::DUMP_HEADER32 *hdr,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.h:  bool GetDriverDescriptor(S2EExecutionState *state, uint64_t pDriverObject, ModuleDescriptor &Desc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.h:  void NotifyDriverLoad(S2EExecutionState *state, ModuleDescriptor &Desc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.h:  void NotifyDriverUnload(S2EExecutionState *state, const ModuleDescriptor &Desc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.h:  bool CatchModuleLoad(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.h:  bool CatchModuleUnload(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.h:  bool ReadModuleList(S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp:void WindowsCrashDumpGenerator::generateDump(S2EExecutionState *state, const std::string &prefix)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp:void WindowsCrashDumpGenerator::generateDumpOnBsod(S2EExecutionState *state, const std::string &prefix)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp:uint32_t WindowsCrashDumpGenerator::readAndConcretizeRegister(S2EExecutionState *state, unsigned offset)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp:bool WindowsCrashDumpGenerator::saveContext(S2EExecutionState *state, s2e::windows::CONTEXT32 &ctx)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp:void WindowsCrashDumpGenerator::generateCrashDump(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp:                klee::ref<klee::Expr> v = state->readMemory(physAddr+i, klee::Expr::Int8, S2EExecutionState::PhysicalAddress);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp:bool WindowsCrashDumpGenerator::initializeHeader(S2EExecutionState *state, DUMP_HEADER32 *hdr,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp:    S2EExecutionState *state = g_s2e_state;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp:        const std::set<klee::ExecutionState*> &states = g_s2e->getExecutor()->getStates();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.cpp:            S2EExecutionState *ss = static_cast<S2EExecutionState*>(*it);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.h:  int InitImports(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.h:  int InitExports(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.h:  bool InitSections(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.h:  WindowsImage(S2EExecutionState *s, uint64_t Base);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.h:  virtual const Exports& GetExports(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.h:  virtual const Imports& GetImports(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsImage.h:  virtual const ModuleSections &GetSections(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleDescriptor.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	typedef sigc::signal<void, S2EExecutionState*, uint64_t> SyscallReturnSignal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	typedef sigc::signal<void, S2EExecutionState*, uint64_t, SyscallType, uint32_t, SyscallReturnSignal& > SyscallSignal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	void onTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	                                          S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	void onSysenter(S2EExecutionState* state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	void onSysexit(S2EExecutionState* state, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	void onInt80(S2EExecutionState* state, uint64_t pc, int int_num, InterruptMonitor::InterruptReturnSignal& signal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	SyscallSignal& getSyscallSignal(S2EExecutionState* state, int syscallNr);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	SyscallSignal& getAllSyscallsSignal(S2EExecutionState* state);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	void emitSyscallSignal(S2EExecutionState* state, uint64_t pc, SyscallType syscall_type, SyscallReturnSignal& signal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutableImage.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutableImage.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutableImage.h:    virtual const Exports& GetExports(S2EExecutionState *s) = 0;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutableImage.h:    virtual const Imports& GetImports(S2EExecutionState *s) = 0;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutableImage.h:    virtual const ModuleSections &GetSections(S2EExecutionState *s) = 0;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.cpp:ExecutionConsistencyModel ConsistencyModels::fromString(const std::string &model)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.cpp:    ExecutionConsistencyModel ret = NONE;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.cpp:PluginState *ConsistencyModelsState::factory(Plugin *p, S2EExecutionState *s) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:#include "ModuleExecutionDetector.h"
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:S2E_DEFINE_PLUGIN(ModuleExecutionDetector,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:                  "ModuleExecutionDetector",
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:ModuleExecutionDetector::~ModuleExecutionDetector()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::initialize()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        sigc::mem_fun(*this, &ModuleExecutionDetector::moduleLoadListener));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        sigc::mem_fun(*this, &ModuleExecutionDetector::moduleUnloadListener));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        sigc::mem_fun(*this, &ModuleExecutionDetector::processUnloadListener));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        sigc::mem_fun(*this, &ModuleExecutionDetector::onTranslateBlockStart));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:            sigc::mem_fun(*this, &ModuleExecutionDetector::onTranslateBlockEnd));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        sigc::mem_fun(*this, &ModuleExecutionDetector::exceptionListener));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        sigc::mem_fun(*this, &ModuleExecutionDetector::onCustomInstruction));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::initializeConfiguration()
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        s2e()->getWarningsStream() <<  "ModuleExecutionDetector: no configuration keys!" << '\n';
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        ModuleExecutionCfg d;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        s2e()->getDebugStream() << "ModuleExecutionDetector: " <<
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:            s2e()->getWarningsStream() << "ModuleExecutionDetector: " <<
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:            s2e()->getWarningsStream() << "ModuleExecutionDetector: " <<
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:bool ModuleExecutionDetector::opAddModuleConfigEntry(S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:            << "ModuleExecutionDetector: Could not read parameters.\n";
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:            << "ModuleExecutionDetector: Could not read the module id string.\n";
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:            << "ModuleExecutionDetector: Could not read the module name string.\n";
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    ModuleExecutionCfg desc;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    s2e()->getMessagesStream() << "ModuleExecutionDetector: Adding module " <<
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        s2e()->getWarningsStream() << "ModuleExecutionDetector: " <<
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        s2e()->getWarningsStream() << "ModuleExecutionDetector: " <<
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::onCustomInstruction(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::moduleLoadListener(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    s2e()->getDebugStream() << "ModuleExecutionDetector: " <<
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    ModuleExecutionCfg cfg;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::moduleUnloadListener(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    S2EExecutionState* state, const ModuleDescriptor &module)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::processUnloadListener(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    S2EExecutionState* state, uint64_t pid)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:bool ModuleExecutionDetector::isModuleConfigured(const std::string &moduleId) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    ModuleExecutionCfg cfg;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:const ModuleDescriptor *ModuleExecutionDetector::getModule(S2EExecutionState *state, uint64_t pc, bool tracked)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:const std::string *ModuleExecutionDetector::getModuleId(const ModuleDescriptor &desc) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    ModuleExecutionCfg cfg;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::onTranslateBlockStart(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:            &ModuleExecutionDetector::onExecution));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::onTranslateBlockEnd(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:                &ModuleExecutionDetector::onExecution));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:                &ModuleExecutionDetector::onExecution));
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::exceptionListener(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:                       S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    //onExecution(state, pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:const ModuleDescriptor *ModuleExecutionDetector::getCurrentDescriptor(S2EExecutionState* state) const
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::onExecution(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    S2EExecutionState *state, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:void ModuleExecutionDetector::dumpMemory(S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:PluginState* ModuleTransitionState::factory(Plugin *p, S2EExecutionState *state)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:enum ExecutionConsistencyModel {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    ExecutionConsistencyModel m_defaultModel;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    std::stack<ExecutionConsistencyModel> m_models;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    ConsistencyModelsState(ExecutionConsistencyModel model) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    static PluginState *factory(Plugin *p, S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    ExecutionConsistencyModel get() const {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    void push(ExecutionConsistencyModel model) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    ExecutionConsistencyModel pop() {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:        ExecutionConsistencyModel model = m_models.top();
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    static ExecutionConsistencyModel fromString(const std::string &model);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    ExecutionConsistencyModel getDefaultModel() const {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    void push(S2EExecutionState *state, ExecutionConsistencyModel model) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    ExecutionConsistencyModel pop(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    ExecutionConsistencyModel get(S2EExecutionState *state) {
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ConsistencyModels.h:    ExecutionConsistencyModel m_defaultModel;
/usr/local/src/s2e/./s2e/qemu/s2e/S2EStatsTracker.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/S2EStatsTracker.cpp:#include <s2e/S2EExecutionState.h>
/usr/local/src/s2e/./s2e/qemu/s2e/S2EStatsTracker.cpp:void S2EStateStats::updateStats(S2EExecutionState* state)
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.h:class S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.h:class S2ELUAExecutionState
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.h:    S2EExecutionState *m_state;
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.h:  static Lunar<S2ELUAExecutionState>::RegType methods[];
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.h:  S2ELUAExecutionState(lua_State *L);
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.h:  S2ELUAExecutionState(S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.h:  ~S2ELUAExecutionState();
/usr/local/src/s2e/./s2e/qemu/s2e/ConfigFile.h:    //void invokeAnnotation(const std::string &annotation, S2EExecutionState *param);
/usr/local/src/s2e/./s2e/qemu/s2e/ExprInterface.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/Synchronization.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:    struct S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:using s2e::S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:struct S2EExecutionState;
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:extern struct S2EExecutionState* g_s2e_state;
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState *state, 
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2E *s2e, struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_on_page_fault(struct S2E *s2e, struct S2EExecutionState* state, uint64_t addr, int is_write);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_on_tlb_miss(struct S2E *s2e, struct S2EExecutionState* state, uint64_t addr, int is_write);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:struct S2EExecutionState* s2e_create_initial_state(struct S2E *s2e);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:                              struct S2EExecutionState *initial_state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:                      struct S2EExecutionState *initial_state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:                      struct S2EExecutionState *initial_state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:                          struct S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:                          struct S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState* state, struct CPUX86State* cpuState,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState* state, struct CPUX86State* cpuState,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_do_interrupt(struct S2E* s2e, struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:        struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_qemu_finalize_tb_exec(struct S2E *s2e, struct S2EExecutionState* state);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_init_device_state(struct S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_qemu_put_byte(struct S2EExecutionState *s, int v);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:int s2e_qemu_get_byte(struct S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:int s2e_qemu_peek_byte(struct S2EExecutionState *s);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:int s2e_qemu_get_buffer(struct S2EExecutionState *s, uint8_t *buf, int size1);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:int s2e_qemu_peek_buffer(struct S2EExecutionState *s, uint8_t *buf, int size1);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_qemu_put_buffer(struct S2EExecutionState *s, const uint8_t *buf, int size);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:int s2e_is_zombie(struct S2EExecutionState* state);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:int s2e_is_speculative(struct S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:int s2e_is_runnable(struct S2EExecutionState* state);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_switch_to_symbolic(struct S2E *s2e, struct S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_ensure_symbolic(struct S2E *s2e, struct S2EExecutionState *state);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:int s2e_is_port_symbolic(struct S2E *s2e, struct S2EExecutionState* state, uint64_t port);
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_update_tlb_entry(struct S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/s2e_qemu.h:void s2e_register_dirty_mask(struct S2E *s2e, struct S2EExecutionState *initial_state,
/usr/local/src/s2e/./s2e/qemu/s2e/SelectRemovalPass.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/cpu-defs.h: * The file was modified for S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/def-helper.h: * The file was modified for S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/target-i386/helper.h: * The file was modified for S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/tcg/tcg.h: * The file was modified for S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.h:    class ExecutionEngine;
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.h:    llvm::ExecutionEngine* getExecutionEngine();
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.h:    void deleteExecutionEngine();
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.cpp:#include <llvm/ExecutionEngine/ExecutionEngine.h>
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.cpp:#include <llvm/ExecutionEngine/JITMemoryManager.h>
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.cpp:#include <llvm/ExecutionEngine/JIT.h>
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.cpp:    ExecutionEngine *m_executionEngine;
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.cpp:    void deleteExecutionEngine() {
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.cpp:    m_executionEngine = ExecutionEngine::createJIT(
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.cpp:void TCGLLVMContext::deleteExecutionEngine()
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.cpp:    m_private->deleteExecutionEngine();
/usr/local/src/s2e/./s2e/qemu/tcg/tcg-llvm.cpp:ExecutionEngine* TCGLLVMContext::getExecutionEngine()
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:ExecutionState &DFSSearcher::selectState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:void DFSSearcher::update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                         const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                         const std::set<ExecutionState*> &removedStates) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:  for (std::set<ExecutionState*>::const_iterator it = removedStates.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    ExecutionState *es = *it;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      for (std::vector<ExecutionState*>::iterator it = states.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:ExecutionState &RandomSearcher::selectState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:void RandomSearcher::update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                            const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                            const std::set<ExecutionState*> &removedStates) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:  for (std::set<ExecutionState*>::const_iterator it = removedStates.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    ExecutionState *es = *it;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    for (std::vector<ExecutionState*>::iterator it = states.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    states(new DiscretePDF<ExecutionState*>()),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:ExecutionState &WeightedRandomSearcher::selectState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:double WeightedRandomSearcher::getWeight(ExecutionState *es) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:void WeightedRandomSearcher::update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                                    const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                                    const std::set<ExecutionState*> &removedStates) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:  for (std::set<ExecutionState*>::const_iterator it = addedStates.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    ExecutionState *es = *it;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:  for (std::set<ExecutionState*>::const_iterator it = removedStates.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:ExecutionState &RandomPathSearcher::selectState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:ExecutionState &RandomPathSearcher::selectState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:void RandomPathSearcher::update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                                const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                                const std::set<ExecutionState*> &removedStates) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:Instruction *BumpMergingSearcher::getMergePoint(ExecutionState &es) {  
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:ExecutionState &BumpMergingSearcher::selectState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    std::map<llvm::Instruction*, ExecutionState*>::iterator it = 
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    ExecutionState *es = it->second;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:  ExecutionState &es = baseSearcher->selectState();
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    std::map<llvm::Instruction*, ExecutionState*>::iterator it = 
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      ExecutionState *mergeWith = it->second;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:void BumpMergingSearcher::update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                                 const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                                 const std::set<ExecutionState*> &removedStates) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:uint64_t MergingSearcher::getMergePoint(ExecutionState &es) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:void MergingSearcher::queueStateForMerge(ExecutionState &es, uint64_t mergePoint) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:ExecutionState &MergingSearcher::selectState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    ExecutionState &es = baseSearcher->selectState();
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:  std::map<uint64_t, std::vector<ExecutionState*> > merges;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:  for (std::map<ExecutionState*, uint64_t>::const_iterator it = statesAtMerge.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:  for (std::map<uint64_t, std::vector<ExecutionState*> >::iterator
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      for (std::vector<ExecutionState*>::iterator it2 = it->second.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:        ExecutionState *state = *it2;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    std::set<ExecutionState*> toMerge(it->second.begin(), it->second.end());
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      ExecutionState *base = *toMerge.begin();
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      std::set<ExecutionState*> toErase;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      for (std::set<ExecutionState*>::iterator it = toMerge.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:        ExecutionState *mergeWith = *it;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:        for (std::set<ExecutionState*>::iterator it = toErase.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      for (std::set<ExecutionState*>::iterator it = toErase.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:        std::set<ExecutionState*>::iterator it2 = toMerge.find(*it);
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:void MergingSearcher::update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                             const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                             const std::set<ExecutionState*> &removedStates) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    std::set<ExecutionState *> alt = removedStates;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    for (std::set<ExecutionState*>::const_iterator it = removedStates.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      ExecutionState *es = *it;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      std::map<ExecutionState*, uint64_t>::iterator itm = statesAtMerge.find(es);
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:ExecutionState &BatchingSearcher::selectState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    ExecutionState* newState = &baseSearcher->selectState();
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:void BatchingSearcher::update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                              const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                              const std::set<ExecutionState*> &removedStates) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:ExecutionState &IterativeDeepeningTimeSearcher::selectState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:  ExecutionState &res = baseSearcher->selectState();
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:void IterativeDeepeningTimeSearcher::update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                                            const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                                            const std::set<ExecutionState*> &removedStates) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    std::set<ExecutionState *> alt = removedStates;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    for (std::set<ExecutionState*>::const_iterator it = removedStates.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      ExecutionState *es = *it;
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:      std::set<ExecutionState*>::const_iterator itp = pausedStates.find(es);
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:    baseSearcher->update(0, pausedStates, std::set<ExecutionState*>());
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:ExecutionState &InterleavedSearcher::selectState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:void InterleavedSearcher::update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                                 const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/lib/Core/Searcher.cpp:                                 const std::set<ExecutionState*> &removedStates) {
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutorTimers.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutorTimers.cpp:    executor->setHaltExecution(true);
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutorTimers.cpp:void Executor::processTimers(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutorTimers.cpp:        for (std::set<ExecutionState*>::const_iterator it = states.begin(), 
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutorTimers.cpp:          ExecutionState *es = *it;
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutorTimers.cpp:          ExecutionState::stack_ty::iterator next = es->stack.begin();
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutorTimers.cpp:          for (ExecutionState::stack_ty::iterator sfIt = es->stack.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:void StatsTracker::stepInstruction(ExecutionState &es) {
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:void StatsTracker::framePushed(ExecutionState &es, StackFrame *parentFrame) {
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:void StatsTracker::framePopped(ExecutionState &es) {
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:void StatsTracker::markBranchVisited(ExecutionState *visitedTrue, 
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:                                     ExecutionState *visitedFalse) {
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:  for (std::set<ExecutionState*>::iterator it = executor.states.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:    ExecutionState &state = **it;
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:  for (std::set<ExecutionState*>::iterator it = executor.states.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:    ExecutionState *es = *it;
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:    for (ExecutionState::stack_ty::iterator sfIt = es->stack.begin(),
/usr/local/src/s2e/./s2e/klee/lib/Core/StatsTracker.cpp:      ExecutionState::stack_ty::iterator next = sfIt + 1;
/usr/local/src/s2e/./s2e/klee/lib/Core/ExternalDispatcher.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/ExternalDispatcher.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/ExternalDispatcher.cpp:ExternalDispatcher::ExternalDispatcher(ExecutionEngine* engine) {
/usr/local/src/s2e/./s2e/klee/lib/Core/ExternalDispatcher.cpp:    executionEngine = ExecutionEngine::createJIT(MP, &error);
/usr/local/src/s2e/./s2e/klee/lib/Core/ExternalDispatcher.cpp:    executionEngine = ExecutionEngine::createJIT(dispatchModule, &error);
/usr/local/src/s2e/./s2e/klee/lib/Core/ExternalDispatcher.cpp:  // from ExecutionEngine::create
/usr/local/src/s2e/./s2e/klee/lib/Core/PTree.cpp:                     ExecutionState *_data) 
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.h:  class ExecutionState;
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.h:    typedef void (SpecialFunctionHandler::*Handler)(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.h:                                    ExecutionState *state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.h:    bool handle(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.h:    std::string readStringAtAddress(ExecutionState &state, ref<Expr> address);
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.h:#define HANDLER(name) void name(ExecutionState &state, \
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:                   InterpreterHandler *ih, ExecutionEngine *engine)
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    haltExecution(false),
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:ref<Expr> Executor::simplifyExpr(const ExecutionState &s, ref<Expr> e)
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::initializeGlobalObject(ExecutionState &state, ObjectState *os,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:MemoryObject * Executor::addExternalObject(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::initializeGlobals(ExecutionState &state) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::branch(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:                      std::vector<ExecutionState*> &result) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    ExecutionState *es = result[theRNG.getInt32() % i];
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    ExecutionState *ns = es->branch();
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  std::map< ExecutionState*, std::vector<SeedInfo> >::iterator it = 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:Executor::concolicFork(ExecutionState &current, ref<Expr> condition, bool isInternal) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    ExecutionState *trueState, *falseState, *branchedState;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:bool Executor::resolveSpeculativeState(ExecutionState &state)
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:Executor::fork(ExecutionState &current, ref<Expr> condition, bool isInternal) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  std::map< ExecutionState*, std::vector<SeedInfo> >::iterator it = 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    ExecutionState *falseState, *trueState = &current;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:bool Executor::merge(ExecutionState &base, ExecutionState &other)
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::addConstraint(ExecutionState &state, ref<Expr> condition) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  std::map< ExecutionState*, std::vector<SeedInfo> >::iterator it = 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:                           ExecutionState &state) const {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::bindLocal(KInstruction *target, ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:                            ExecutionState &state, ref<Expr> value) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:ref<Expr> Executor::toUnique(const ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:Executor::toConstant(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:Executor::toConstantSilent(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::executeGetValue(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  std::map< ExecutionState*, std::vector<SeedInfo> >::iterator it = 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    std::vector<ExecutionState*> branches;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    std::vector<ExecutionState*>::iterator bit = branches.begin();
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:      ExecutionState *es = *bit;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::stepInstruction(ExecutionState &state) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    haltExecution = true;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::executeCall(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:      // ExecutionState::varargs
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:                                    ExecutionState &state) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::printFileLine(ExecutionState &state, KInstruction *ki) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:Function* Executor::getCalledFunction(CallSite &cs, ExecutionState &state) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::executeInstruction(ExecutionState &state, KInstruction *ki) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:      std::vector<ExecutionState*> branches;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:      std::vector<ExecutionState*>::iterator bit = branches.begin();
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:        ExecutionState *es = *bit;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:      ExecutionState *free = &state;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::updateStates(ExecutionState *current) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  for (std::set<ExecutionState*>::iterator
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    ExecutionState *es = *it;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    std::set<ExecutionState*>::iterator it2 = states.find(es);
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    std::map<ExecutionState*, std::vector<SeedInfo> >::iterator it3 = 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::run(ExecutionState &initialState) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    ExecutionState *lastState = 0;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:      if (haltExecution) goto dump;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:      std::map<ExecutionState*, std::vector<SeedInfo> >::iterator it = 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:      ExecutionState &state = *lastState;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:        for (std::map<ExecutionState*, std::vector<SeedInfo> >::iterator
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    for (std::set<ExecutionState*>::iterator
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  searcher->update(0, states, std::set<ExecutionState*>());
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  while (!states.empty() && !haltExecution) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    ExecutionState &state = searcher->selectState();
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:            std::vector<ExecutionState*> arr(states.begin(), states.end());
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    for (std::set<ExecutionState*>::iterator
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:      ExecutionState &state = **it;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:std::string Executor::getAddressInfo(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::deleteState(ExecutionState *state)
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::terminateState(ExecutionState &state) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  std::set<ExecutionState*>::iterator it = addedStates.find(&state);
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    std::map< ExecutionState*, std::vector<SeedInfo> >::iterator it3 = 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::terminateStateEarly(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::terminateStateOnExit(ExecutionState &state) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::terminateStateOnError(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    for (ExecutionState::stack_ty::reverse_iterator
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::callExternalFunction(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:ref<Expr> Executor::replaceReadWithSymbolic(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:ObjectState *Executor::bindObjectInState(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::executeAlloc(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::executeFree(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::resolveExact(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  ExecutionState *unbound = &state;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::executeMemoryOperation(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  ExecutionState *unbound = &state;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    ExecutionState *bound = branches.first;
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::executeMakeSymbolic(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:    std::map< ExecutionState*, std::vector<SeedInfo> >::iterator it = 
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  ExecutionState *state = new ExecutionState(kmodule->functionMap[f]);
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:unsigned Executor::getPathStreamID(const ExecutionState &state) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:unsigned Executor::getSymbolicPathStreamID(const ExecutionState &state) {
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::getConstraintLog(const ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:bool Executor::getSymbolicSolution(const ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:  ExecutionState tmp(state);
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::getCoveredLines(const ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::doImpliedValueConcretization(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:void Executor::copyOutConcretes(ExecutionState &state)
/usr/local/src/s2e/./s2e/klee/lib/Core/Executor.cpp:bool Executor::copyInConcretes(ExecutionState &state)
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.cpp:bool TimingSolver::evaluate(const ExecutionState& state, ref<Expr> expr,
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.cpp:bool TimingSolver::mustBeTrue(const ExecutionState& state, ref<Expr> expr, 
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.cpp:bool TimingSolver::mustBeFalse(const ExecutionState& state, ref<Expr> expr,
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.cpp:bool TimingSolver::mayBeTrue(const ExecutionState& state, ref<Expr> expr, 
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.cpp:bool TimingSolver::mayBeFalse(const ExecutionState& state, ref<Expr> expr, 
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.cpp:bool TimingSolver::getValue(const ExecutionState& state, ref<Expr> expr, 
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.cpp:TimingSolver::getInitialValues(const ExecutionState& state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.cpp:TimingSolver::getRange(const ExecutionState& state, ref<Expr> expr) {
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:bool SpecialFunctionHandler::handle(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:SpecialFunctionHandler::readStringAtAddress(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleAbort(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleExit(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleSilentExit(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleAliasFunction(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleAssert(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleAssertFail(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleReportError(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleMerge(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleNew(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleDelete(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleNewArray(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleDeleteArray(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleMalloc(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleAssume(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleIsSymbolic(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handlePreferCex(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handlePrintExpr(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleSetForking(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleWarning(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleWarningOnce(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handlePrintRange(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleGetObjSize(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleGetErrno(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleCalloc(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleRealloc(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleFree(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleCheckMemoryAccess(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleGetValue(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleDefineFixedObject(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleMakeSymbolic(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:    ExecutionState *s = it->second;
/usr/local/src/s2e/./s2e/klee/lib/Core/SpecialFunctionHandler.cpp:void SpecialFunctionHandler::handleMarkGlobal(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/MemoryManager.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/AddressSpace.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/AddressSpace.cpp:bool AddressSpace::resolveOne(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/AddressSpace.cpp:bool AddressSpace::resolve(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/AddressSpace.h:  class ExecutionState;
/usr/local/src/s2e/./s2e/klee/lib/Core/AddressSpace.h:    /// ExecutionState that owns this AddressSpace
/usr/local/src/s2e/./s2e/klee/lib/Core/AddressSpace.h:    ExecutionState *state;
/usr/local/src/s2e/./s2e/klee/lib/Core/AddressSpace.h:    AddressSpace(ExecutionState* _state) : cowKey(1), state(_state) {}
/usr/local/src/s2e/./s2e/klee/lib/Core/AddressSpace.h:    bool resolveOne(ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/AddressSpace.h:    bool resolve(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp://===-- ExecutionState.cpp ------------------------------------------------===//
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:ExecutionState::ExecutionState(KFunction *kf) 
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:ExecutionState::ExecutionState(const std::vector<ref<Expr> > &assumptions) 
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:ExecutionState::~ExecutionState() {
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:ExecutionState* ExecutionState::clone() {
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:  ExecutionState* state = new ExecutionState(*this);
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:void ExecutionState::addressSpaceChange(const MemoryObject*,
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:ExecutionState *ExecutionState::branch() {
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:  ExecutionState *falseState = clone();
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:void ExecutionState::pushFrame(KInstIterator caller, KFunction *kf) {
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:void ExecutionState::popFrame() {
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:std::string ExecutionState::getFnAlias(std::string fn) {
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:void ExecutionState::addFnAlias(std::string old_fn, std::string new_fn) {
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:void ExecutionState::removeFnAlias(std::string fn) {
/usr/local/src/s2e/./s2e/klee/lib/Core/ExecutionState.cpp:bool ExecutionState::merge(const ExecutionState &b) {
/usr/local/src/s2e/./s2e/klee/lib/Core/SeedInfo.h:  class ExecutionState;
/usr/local/src/s2e/./s2e/klee/lib/Core/SeedInfo.h:    void patchSeed(const ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.h:  class ExecutionState;
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.h:    bool evaluate(const ExecutionState&, ref<Expr>, Solver::Validity &result);
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.h:    bool mustBeTrue(const ExecutionState&, ref<Expr>, bool &result);
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.h:    bool mustBeFalse(const ExecutionState&, ref<Expr>, bool &result);
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.h:    bool mayBeTrue(const ExecutionState&, ref<Expr>, bool &result);
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.h:    bool mayBeFalse(const ExecutionState&, ref<Expr>, bool &result);
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.h:    bool getValue(const ExecutionState &, ref<Expr> expr, 
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.h:    bool getInitialValues(const ExecutionState&, 
/usr/local/src/s2e/./s2e/klee/lib/Core/TimingSolver.h:    getRange(const ExecutionState&, ref<Expr> query);
/usr/local/src/s2e/./s2e/klee/lib/Core/SeedInfo.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/lib/Core/SeedInfo.cpp:void SeedInfo::patchSeed(const ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/lib/Core/SeedInfo.cpp:  ExecutionState tmp(required);
/usr/local/src/s2e/./s2e/klee/lib/Expr/BitfieldSimplifier.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/klee/lib/Expr/BitfieldSimplifier.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/klee/include/klee/ExecutionState.h://===-- ExecutionState.h ----------------------------------------*- C++ -*-===//
/usr/local/src/s2e/./s2e/klee/include/klee/ExecutionState.h:class ExecutionState {
/usr/local/src/s2e/./s2e/klee/include/klee/ExecutionState.h:  ExecutionState &operator=(const ExecutionState&); 
/usr/local/src/s2e/./s2e/klee/include/klee/ExecutionState.h:  ExecutionState() : fakeState(false), underConstrained(0),
/usr/local/src/s2e/./s2e/klee/include/klee/ExecutionState.h:  virtual ExecutionState* clone();
/usr/local/src/s2e/./s2e/klee/include/klee/ExecutionState.h:  ExecutionState(KFunction *kf);
/usr/local/src/s2e/./s2e/klee/include/klee/ExecutionState.h:  ExecutionState(const std::vector<ref<Expr> > &assumptions);
/usr/local/src/s2e/./s2e/klee/include/klee/ExecutionState.h:  virtual ~ExecutionState();
/usr/local/src/s2e/./s2e/klee/include/klee/ExecutionState.h:  ExecutionState *branch();
/usr/local/src/s2e/./s2e/klee/include/klee/ExecutionState.h:  virtual bool merge(const ExecutionState &b);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  class ExecutionEngine;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  class ExecutionState;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  /// removedStates, and haltExecution, among others.
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  typedef std::pair<ExecutionState*,ExecutionState*> StatePair;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  std::set<ExecutionState*> states;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  std::set<ExecutionState*> addedStates;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  std::set<ExecutionState*> removedStates;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  std::map<ExecutionState*, std::vector<SeedInfo> > seedMap;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  bool haltExecution;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  llvm::Function* getCalledFunction(llvm::CallSite &cs, ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void executeInstruction(ExecutionState &state, KInstruction *ki);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void printFileLine(ExecutionState &state, KInstruction *ki);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void run(ExecutionState &initialState);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  MemoryObject *addExternalObject(ExecutionState &state, void *addr,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void initializeGlobalObject(ExecutionState &state, ObjectState *os,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void initializeGlobals(ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void stepInstruction(ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void updateStates(ExecutionState *current);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:			    ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void callExternalFunction(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  ObjectState *bindObjectInState(ExecutionState &state, const MemoryObject *mo,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:                                 ExecutionState*> > ExactResolutionList;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void resolveExact(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void executeAlloc(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void executeFree(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void executeCall(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void executeMemoryOperation(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void executeMakeSymbolic(ExecutionState &state, const MemoryObject *mo);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual void branch(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:              std::vector<ExecutionState*> &result);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void addConstraint(ExecutionState &state, ref<Expr> condition);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  ref<Expr> replaceReadWithSymbolic(ExecutionState &state, ref<Expr> e);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:                   ExecutionState &state) const;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  Cell& getArgumentCell(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  Cell& getDestCell(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:                 ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:                    ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void executeGetValue(ExecutionState &state, ref<Expr> e, KInstruction *target);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  std::string getAddressInfo(ExecutionState &state, ref<Expr> address) const;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual void deleteState(ExecutionState *state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void handlePointsToObj(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void doImpliedValueConcretization(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void processTimers(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:                                  ExecutionState *state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  ref<Expr> simplifyExpr(const ExecutionState &state, ref<Expr> e);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:           llvm::ExecutionEngine *engine = NULL);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual StatePair fork(ExecutionState &current,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual StatePair concolicFork(ExecutionState &current,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  bool resolveSpeculativeState(ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual bool merge(ExecutionState &base, ExecutionState &other);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual void terminateState(ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual void terminateStateEarly(ExecutionState &state, const llvm::Twine &message);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void terminateStateOnExit(ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void terminateStateOnError(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  void terminateStateOnExecError(ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  ref<Expr> toUnique(const ExecutionState &state, ref<Expr> &e);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  ref<klee::ConstantExpr> toConstantSilent(ExecutionState &state, ref<Expr> e);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  ref<klee::ConstantExpr> toConstant(ExecutionState &state, ref<Expr> e,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual void setHaltExecution(bool value) {
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:    haltExecution = value;
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual unsigned getPathStreamID(const ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual unsigned getSymbolicPathStreamID(const ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual void getConstraintLog(const ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual bool getSymbolicSolution(const ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual void getCoveredLines(const ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual void copyOutConcretes(ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  virtual bool copyInConcretes(ExecutionState &state);
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  const std::set<ExecutionState*> &getStates() {
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  const std::set<ExecutionState*> &getAddedStates() {
/usr/local/src/s2e/./s2e/klee/include/klee/Executor.h:  const std::set<ExecutionState*> &getRemovedStates() {
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:  class ExecutionState;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    virtual ExecutionState &selectState() = 0;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    virtual void update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                        const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                        const std::set<ExecutionState*> &removedStates) = 0;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void addState(ExecutionState *es, ExecutionState *current = 0) {
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:      std::set<ExecutionState*> tmp;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:      update(current, tmp, std::set<ExecutionState*>());
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void removeState(ExecutionState *es, ExecutionState *current = 0) {
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:      std::set<ExecutionState*> tmp;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:      update(current, std::set<ExecutionState*>(), tmp);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    std::vector<ExecutionState*> states;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    ExecutionState &selectState();
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    std::vector<ExecutionState*> states;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    ExecutionState &selectState();
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    DiscretePDF<ExecutionState*> *states;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    double getWeight(ExecutionState*);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    ExecutionState &selectState();
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    ExecutionState &selectState();
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    std::map<ExecutionState*, uint64_t> statesAtMerge;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    uint64_t getMergePoint(ExecutionState &es);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void queueStateForMerge(ExecutionState &es, uint64_t mergePoint);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    ExecutionState &selectState();
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    std::map<llvm::Instruction*, ExecutionState*> statesAtMerge;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    llvm::Instruction *getMergePoint(ExecutionState &es);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    ExecutionState &selectState();
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    ExecutionState *lastState;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    ExecutionState &selectState();
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    std::set<ExecutionState*> pausedStates;
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    ExecutionState &selectState();
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    ExecutionState &selectState();
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:    void update(ExecutionState *current,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &addedStates,
/usr/local/src/s2e/./s2e/klee/include/klee/Searcher.h:                const std::set<ExecutionState*> &removedStates);
/usr/local/src/s2e/./s2e/klee/include/klee/ExternalDispatcher.h:  class ExecutionEngine;
/usr/local/src/s2e/./s2e/klee/include/klee/ExternalDispatcher.h:    llvm::ExecutionEngine *originalEngine;
/usr/local/src/s2e/./s2e/klee/include/klee/ExternalDispatcher.h:    llvm::ExecutionEngine *executionEngine;
/usr/local/src/s2e/./s2e/klee/include/klee/ExternalDispatcher.h:    ExternalDispatcher(llvm::ExecutionEngine* engine = NULL);
/usr/local/src/s2e/./s2e/klee/include/klee/Interpreter.h://===-- Interpreter.h - Abstract Execution Engine Interface -----*- C++ -*-===//
/usr/local/src/s2e/./s2e/klee/include/klee/Interpreter.h:class ExecutionState;
/usr/local/src/s2e/./s2e/klee/include/klee/Interpreter.h:  virtual void processTestCase(const ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Interpreter.h:  virtual void setHaltExecution(bool value) = 0;
/usr/local/src/s2e/./s2e/klee/include/klee/Interpreter.h:  virtual unsigned getPathStreamID(const ExecutionState &state) = 0;
/usr/local/src/s2e/./s2e/klee/include/klee/Interpreter.h:  virtual unsigned getSymbolicPathStreamID(const ExecutionState &state) = 0;
/usr/local/src/s2e/./s2e/klee/include/klee/Interpreter.h:  virtual void getConstraintLog(const ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/Interpreter.h:  virtual bool getSymbolicSolution(const ExecutionState &state, 
/usr/local/src/s2e/./s2e/klee/include/klee/Interpreter.h:  virtual void getCoveredLines(const ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/include/klee/PTree.h:  class ExecutionState;
/usr/local/src/s2e/./s2e/klee/include/klee/PTree.h:    typedef ExecutionState* data_type;
/usr/local/src/s2e/./s2e/klee/include/klee/PTree.h:    ExecutionState *data;
/usr/local/src/s2e/./s2e/klee/include/klee/PTree.h:    PTreeNode(PTreeNode *_parent, ExecutionState *_data);
/usr/local/src/s2e/./s2e/klee/include/klee/SolverImpl.h:  class ExecutionState;
/usr/local/src/s2e/./s2e/klee/include/klee/StatsTracker.h:  class ExecutionState;
/usr/local/src/s2e/./s2e/klee/include/klee/StatsTracker.h:    void framePushed(ExecutionState &es, StackFrame *parentFrame);
/usr/local/src/s2e/./s2e/klee/include/klee/StatsTracker.h:    void framePopped(ExecutionState &es);
/usr/local/src/s2e/./s2e/klee/include/klee/StatsTracker.h:    void markBranchVisited(ExecutionState *visitedTrue, 
/usr/local/src/s2e/./s2e/klee/include/klee/StatsTracker.h:                           ExecutionState *visitedFalse);
/usr/local/src/s2e/./s2e/klee/include/klee/StatsTracker.h:    void stepInstruction(ExecutionState &es);
/usr/local/src/s2e/./s2e/klee/tools/klee/main.cpp:#include "klee/ExecutionState.h"
/usr/local/src/s2e/./s2e/klee/tools/klee/main.cpp:  void processTestCase(const ExecutionState  &state,
/usr/local/src/s2e/./s2e/klee/tools/klee/main.cpp:void KleeHandler::processTestCase(const ExecutionState &state,
/usr/local/src/s2e/./s2e/klee/tools/klee/main.cpp:      m_interpreter->setHaltExecution(true);
/usr/local/src/s2e/./s2e/klee/tools/klee/main.cpp:  theInterpreter->setHaltExecution(true);
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/Pe.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/Binary.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/Macho.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/TextModule.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/TextModule.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/BFDInterface.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/Library.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/Binary.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/ExecutableFile.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/Macho.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/ExecutableFile.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/BFDInterface.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/Library.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/BinaryReaders/Library.h:#include "lib/ExecutionTracer/ModuleParser.h"
/usr/local/src/s2e/./s2e/tools/lib/Utils/Signals/functors.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/Utils/Signals/fsigc++.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/Utils/Signals/Signals.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/Utils/Signals/sig-template.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/Utils/BasicBlockListParser.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/Utils/BasicBlockListParser.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.cpp:        const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.cpp:    ExecutionTraceCache *cacheItem = (ExecutionTraceCache*)item;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.cpp:            const ExecutionTraceCacheSimEntry *se = &cacheItem->entry;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.cpp:                      const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.cpp:                      const s2e::plugins::ExecutionTraceCacheSimEntry &e)
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/ModuleParser.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/ModuleParser.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.h:#include <s2e/Plugins/ExecutionTracers/TraceEntries.h>
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.h:    s2e::plugins::ExecutionTraceTestCase::ConcreteInputs m_inputs;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.h:    bool getInputs(const s2e::plugins::ExecutionTraceTestCase::ConcreteInputs &out) const;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:#include <s2e/Plugins/ExecutionTracers/TraceEntries.h>
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:        s2e::plugins::ExecutionTraceFork *f = (s2e::plugins::ExecutionTraceFork*)item;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:void PathBuilder::enumeratePaths(ExecutionPaths &paths)
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:    ExecutionPath currentPath;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:            paths.push_back(ExecutionPath());
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:            ExecutionPath &curPath = paths.back();
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:void PathBuilder::printPath(const ExecutionPath &p, std::ostream &os)
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:    ExecutionPath::const_reverse_iterator it;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:void PathBuilder::printPaths(const ExecutionPaths &p, std::ostream &os)
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:    ExecutionPaths::const_iterator it;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:    s2e::plugins::ExecutionTraceItemHeader hdr;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PathBuilder.cpp:    ExecutionPath currentPath;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/Path.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/Path.h:typedef std::vector<uint32_t> ExecutionPath;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/Path.h:typedef std::vector<ExecutionPath> ExecutionPaths;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/Path.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/Path.h:    void enumeratePaths(ExecutionPaths &paths);
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/Path.h:    static void printPath(const ExecutionPath &p, std::ostream &os);
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/Path.h:    static void printPaths(const ExecutionPaths &p, std::ostream &os);
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PageFault.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PageFault.cpp:        const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PageFault.cpp:        ExecutionTracePageFault *pageFault = (ExecutionTracePageFault*)item;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PageFault.cpp:        ExecutionTracePageFault *tlbMiss = (ExecutionTracePageFault*)item;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.h:#include <s2e/Plugins/ExecutionTracers/TraceEntries.h>
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.h:        const s2e::plugins::ExecutionTraceItemHeader &,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.h:                             const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.h:    bool getItem(unsigned index, s2e::plugins::ExecutionTraceItemHeader &hdr, void **data);
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PageFault.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PageFault.h:#include <s2e/Plugins/ExecutionTracers/TraceEntries.h>
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/PageFault.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.cpp:                         const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.cpp:        s2e::plugins::ExecutionTraceItemHeader *hdr =
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.cpp:                (s2e::plugins::ExecutionTraceItemHeader *)(buffer);
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.cpp:        if (currentOffset + sizeof(s2e::plugins::ExecutionTraceItemHeader) > element.m_size) {
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.cpp:        currentOffset += sizeof(s2e::plugins::ExecutionTraceItemHeader)  + hdr->size;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.cpp:bool LogParser::getItem(unsigned index, s2e::plugins::ExecutionTraceItemHeader &hdr, void **data)
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.cpp:    hdr = *(s2e::plugins::ExecutionTraceItemHeader*)buffer;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/LogParser.cpp:        *data = buffer + sizeof(s2e::plugins::ExecutionTraceItemHeader);
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.cpp:        const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.cpp:    ExecutionTraceTestCase::deserialize(item, hdr.size, state->m_inputs);
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.cpp:    ExecutionTraceTestCase::ConcreteInputs::iterator it;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.cpp:        const ExecutionTraceTestCase::VarValuePair &vp = *it;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.cpp:    ExecutionTraceTestCase::ConcreteInputs::iterator it;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/TestCase.cpp:        const ExecutionTraceTestCase::VarValuePair &vp = *it;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/ModuleParser.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/ModuleParser.cpp:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/ModuleParser.cpp:        const s2e::plugins::ExecutionTraceModuleLoad &load = *(s2e::plugins::ExecutionTraceModuleLoad*)item;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/ModuleParser.cpp:        const s2e::plugins::ExecutionTraceModuleUnload &unload = *(s2e::plugins::ExecutionTraceModuleUnload*)item;
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/InstructionCounter.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/InstructionCounter.h:#include <s2e/Plugins/ExecutionTracers/TraceEntries.h>
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/InstructionCounter.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.h:#include <s2e/Plugins/ExecutionTracers/TraceEntries.h>
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.h:                          const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/CacheProfiler.h:                          const s2e::plugins::ExecutionTraceCacheSimEntry &e);
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/InstructionCounter.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/InstructionCounter.cpp:        const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/lib/ExecutionTracer/InstructionCounter.cpp:    ExecutionTraceICount *e = static_cast<ExecutionTraceICount*>(item);
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:#include <lib/ExecutionTracer/Path.h>
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:#include <lib/ExecutionTracer/TestCase.h>
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:#include <lib/ExecutionTracer/PageFault.h>
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:#include <lib/ExecutionTracer/InstructionCounter.h>
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:void TbTrace::printRegisters(const s2e::plugins::ExecutionTraceTb *te)
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:void TbTrace::printMemoryChecker(const s2e::plugins::ExecutionTraceMemChecker::Serialized *item)
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:    ExecutionTraceMemChecker deserializedItem;
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:    ExecutionTraceMemChecker::deserialize(item, &deserializedItem);
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:    if (deserializedItem.flags & ExecutionTraceMemChecker::REVOKE) {
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:    if (deserializedItem.flags & ExecutionTraceMemChecker::GRANT) {
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:    if (deserializedItem.flags & ExecutionTraceMemChecker::READ) {
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:    if (deserializedItem.flags & ExecutionTraceMemChecker::WRITE) {
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:        const s2e::plugins::ExecutionTraceModuleLoad &load = *(s2e::plugins::ExecutionTraceModuleLoad*)item;
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:        const s2e::plugins::ExecutionTraceModuleUnload &unload = *(s2e::plugins::ExecutionTraceModuleUnload*)item;
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:        s2e::plugins::ExecutionTraceFork *f = (s2e::plugins::ExecutionTraceFork*)item;
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:        const s2e::plugins::ExecutionTraceTb *te =
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:                (const s2e::plugins::ExecutionTraceTb*) item;
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:        const s2e::plugins::ExecutionTraceMemory *te =
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:                (const s2e::plugins::ExecutionTraceMemory*) item;
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:        const s2e::plugins::ExecutionTraceMemChecker::Serialized *te =
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.cpp:                (const s2e::plugins::ExecutionTraceMemChecker::Serialized*) item;
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.h:#include <lib/ExecutionTracer/LogParser.h>
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.h:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.h:    void printRegisters(const s2e::plugins::ExecutionTraceTb *te);
/usr/local/src/s2e/./s2e/tools/tools/tbtrace/TbTrace.h:    void printMemoryChecker(const s2e::plugins::ExecutionTraceMemChecker::Serialized *item);
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.cpp:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.cpp:    ExecutionTraceCache *e = (ExecutionTraceCache*)item;
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.cpp:        const ExecutionTraceCacheSimEntry *se = &e->entry;
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.cpp:void CacheProfilerState::processCacheItem(CacheProfiler *cp, uint64_t pid, const ExecutionTraceCacheSimEntry *e)
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/pfprofiler.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/pfprofiler.h:#include <lib/ExecutionTracer/LogParser.h>
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/pfprofiler.h:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.h:#include <lib/ExecutionTracer/LogParser.h>
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.h:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.h:    void processCacheItem(CacheProfiler *cp, uint64_t pid, const s2e::plugins::ExecutionTraceCacheSimEntry *e);
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/CacheProfiler.h:    //void processCacheItem(const s2e::plugins::ExecutionTraceCacheSimEntry *e);
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/pfprofiler.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/pfprofiler.cpp:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/pfprofiler.cpp:#include <lib/ExecutionTracer/Path.h>
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/pfprofiler.cpp:#include <lib/ExecutionTracer/TestCase.h>
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/pfprofiler.cpp:#include <lib/ExecutionTracer/PageFault.h>
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/pfprofiler.cpp:#include <lib/ExecutionTracer/InstructionCounter.h>
/usr/local/src/s2e/./s2e/tools/tools/pfprofiler/pfprofiler.cpp:    TraceFile("trace", cl::desc("<input trace>"), cl::init("ExecutionTracer.dat"));
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.cpp:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.cpp:#include <lib/ExecutionTracer/Path.h>
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.cpp:#include <lib/ExecutionTracer/TestCase.h>
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.cpp:#include <lib/ExecutionTracer/InstructionCounter.h>
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.cpp:#include <s2e/Plugins/ExecutionTracers/TraceEntries.h>
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.cpp:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.cpp:    const s2e::plugins::ExecutionTraceICount *te =
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.cpp:            (const s2e::plugins::ExecutionTraceICount*) item;
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.h:#include <lib/ExecutionTracer/LogParser.h>
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.h:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.h:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.h:            const s2e::plugins::ExecutionTraceFork *te);
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.h:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/icounter/icounter.h:            const s2e::plugins::ExecutionTraceFork *te);
/usr/local/src/s2e/./s2e/tools/tools/cacheprof/cacheprof.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/cacheprof/cacheprof.cpp:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/cacheprof/cacheprof.cpp:#include <lib/ExecutionTracer/Path.h>
/usr/local/src/s2e/./s2e/tools/tools/cacheprof/cacheprof.cpp:#include <lib/ExecutionTracer/TestCase.h>
/usr/local/src/s2e/./s2e/tools/tools/cacheprof/cacheprof.cpp:#include <lib/ExecutionTracer/CacheProfiler.h>
/usr/local/src/s2e/./s2e/tools/tools/cacheprof/cacheprof.cpp:#include <s2e/Plugins/ExecutionTracers/TraceEntries.h>
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:#include <lib/ExecutionTracer/Path.h>
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:#include <lib/ExecutionTracer/TestCase.h>
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:#include <s2e/Plugins/ExecutionTracers/TraceEntries.h>
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:        const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:        const s2e::plugins::ExecutionTraceFork *te)
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:        const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:        const s2e::plugins::ExecutionTraceFork *te)
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:    const s2e::plugins::ExecutionTraceFork *te =
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.cpp:            (const s2e::plugins::ExecutionTraceFork*) item;
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.h:#include <lib/ExecutionTracer/LogParser.h>
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.h:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.h:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.h:            const s2e::plugins::ExecutionTraceFork *te);
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.h:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/forkprofiler/forkprofiler.h:            const s2e::plugins::ExecutionTraceFork *te);
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.cpp:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.cpp:#include <lib/ExecutionTracer/Path.h>
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.cpp:#include <lib/ExecutionTracer/TestCase.h>
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.cpp:#include <s2e/Plugins/ExecutionTracers/TraceEntries.h>
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.cpp:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.cpp:        s2e::plugins::ExecutionTraceFork *f = (s2e::plugins::ExecutionTraceFork*)item;
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.cpp:    const s2e::plugins::ExecutionTraceTb *te =
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.cpp:            (const s2e::plugins::ExecutionTraceTb*) item;
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.h:#include <lib/ExecutionTracer/LogParser.h>
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.h:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/coverage/Coverage.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:#include <lib/ExecutionTracer/Path.h>
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:#include <lib/ExecutionTracer/TestCase.h>
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:        TraceFile("trace", cl::desc("Input trace"), cl::init("ExecutionTracer.dat"));
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:ExecutionDebugger::ExecutionDebugger(Library *lib, ModuleCache *cache, LogEvents *events, std::ostream &os) : m_os(os)
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:            sigc::mem_fun(*this, &ExecutionDebugger::onItem)
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:ExecutionDebugger::~ExecutionDebugger()
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:void ExecutionDebugger::onItem(unsigned traceIndex,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:    ExecutionTraceTb *tb = (ExecutionTraceTb*) item;
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:void MemoryDebugger::printHeader(const s2e::plugins::ExecutionTraceItemHeader &hdr)
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:void MemoryDebugger::doLookForValue(const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:                                    const s2e::plugins::ExecutionTraceMemory &item)
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:void MemoryDebugger::doPageFault(const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:                                 const s2e::plugins::ExecutionTracePageFault &item)
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:            const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:            doLookForValue(hdr, *(const s2e::plugins::ExecutionTraceMemory*)item);
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:        doPageFault(hdr, *(const s2e::plugins::ExecutionTracePageFault*)item);
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:    ExecutionPaths paths;
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:    ExecutionPaths::iterator pit;
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.cpp:        ExecutionDebugger ed(&m_binaries, &mc, &pb, logfile);
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:#include <lib/ExecutionTracer/LogParser.h>
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:#include <lib/ExecutionTracer/ModuleParser.h>
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:class ExecutionDebugger
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:    ExecutionDebugger(Library *lib, ModuleCache *cache, LogEvents *events, std::ostream &os);
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:    ~ExecutionDebugger();
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:                const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:    void printHeader(const s2e::plugins::ExecutionTraceItemHeader &hdr);
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:    void doLookForValue(const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:                                        const s2e::plugins::ExecutionTraceMemory &item);
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:    void doPageFault(const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:                                     const s2e::plugins::ExecutionTracePageFault &item);
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:                         const s2e::plugins::ExecutionTraceItemHeader &hdr,
/usr/local/src/s2e/./s2e/tools/tools/debugger/Debugger.h:                         const s2e::plugins::ExecutionTraceCall &call);
/usr/local/src/s2e/./s2e/guest/include/s2e.h: * S2E Selective Symbolic Execution Framework
/usr/local/src/s2e/./s2e/guest/include/s2e.h:/** Programmatically add a new configuration entry to the ModuleExecutionDetector plugin */
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileVerifierPass.cpp:    double BBWeight = PI->getExecutionCount(BB);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileVerifierPass.cpp:    DI.BBWeight = PI->getExecutionCount(BB);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileVerifierPass.cpp:    if (PI->getExecutionCount(&F) != PI->getExecutionCount(entry))
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:ProfileInfoT<Function,BasicBlock>::getExecutionCount(const BasicBlock *BB) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:        getExecutionCount(const MachineBasicBlock *MBB) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:double ProfileInfoT<Function,BasicBlock>::getExecutionCount(const Function *F) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:  double Count = getExecutionCount(&F->getEntryBlock());
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:        getExecutionCount(const MachineFunction *MF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:  double Count = getExecutionCount(&MF->front());
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:        setExecutionCount(const BasicBlock *BB, double w) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:        setExecutionCount(const MachineBasicBlock *MBB, double w) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:        addExecutionCount(const BasicBlock *BB, double w) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:  double oldw = getExecutionCount(BB);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:      if ((Mode & GetPathToValue) && (getExecutionCount(*Succ) != MissingValue)) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:    double oldc = getExecutionCount(e.first);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:      setExecutionCount(e.first, w+oldc);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:    if (getExecutionCount(NewBB) == ProfileInfo::MissingValue) succ_count++;
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:  double w = getExecutionCount(Old);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:  setExecutionCount(New, w);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:  setExecutionCount(NewBB, newweight);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:      double w = getExecutionCount(BB);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:    setExecutionCount(BB,inWeight);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:    setExecutionCount(BB,0);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:    setExecutionCount(BB,outWeight);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp://  if (getExecutionCount(&(F->getEntryBlock())) == 0) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:        double bw = getExecutionCount(BB);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:      ReturnWeight = getExecutionCount(&(F->getEntryBlock())) - ReturnWeight;
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:      setExecutionCount(e.first,ReturnWeight);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:          setExecutionCount(BB,getExecutionCount(BB));
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileInfo.cpp:      double ow = getExecutionCount(Dest);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/IPA/CallGraphSCCPass.cpp:    // If we're in -debug-pass=Executions mode, construct the SCC node list,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/IPA/CallGraphSCCPass.cpp:    if (isPassDebuggingExecutionsOrMore()) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileEstimatorPass.cpp:  if (getExecutionCount(BB) != MissingValue) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Analysis/ProfileEstimatorPass.cpp:    BBWeight = getExecutionCount(BB);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Support/Timer.cpp:    OS << "  Total Execution Time: ";
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Transforms/Scalar/BasicBlockPlacement.cpp:    double MaxExecutionCount = PI->getExecutionCount(*SI);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Transforms/Scalar/BasicBlockPlacement.cpp:        double Count = PI->getExecutionCount(*SI);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Transforms/Scalar/BasicBlockPlacement.cpp:        if (Count > MaxExecutionCount ||
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Transforms/Scalar/BasicBlockPlacement.cpp:            (Count == MaxExecutionCount && *SI == &*InsertPos)) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Transforms/Scalar/BasicBlockPlacement.cpp:          MaxExecutionCount = Count;
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h:#include "llvm/ExecutionEngine/RuntimeDyld.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp://===-- ExecutionEngine.cpp - Common Implementation shared by EEs ---------===//
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:ExecutionEngine *(*ExecutionEngine::JITCtor)(
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:ExecutionEngine *(*ExecutionEngine::MCJITCtor)(
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:ExecutionEngine *(*ExecutionEngine::InterpCtor)(Module *M,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:ExecutionEngine::ExecutionEngine(Module *M)
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:ExecutionEngine::~ExecutionEngine() {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::DeregisterAllTables() {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:char *ExecutionEngine::getMemoryForGV(const GlobalVariable *GV) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:bool ExecutionEngine::removeModule(Module *M) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:Function *ExecutionEngine::FindFunctionNamed(const char *FnName) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void *ExecutionEngineState::RemoveMapping(const MutexGuard &,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::addGlobalMapping(const GlobalValue *GV, void *Addr) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::clearAllGlobalMappings() {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::clearGlobalMappingsFromModule(Module *M) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void *ExecutionEngine::updateGlobalMapping(const GlobalValue *GV, void *Addr) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:  ExecutionEngineState::GlobalAddressMapTy &Map =
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void *ExecutionEngine::getPointerToGlobalIfAvailable(const GlobalValue *GV) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:  ExecutionEngineState::GlobalAddressMapTy::iterator I =
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:const GlobalValue *ExecutionEngine::getGlobalValueAtAddress(void *Addr) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:    for (ExecutionEngineState::GlobalAddressMapTy::iterator
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:  void *reset(LLVMContext &C, ExecutionEngine *EE,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void *ArgvArray::reset(LLVMContext &C, ExecutionEngine *EE,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::runStaticConstructorsDestructors(Module *module,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::runStaticConstructorsDestructors(bool isDtors) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:static bool isTargetNullPtr(ExecutionEngine *EE, void *Loc) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:int ExecutionEngine::runFunctionAsMain(Function *Fn,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:ExecutionEngine *ExecutionEngine::create(Module *M,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:ExecutionEngine *ExecutionEngine::createJIT(Module *M,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:  if (ExecutionEngine::JITCtor == 0) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:  return ExecutionEngine::JITCtor(M, ErrorStr, JMM, OptLevel, GVsWithCode, TM);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:ExecutionEngine *EngineBuilder::create() {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:      if (UseMCJIT && ExecutionEngine::MCJITCtor) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:        ExecutionEngine *EE =
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:          ExecutionEngine::MCJITCtor(M, ErrorStr, JMM, OptLevel,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:      } else if (ExecutionEngine::JITCtor) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:        ExecutionEngine *EE =
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:          ExecutionEngine::JITCtor(M, ErrorStr, JMM, OptLevel,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:    if (ExecutionEngine::InterpCtor)
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:      return ExecutionEngine::InterpCtor(M, ErrorStr);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:  if ((WhichEngine & EngineKind::JIT) && ExecutionEngine::JITCtor == 0) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void *ExecutionEngine::getPointerToGlobal(const GlobalValue *GV) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:GenericValue ExecutionEngine::getConstantValue(const Constant *C) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::StoreValueToMemory(const GenericValue &Val,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::LoadValueFromMemory(GenericValue &Result,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::InitializeMemory(const Constant *Init, void *Addr) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::emitGlobals() {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngine::EmitGlobalVariable(const GlobalVariable *GV) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:ExecutionEngineState::ExecutionEngineState(ExecutionEngine &EE)
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:ExecutionEngineState::AddressMapConfig::getMutex(ExecutionEngineState *EES) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngineState::AddressMapConfig::onDelete(ExecutionEngineState *EES,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:void ExecutionEngineState::AddressMapConfig::onRAUW(ExecutionEngineState *,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngine.cpp:  assert(false && "The ExecutionEngine doesn't know how to handle a"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp://===-- ExecutionEngineBindings.cpp - C bindings for EEs ------------------===//
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:// This file defines the C bindings for the ExecutionEngine library.
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:#include "llvm-c/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMBool LLVMCreateExecutionEngineForModule(LLVMExecutionEngineRef *OutEE,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:  if (ExecutionEngine *EE = builder.create()){
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMBool LLVMCreateInterpreterForModule(LLVMExecutionEngineRef *OutInterp,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:  if (ExecutionEngine *Interp = builder.create()) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMBool LLVMCreateJITCompilerForModule(LLVMExecutionEngineRef *OutJIT,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:  if (ExecutionEngine *JIT = builder.create()) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMBool LLVMCreateExecutionEngine(LLVMExecutionEngineRef *OutEE,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:  return LLVMCreateExecutionEngineForModule(OutEE,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMBool LLVMCreateInterpreter(LLVMExecutionEngineRef *OutInterp,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMBool LLVMCreateJITCompiler(LLVMExecutionEngineRef *OutJIT,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:void LLVMDisposeExecutionEngine(LLVMExecutionEngineRef EE) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:void LLVMRunStaticConstructors(LLVMExecutionEngineRef EE) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:void LLVMRunStaticDestructors(LLVMExecutionEngineRef EE) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:int LLVMRunFunctionAsMain(LLVMExecutionEngineRef EE, LLVMValueRef F,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMGenericValueRef LLVMRunFunction(LLVMExecutionEngineRef EE, LLVMValueRef F,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:void LLVMFreeMachineCodeForFunction(LLVMExecutionEngineRef EE, LLVMValueRef F) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:void LLVMAddModule(LLVMExecutionEngineRef EE, LLVMModuleRef M){
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:void LLVMAddModuleProvider(LLVMExecutionEngineRef EE, LLVMModuleProviderRef MP){
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMBool LLVMRemoveModule(LLVMExecutionEngineRef EE, LLVMModuleRef M,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMBool LLVMRemoveModuleProvider(LLVMExecutionEngineRef EE,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMBool LLVMFindFunction(LLVMExecutionEngineRef EE, const char *Name,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:void *LLVMRecompileAndRelinkFunction(LLVMExecutionEngineRef EE, LLVMValueRef Fn) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:LLVMTargetDataRef LLVMGetExecutionEngineTargetData(LLVMExecutionEngineRef EE) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:void LLVMAddGlobalMapping(LLVMExecutionEngineRef EE, LLVMValueRef Global,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/ExecutionEngineBindings.cpp:void *LLVMGetPointerToGlobal(LLVMExecutionEngineRef EE, LLVMValueRef Global) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.h:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.h:class JIT : public ExecutionEngine {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.h:  static ExecutionEngine *create(Module *M,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.h:    return ExecutionEngine::createJIT(M, Err, JMM, OptLevel, GVsWithCode,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.h:  static ExecutionEngine *createJIT(Module *M,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JITDwarfEmitter.cpp:#include "llvm/ExecutionEngine/JITMemoryManager.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.cpp:#include "llvm/ExecutionEngine/JITEventListener.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.cpp:ExecutionEngine *JIT::createJIT(Module *M,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.cpp:  : ExecutionEngine(M), TM(tm), TJI(tji), AllocateGVsWithCode(GVsWithCode),
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.cpp:  ExecutionEngine::addModule(M);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JIT.cpp:  bool result = ExecutionEngine::removeModule(M);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/OProfileJITEventListener.cpp:#include "llvm/ExecutionEngine/JITEventListener.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JITEmitter.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JITEmitter.cpp:#include "llvm/ExecutionEngine/JITEventListener.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JITEmitter.cpp:#include "llvm/ExecutionEngine/JITMemoryManager.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JITEmitter.cpp:  // Delete translation for this from the ExecutionEngine, so it will get
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/Intercept.cpp:    // We expect ExecutionEngine::runStaticConstructorsDestructors()
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/Intercept.cpp:    // is called before ExecutionEngine::runFunctionAsMain() is called.
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/JIT/JITMemoryManager.cpp:#include "llvm/ExecutionEngine/JITMemoryManager.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/TargetSelect.cpp:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.cpp:ExecutionEngine *Interpreter::create(Module *M, std::string* ErrStr) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.cpp:  : ExecutionEngine(M), TD(M) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.cpp:  initializeExecutionEngine();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:// ExecutionContext struct - This struct represents one stack frame currently
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:struct ExecutionContext {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:class Interpreter : public ExecutionEngine, public InstVisitor<Interpreter> {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:  std::vector<ExecutionContext> ECStack;
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:  /// create - Create an interpreter ExecutionEngine. This can never fail.
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:  static ExecutionEngine *create(Module *M, std::string *ErrorStr = 0);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                   gep_type_iterator E, ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:  void SwitchToNewBasicBlock(BasicBlock *Dest, ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:  void initializeExecutionEngine() { }
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:  GenericValue getConstantExprValue(ConstantExpr *CE, ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:  GenericValue getOperandValue(Value *V, ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                               ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                               ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                  ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                 ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                 ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                 ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                 ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                   ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                   ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                  ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Interpreter.h:                                    Type *Ty, ExecutionContext &SF);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/ExternalFunctions.cpp:  // this information is never passed into ExecutionEngine::runFunction().
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp://===-- Execution.cpp - Implement code to simulate the program ------------===//
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:static void SetValue(Value *V, GenericValue Val, ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:    ExecutionContext &CallingSF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &InvokingSF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:void Interpreter::SwitchToNewBasicBlock(BasicBlock *Dest, ExecutionContext &SF){
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                              ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                           ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                          ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                          ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                             ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                           ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                            ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                            ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                            ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                            ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                              ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                              ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                             ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &SF = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:                                                ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:GenericValue Interpreter::getOperandValue(Value *V, ExecutionContext &SF) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp://                        Dispatch and Execution Code
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ECStack.push_back(ExecutionContext());
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:  ExecutionContext &StackFrame = ECStack.back();
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/Interpreter/Execution.cpp:    ExecutionContext &SF = ECStack.back();  // Current stack frame
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJIT.h:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJIT.h:#include "llvm/ExecutionEngine/RuntimeDyld.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJIT.h:class MCJIT : public ExecutionEngine {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJIT.h:  /// @name ExecutionEngine interface implementation
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJIT.h:  static ExecutionEngine *createJIT(Module *M,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJIT.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJIT.cpp:#include "llvm/ExecutionEngine/MCJIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJIT.cpp:#include "llvm/ExecutionEngine/JITMemoryManager.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJIT.cpp:ExecutionEngine *MCJIT::createJIT(Module *M,
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJIT.cpp:  : ExecutionEngine(m), TM(tm), MemMgr(MM), M(m), OS(Buffer), Dyld(MM) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/Intercept.cpp:    // We expect ExecutionEngine::runStaticConstructorsDestructors()
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/Intercept.cpp:    // is called before ExecutionEngine::runFunctionAsMain() is called.
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJITMemoryManager.h:#include "llvm/ExecutionEngine/JITMemoryManager.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/ExecutionEngine/MCJIT/MCJITMemoryManager.h:#include "llvm/ExecutionEngine/RuntimeDyld.h"
/usr/local/src/s2e/./build/llvm-3.0.src/lib/CodeGen/ExecutionDepsFix.cpp://===- ExecutionDepsFix.cpp - Fix execution dependecy issues ----*- C++ -*-===//
/usr/local/src/s2e/./build/llvm-3.0.src/lib/CodeGen/ExecutionDepsFix.cpp:    TII->setExecutionDomain(dv->Instrs.pop_back_val(), domain);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/CodeGen/ExecutionDepsFix.cpp:    TII->setExecutionDomain(mi, domain);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/CodeGen/ExecutionDepsFix.cpp:      std::pair<uint16_t, uint16_t> domp = TII->getExecutionDomain(mi);
/usr/local/src/s2e/./build/llvm-3.0.src/lib/CodeGen/ExecutionDepsFix.cpp:llvm::createExecutionDependencyFixPass(const TargetRegisterClass *RC) {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/CodeGen/ShadowStackGC.cpp:  //        All of the output passes emit globals last. The ExecutionEngine
/usr/local/src/s2e/./build/llvm-3.0.src/lib/VMCore/PassManager.cpp:  None, Arguments, Structure, Executions, Details
/usr/local/src/s2e/./build/llvm-3.0.src/lib/VMCore/PassManager.cpp:  clEnumVal(Executions, "print pass name before it is executed"),
/usr/local/src/s2e/./build/llvm-3.0.src/lib/VMCore/PassManager.cpp:/// isPassDebuggingExecutionsOrMore - Return true if -debug-pass=Executions
/usr/local/src/s2e/./build/llvm-3.0.src/lib/VMCore/PassManager.cpp:bool PMDataManager::isPassDebuggingExecutionsOrMore() const {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/VMCore/PassManager.cpp:  return PassDebugging >= Executions;
/usr/local/src/s2e/./build/llvm-3.0.src/lib/VMCore/PassManager.cpp:  if (PassDebugging < Executions)
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/X86/X86InstrInfo.cpp:X86InstrInfo::getExecutionDomain(const MachineInstr *MI) const {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/X86/X86InstrInfo.cpp:void X86InstrInfo::setExecutionDomain(MachineInstr *MI, unsigned Domain) const {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/X86/X86TargetMachine.cpp:    PM.add(createExecutionDependencyFixPass(&X86::VR128RegClass));
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/X86/X86InstrInfo.h:  getExecutionDomain(const MachineInstr *MI) const;
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/X86/X86InstrInfo.h:  void setExecutionDomain(MachineInstr *MI, unsigned Domain) const;
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:    // Execution domain for SSE instructions in bits 23, 24.
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/ARM/ARMTargetMachine.cpp:      PM.add(createExecutionDependencyFixPass(&ARM::DPRRegClass));
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/ARM/ARMBaseInstrInfo.cpp:// Execution domains.
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/ARM/ARMBaseInstrInfo.cpp:ARMBaseInstrInfo::getExecutionDomain(const MachineInstr *MI) const {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/ARM/ARMBaseInstrInfo.cpp:ARMBaseInstrInfo::setExecutionDomain(MachineInstr *MI, unsigned Domain) const {
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/ARM/ARMBaseInstrInfo.h:  getExecutionDomain(const MachineInstr *MI) const;
/usr/local/src/s2e/./build/llvm-3.0.src/lib/Target/ARM/ARMBaseInstrInfo.h:  void setExecutionDomain(MachineInstr *MI, unsigned Domain) const;
/usr/local/src/s2e/./build/llvm-3.0.src/utils/KillTheDoctor/KillTheDoctor.cpp:  cl::opt<bool> TraceExecution("x",
/usr/local/src/s2e/./build/llvm-3.0.src/utils/KillTheDoctor/KillTheDoctor.cpp:  if (TraceExecution)
/usr/local/src/s2e/./build/llvm-3.0.src/utils/KillTheDoctor/KillTheDoctor.cpp:  if (TraceExecution)
/usr/local/src/s2e/./build/llvm-3.0.src/utils/KillTheDoctor/KillTheDoctor.cpp:  if (TraceExecution)
/usr/local/src/s2e/./build/llvm-3.0.src/utils/KillTheDoctor/KillTheDoctor.cpp:      if (TraceExecution)
/usr/local/src/s2e/./build/llvm-3.0.src/utils/KillTheDoctor/KillTheDoctor.cpp:        if (TraceExecution)
/usr/local/src/s2e/./build/llvm-3.0.src/utils/KillTheDoctor/KillTheDoctor.cpp:        if (TraceExecution) {
/usr/local/src/s2e/./build/llvm-3.0.src/utils/KillTheDoctor/KillTheDoctor.cpp:        if (TraceExecution)
/usr/local/src/s2e/./build/llvm-3.0.src/utils/KillTheDoctor/KillTheDoctor.cpp:          if (TraceExecution) {
/usr/local/src/s2e/./build/llvm-3.0.src/utils/KillTheDoctor/KillTheDoctor.cpp:      if (TraceExecution)
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Analysis/ProfileInfo.h:    double getExecutionCount(const FType *F);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Analysis/ProfileInfo.h:    double getExecutionCount(const BType *BB);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Analysis/ProfileInfo.h:    void setExecutionCount(const BType *BB, double w);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Analysis/ProfileInfo.h:    void addExecutionCount(const BType *BB, double w);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Analysis/ProfileInfo.h:          dbgs() << F << "@" << format("%p", F) << ": " << format("%.20g",getExecutionCount(F)) << "\n";
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Analysis/ProfileInfo.h:        dbgs() << F << "@" << format("%p", F) << ": " << format("%.20g",getExecutionCount(F)) << "\n";
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Analysis/ProfileInfo.h:          dbgs() << BB << "@" << format("%p", BB) << ": " << format("%.20g",getExecutionCount(BB)) << "\n";
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Analysis/ProfileInfoLoader.h:  unsigned getNumExecutions() const { return CommandLines.size(); }
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Analysis/ProfileInfoLoader.h:  const std::string &getExecution(unsigned i) const { return CommandLines[i]; }
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Support/ELF.h:  EM_DXP           = 112, // Icera Semiconductor Inc. Deep Execution Processor
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Support/MachO.h:      HeaderFlagBitAllowStackExecution    = 0x00020000u, // MH_ALLOW_STACK_EXECUTION
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/JIT.h://===-- JIT.h - Abstract Execution Engine Interface -------------*- C++ -*-===//
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/JIT.h:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/MCJIT.h://===-- MCJIT.h - MC-Based Just-In-Time Execution Engine --------*- C++ -*-===//
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/MCJIT.h:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/Interpreter.h://===-- Interpreter.h - Abstract Execution Engine Interface -----*- C++ -*-===//
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/Interpreter.h:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h://===- ExecutionEngine.h - Abstract Execution Engine Interface --*- C++ -*-===//
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:class ExecutionEngine;
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:class ExecutionEngineState {
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:    typedef ExecutionEngineState *ExtraData;
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:    static sys::Mutex *getMutex(ExecutionEngineState *EES);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:    static void onDelete(ExecutionEngineState *EES, const GlobalValue *Old);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:    static void onRAUW(ExecutionEngineState *, const GlobalValue *,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  ExecutionEngine &EE;
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  ExecutionEngineState(ExecutionEngine &EE);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:class ExecutionEngine {
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  ExecutionEngineState EEState;
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  static ExecutionEngine *(*JITCtor)(
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  static ExecutionEngine *(*MCJITCtor)(
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  static ExecutionEngine *(*InterpCtor)(Module *M, std::string *ErrorStr);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  /// lock - This lock protects the ExecutionEngine, JIT, JITResolver and
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  //  ExecutionEngine Startup
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  virtual ~ExecutionEngine();
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  static ExecutionEngine *create(Module *M,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  static ExecutionEngine *createJIT(Module *M,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  /// Note that this takes ownership of the Module: when the ExecutionEngine is
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  /// pointer should look like.  When F is destroyed, the ExecutionEngine will
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  /// freeMachineCodeForFunction - Release memory in the ExecutionEngine
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  /// (ExecutionEngine::lock) or otherwise ensure that no other thread calls a
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  explicit ExecutionEngine(Module *M);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:/// EngineBuilder - Builder class for ExecutionEngines.  Use this by
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  /// setRelocationModel - Set the relocation model that the ExecutionEngine
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  /// setCodeModel - Set the CodeModel that the ExecutionEngine target
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/ExecutionEngine/ExecutionEngine.h:  ExecutionEngine *create();
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/CodeGen/MachineCodeInfo.h:// This file defines MachineCodeInfo, a class used by the JIT ExecutionEngine
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/CodeGen/Passes.h:  /// createExecutionDependencyFixPass - This pass fixes execution time
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/CodeGen/Passes.h:  FunctionPass *createExecutionDependencyFixPass(const TargetRegisterClass *RC);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Instructions.h:/// ReturnInst - Return a value (possibly void), from a function.  Execution
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/PassManagers.h:  /// isPassDebuggingExecutionsOrMore - Return true if -debug-pass=Executions
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/PassManagers.h:  bool isPassDebuggingExecutionsOrMore() const;
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Target/TargetInstrInfo.h:  /// getExecutionDomain - Return the current execution domain and bit mask of
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Target/TargetInstrInfo.h:  /// domain of MI, and a bit mask of possible domains.  The setExecutionDomain
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Target/TargetInstrInfo.h:  getExecutionDomain(const MachineInstr *MI) const {
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Target/TargetInstrInfo.h:  /// setExecutionDomain - Change the opcode of MI to execute in Domain.
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Target/TargetInstrInfo.h:  /// getExecutionDomain(MI).
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm/Target/TargetInstrInfo.h:  virtual void setExecutionDomain(MachineInstr *MI, unsigned Domain) const {}
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:/*===-- llvm-c/ExecutionEngine.h - ExecutionEngine Lib C Iface --*- C++ -*-===*\
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:|* This header declares the C interface to libLLVMExecutionEngine.o, which    *|
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:typedef struct LLVMOpaqueExecutionEngine *LLVMExecutionEngineRef;
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMBool LLVMCreateExecutionEngineForModule(LLVMExecutionEngineRef *OutEE,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMBool LLVMCreateInterpreterForModule(LLVMExecutionEngineRef *OutInterp,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMBool LLVMCreateJITCompilerForModule(LLVMExecutionEngineRef *OutJIT,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:/** Deprecated: Use LLVMCreateExecutionEngineForModule instead. */
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMBool LLVMCreateExecutionEngine(LLVMExecutionEngineRef *OutEE,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMBool LLVMCreateInterpreter(LLVMExecutionEngineRef *OutInterp,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMBool LLVMCreateJITCompiler(LLVMExecutionEngineRef *OutJIT,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:void LLVMDisposeExecutionEngine(LLVMExecutionEngineRef EE);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:void LLVMRunStaticConstructors(LLVMExecutionEngineRef EE);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:void LLVMRunStaticDestructors(LLVMExecutionEngineRef EE);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:int LLVMRunFunctionAsMain(LLVMExecutionEngineRef EE, LLVMValueRef F,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMGenericValueRef LLVMRunFunction(LLVMExecutionEngineRef EE, LLVMValueRef F,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:void LLVMFreeMachineCodeForFunction(LLVMExecutionEngineRef EE, LLVMValueRef F);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:void LLVMAddModule(LLVMExecutionEngineRef EE, LLVMModuleRef M);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:void LLVMAddModuleProvider(LLVMExecutionEngineRef EE, LLVMModuleProviderRef MP);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMBool LLVMRemoveModule(LLVMExecutionEngineRef EE, LLVMModuleRef M,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMBool LLVMRemoveModuleProvider(LLVMExecutionEngineRef EE,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMBool LLVMFindFunction(LLVMExecutionEngineRef EE, const char *Name,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:void *LLVMRecompileAndRelinkFunction(LLVMExecutionEngineRef EE, LLVMValueRef Fn);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:LLVMTargetDataRef LLVMGetExecutionEngineTargetData(LLVMExecutionEngineRef EE);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:void LLVMAddGlobalMapping(LLVMExecutionEngineRef EE, LLVMValueRef Global,
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:void *LLVMGetPointerToGlobal(LLVMExecutionEngineRef EE, LLVMValueRef Global);
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:  class ExecutionEngine;
/usr/local/src/s2e/./build/llvm-3.0.src/include/llvm-c/ExecutionEngine.h:  DEFINE_SIMPLE_CONVERSION_FUNCTIONS(ExecutionEngine, LLVMExecutionEngineRef)
/usr/local/src/s2e/./build/llvm-3.0.src/examples/ParallelJIT/ParallelJIT.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/ParallelJIT/ParallelJIT.cpp:#include "llvm/ExecutionEngine/Interpreter.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/ParallelJIT/ParallelJIT.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/ParallelJIT/ParallelJIT.cpp:  ExecutionEngine* EE;
/usr/local/src/s2e/./build/llvm-3.0.src/examples/ParallelJIT/ParallelJIT.cpp:  ExecutionEngine* EE = EngineBuilder(M).create();
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter5/toy.cpp:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter5/toy.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter5/toy.cpp:static ExecutionEngine *TheExecutionEngine;
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter5/toy.cpp:      void *FPtr = TheExecutionEngine->getPointerToFunction(LF);
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter5/toy.cpp:  TheExecutionEngine = EngineBuilder(TheModule).setErrorStr(&ErrStr).create();
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter5/toy.cpp:  if (!TheExecutionEngine) {
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter5/toy.cpp:    fprintf(stderr, "Could not create ExecutionEngine: %s\n", ErrStr.c_str());
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter5/toy.cpp:  OurFPM.add(new TargetData(*TheExecutionEngine->getTargetData()));
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter7/toy.cpp:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter7/toy.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter7/toy.cpp:static ExecutionEngine *TheExecutionEngine;
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter7/toy.cpp:      void *FPtr = TheExecutionEngine->getPointerToFunction(LF);
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter7/toy.cpp:  TheExecutionEngine = EngineBuilder(TheModule).setErrorStr(&ErrStr).create();
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter7/toy.cpp:  if (!TheExecutionEngine) {
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter7/toy.cpp:    fprintf(stderr, "Could not create ExecutionEngine: %s\n", ErrStr.c_str());
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter7/toy.cpp:  OurFPM.add(new TargetData(*TheExecutionEngine->getTargetData()));
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter4/toy.cpp:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter4/toy.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter4/toy.cpp:static ExecutionEngine *TheExecutionEngine;
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter4/toy.cpp:      void *FPtr = TheExecutionEngine->getPointerToFunction(LF);
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter4/toy.cpp:  TheExecutionEngine = EngineBuilder(TheModule).setErrorStr(&ErrStr).create();
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter4/toy.cpp:  if (!TheExecutionEngine) {
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter4/toy.cpp:    fprintf(stderr, "Could not create ExecutionEngine: %s\n", ErrStr.c_str());
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter4/toy.cpp:  OurFPM.add(new TargetData(*TheExecutionEngine->getTargetData()));
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter6/toy.cpp:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter6/toy.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter6/toy.cpp:static ExecutionEngine *TheExecutionEngine;
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter6/toy.cpp:      void *FPtr = TheExecutionEngine->getPointerToFunction(LF);
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter6/toy.cpp:  TheExecutionEngine = EngineBuilder(TheModule).setErrorStr(&ErrStr).create();
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter6/toy.cpp:  if (!TheExecutionEngine) {
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter6/toy.cpp:    fprintf(stderr, "Could not create ExecutionEngine: %s\n", ErrStr.c_str());
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Kaleidoscope/Chapter6/toy.cpp:  OurFPM.add(new TargetData(*TheExecutionEngine->getTargetData()));
/usr/local/src/s2e/./build/llvm-3.0.src/examples/ExceptionDemo/ExceptionDemo.cpp:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/ExceptionDemo/ExceptionDemo.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/ExceptionDemo/ExceptionDemo.cpp:void runExceptionThrow(llvm::ExecutionEngine *engine, 
/usr/local/src/s2e/./build/llvm-3.0.src/examples/ExceptionDemo/ExceptionDemo.cpp:  llvm::ExecutionEngine *executionEngine = factory.create();
/usr/local/src/s2e/./build/llvm-3.0.src/examples/BrainF/BrainFDriver.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/BrainF/BrainFDriver.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/BrainF/BrainFDriver.cpp:    ExecutionEngine *ee = EngineBuilder(mod).create();
/usr/local/src/s2e/./build/llvm-3.0.src/examples/HowToUseJIT/HowToUseJIT.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/HowToUseJIT/HowToUseJIT.cpp:#include "llvm/ExecutionEngine/Interpreter.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/HowToUseJIT/HowToUseJIT.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/HowToUseJIT/HowToUseJIT.cpp:  ExecutionEngine* EE = EngineBuilder(M).create();
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Fibonacci/fibonacci.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Fibonacci/fibonacci.cpp:#include "llvm/ExecutionEngine/Interpreter.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Fibonacci/fibonacci.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Fibonacci/fibonacci.cpp:  ExecutionEngine *EE =
/usr/local/src/s2e/./build/llvm-3.0.src/examples/Fibonacci/fibonacci.cpp:    errs() << argv[0] << ": Failed to construct ExecutionEngine: " << errStr
/usr/local/src/s2e/./build/llvm-3.0.src/tools/lli/lli.cpp:// This utility provides a simple wrapper around the LLVM Execution Engines,
/usr/local/src/s2e/./build/llvm-3.0.src/tools/lli/lli.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/tools/lli/lli.cpp:#include "llvm/ExecutionEngine/Interpreter.h"
/usr/local/src/s2e/./build/llvm-3.0.src/tools/lli/lli.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/tools/lli/lli.cpp:#include "llvm/ExecutionEngine/JITEventListener.h"
/usr/local/src/s2e/./build/llvm-3.0.src/tools/lli/lli.cpp:#include "llvm/ExecutionEngine/MCJIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/tools/lli/lli.cpp:static ExecutionEngine *EE = 0;
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/BugDriver.cpp:  if (initializeExecutionEnvironment()) return true;
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/ExecutionDriver.cpp://===- ExecutionDriver.cpp - Allow execution of LLVM program --------------===//
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/ExecutionDriver.cpp:/// initializeExecutionEnvironment - This method is used to set up the
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/ExecutionDriver.cpp:bool BugDriver::initializeExecutionEnvironment() {
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/ExecutionDriver.cpp:/// otherwise. Note: initializeExecutionEnvironment should be called BEFORE
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/BugDriver.h:  /// otherwise. Note: initializeExecutionEnvironment should be called BEFORE
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/BugDriver.h:  /// initializeExecutionEnvironment - This method is used to set up the
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/BugDriver.h:  bool initializeExecutionEnvironment();
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/FindBugs.cpp:  if (initializeExecutionEnvironment()) return false;
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/ToolRunner.cpp:      *Error = "Execution not supported with -compile-custom";
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/ToolRunner.cpp:    std::string ExecutionCommand;
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/ToolRunner.cpp:      const std::string &ExecutionCmd, std::vector<std::string> ExecArgs) :
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/ToolRunner.cpp:      ExecutionCommand(ExecutionCmd), ExecutorArgs(ExecArgs) {}
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/ToolRunner.cpp:  ProgramArgs.push_back(ExecutionCommand.c_str());
/usr/local/src/s2e/./build/llvm-3.0.src/tools/bugpoint/ToolRunner.cpp:    sys::Path(ExecutionCommand),
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-rtdyld/llvm-rtdyld.cpp:#include "llvm/ExecutionEngine/RuntimeDyld.h"
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:      double w = PI.getExecutionCount(F);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:      double w = PI.getExecutionCount(BB);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:    double w = ignoreMissing(PI.getExecutionCount(FI));
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:      double w = ignoreMissing(PI.getExecutionCount(BB));
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:  double TotalExecutions = 0;
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:    TotalExecutions += FunctionCounts[i].second;
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:  if (PIL.getNumExecutions() != 1) outs() << "s";
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:  for (unsigned i = 0, e = PIL.getNumExecutions(); i != e; ++i) {
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:    outs() << PIL.getExecution(i) << "\n";
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:      << format("%g", TotalExecutions) << " "
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:  TotalExecutions = 0;
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:    TotalExecutions += Counts[i].second;
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:      << format("%5g", Counts[i].second/(double)TotalExecutions*100) << "% "
/usr/local/src/s2e/./build/llvm-3.0.src/tools/llvm-prof/llvm-prof.cpp:      << format("%g", TotalExecutions) << "\t"
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:  PathDiagnosticLocation ExecutionContinues(const ExplodedNode *N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:  PathDiagnosticLocation ExecutionContinues(llvm::raw_string_ostream &os,
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:PathDiagnosticBuilder::ExecutionContinues(const ExplodedNode *N) {
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:PathDiagnosticBuilder::ExecutionContinues(llvm::raw_string_ostream &os,
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:  const PathDiagnosticLocation &Loc = ExecutionContinues(N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:    os << "Execution continues on line "
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:    os << "Execution jumps to the end of the ";
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:            const PathDiagnosticLocation &End = PDB.ExecutionContinues(os, N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:          PathDiagnosticLocation End = PDB.ExecutionContinues(os, N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:          PathDiagnosticLocation End = PDB.ExecutionContinues(N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:              PathDiagnosticLocation End = PDB.ExecutionContinues(N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:              PathDiagnosticLocation End = PDB.ExecutionContinues(N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:            PathDiagnosticLocation End = PDB.ExecutionContinues(os, N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:            PathDiagnosticLocation End = PDB.ExecutionContinues(N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:            PathDiagnosticLocation End = PDB.ExecutionContinues(os, N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:            PathDiagnosticLocation End = PDB.ExecutionContinues(N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:          PathDiagnosticLocation End = PDB.ExecutionContinues(N);
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/include/clang/Frontend/FrontendAction.h:  /// ExecutionAction() and EndSourceFileAction() will not be called.
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/include/clang/Frontend/FrontendAction.h:  /// \return True on success; on failure \see ExecutionAction() and
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/examples/clang-interpreter/main.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/examples/clang-interpreter/main.cpp:#include "llvm/ExecutionEngine/ExecutionEngine.h"
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/examples/clang-interpreter/main.cpp:  llvm::OwningPtr<llvm::ExecutionEngine> EE(
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/examples/clang-interpreter/main.cpp:    llvm::ExecutionEngine::createJIT(Mod, &Error));
/usr/local/src/s2e/./build/llvm-3.0.src/tools/clang/tools/libclang/CIndexer.h:  /// \brief Execution the given code "safely", using crash recovery or safety
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/ExecutionEngineTest.cpp://===- ExecutionEngineTest.cpp - Unit tests for ExecutionEngine -----------===//
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/ExecutionEngineTest.cpp:#include "llvm/ExecutionEngine/Interpreter.h"
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/ExecutionEngineTest.cpp:class ExecutionEngineTest : public testing::Test {
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/ExecutionEngineTest.cpp:  ExecutionEngineTest()
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/ExecutionEngineTest.cpp:  const OwningPtr<ExecutionEngine> Engine;
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/ExecutionEngineTest.cpp:TEST_F(ExecutionEngineTest, ForwardGlobalMapping) {
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/ExecutionEngineTest.cpp:TEST_F(ExecutionEngineTest, ReverseGlobalMapping) {
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/ExecutionEngineTest.cpp:TEST_F(ExecutionEngineTest, ClearModuleMappings) {
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/ExecutionEngineTest.cpp:TEST_F(ExecutionEngineTest, DestructionRemovesGlobalMapping) {
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/ExecutionEngineTest.cpp:  // When the GV goes away, the ExecutionEngine should remove any
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:#include "llvm/ExecutionEngine/JITMemoryManager.h"
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:  Module *M;  // Owned by ExecutionEngine.
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:  OwningPtr<ExecutionEngine> TheJIT;
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:  OwningPtr<ExecutionEngine> JIT(EngineBuilder(M)
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:// Returns a newly-created ExecutionEngine that reads the bitcode in 'Bitcode'
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:// lazily.  The associated Module (owned by the ExecutionEngine) is returned in
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:// ExecutionEngine.
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:ExecutionEngine *getJITFromBitcode(
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:  ExecutionEngine *TheJIT = EngineBuilder(M)
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:  OwningPtr<ExecutionEngine> TheJIT(getJITFromBitcode(Context, Bitcode, M));
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITTest.cpp:  OwningPtr<ExecutionEngine> TheJIT(getJITFromBitcode(Context, Bitcode, M));
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/MultiJITTest.cpp:#include "llvm/ExecutionEngine/GenericValue.h"
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/MultiJITTest.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/MultiJITTest.cpp:  OwningPtr<ExecutionEngine> EE1(EngineBuilder(M1).create());
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/MultiJITTest.cpp:  OwningPtr<ExecutionEngine> EE2(EngineBuilder(M2).create());
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/MultiJITTest.cpp:  OwningPtr<ExecutionEngine> EE1(EngineBuilder(M1).create());
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/MultiJITTest.cpp:  OwningPtr<ExecutionEngine> EE2(EngineBuilder(M2).create());
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/MultiJITTest.cpp:  OwningPtr<ExecutionEngine> EE1(EngineBuilder(M1).create());
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/MultiJITTest.cpp:  OwningPtr<ExecutionEngine> EE2(EngineBuilder(M2).create());
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITMemoryManagerTest.cpp:#include "llvm/ExecutionEngine/JITMemoryManager.h"
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITEventListenerTest.cpp:#include "llvm/ExecutionEngine/JITEventListener.h"
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITEventListenerTest.cpp:#include "llvm/ExecutionEngine/JIT.h"
/usr/local/src/s2e/./build/llvm-3.0.src/unittests/ExecutionEngine/JIT/JITEventListenerTest.cpp:  const OwningPtr<ExecutionEngine> EE;
s2e@ubuntu:~/dasos$ ./searchSource.sh ExecutionSignal
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:            delete static_cast<ExecutionSignal*>(s);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    tb->s2e_tb->executionSignals.push_back(new s2e::ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:            ExecutionSignal *signal, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:            ExecutionSignal *signal, S2EExecutionState* state, TranslationBlock* tb,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    void onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onTranslateBlockEnd(ExecutionSignal, S2EExecutionState, TranslationBlock, uint64_t, bool, uint64_t);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onFirstInstruction( ExecutionSignal* signal, S2EExecutionState* state, TranslationBlock* tb, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:typedef sigc::signal<void, S2EExecutionState*, uint64_t /* pc */> ExecutionSignal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.h:    void onTranslateInstruction(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.h:    void slotTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    void onTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:void CodeSelector::onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        ExecutionSignal *s = (ExecutionSignal*)signal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:static void s2e_tcg_instrument_code(S2E*, ExecutionSignal* signal, uint64_t pc, uint64_t nextpc=-1)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    void onTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.cpp:void Example::slotTranslateBlockStart(ExecutionSignal *signal, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:void RawMonitor::onTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.cpp:void SyscallTracker::onFirstInstruction( ExecutionSignal* signal, S2EExecutionState* state, TranslationBlock* tb, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:        ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    void onTranslateBlockStart(ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:void X86ExceptionInterceptor::onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:    ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:void CacheSim::onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.cpp:void InstructionTracker::onTranslateInstruction(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::slotTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::onTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:void LinuxSyscallMonitor::onTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:        ExecutionSignal *signal, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:             ExecutionSignal *signal, S2EExecutionState* state, TranslationBlock* tb,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void onTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	void onTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        ExecutionSignal *signal,
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ 
s2e@ubuntu:~/dasos$ ./searchSource.sh ExecutionSignal
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:            delete static_cast<ExecutionSignal*>(s);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    tb->s2e_tb->executionSignals.push_back(new s2e::ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:            ExecutionSignal *signal, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:            ExecutionSignal *signal, S2EExecutionState* state, TranslationBlock* tb,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    void onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onTranslateBlockEnd(ExecutionSignal, S2EExecutionState, TranslationBlock, uint64_t, bool, uint64_t);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onFirstInstruction( ExecutionSignal* signal, S2EExecutionState* state, TranslationBlock* tb, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:typedef sigc::signal<void, S2EExecutionState*, uint64_t /* pc */> ExecutionSignal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.h:    void onTranslateInstruction(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.h:    void slotTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    void onTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:void CodeSelector::onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        ExecutionSignal *s = (ExecutionSignal*)signal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:static void s2e_tcg_instrument_code(S2E*, ExecutionSignal* signal, uint64_t pc, uint64_t nextpc=-1)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    void onTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.cpp:void Example::slotTranslateBlockStart(ExecutionSignal *signal, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:void RawMonitor::onTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.cpp:void SyscallTracker::onFirstInstruction( ExecutionSignal* signal, S2EExecutionState* state, TranslationBlock* tb, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:        ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    void onTranslateBlockStart(ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:void X86ExceptionInterceptor::onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:    ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:void CacheSim::onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.cpp:void InstructionTracker::onTranslateInstruction(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::slotTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::onTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:void LinuxSyscallMonitor::onTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:        ExecutionSignal *signal, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:             ExecutionSignal *signal, S2EExecutionState* state, TranslationBlock* tb,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void onTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	void onTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        ExecutionSignal *signal,
s2e@ubuntu:~/dasos$ man grep
s2e@ubuntu:~/dasos$ vi searchSource.sh
s2e@ubuntu:~/dasos$ ./searchSource.sh ExecutionSignal
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:            delete static_cast<ExecutionSignal*>(s);
/usr/local/src/s2e/./s2e/qemu/s2e/S2EExecutor.cpp:    tb->s2e_tb->executionSignals.push_back(new s2e::ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:    void onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:            ExecutionSignal *signal, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.h:            ExecutionSignal *signal, S2EExecutionState* state, TranslationBlock* tb,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:    void onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onTranslateBlockEnd(ExecutionSignal, S2EExecutionState, TranslationBlock, uint64_t, bool, uint64_t);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.h:    void onFirstInstruction( ExecutionSignal* signal, S2EExecutionState* state, TranslationBlock* tb, uint64_t pc);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:typedef sigc::signal<void, S2EExecutionState*, uint64_t /* pc */> ExecutionSignal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:                 ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.h:    sigc::signal<void, ExecutionSignal*,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.h:    void onTranslateInstruction(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.h:    void slotTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.h:    void onTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:void CodeSelector::onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        ExecutionSignal *s = (ExecutionSignal*)signal;
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:static void s2e_tcg_instrument_code(S2E*, ExecutionSignal* signal, uint64_t pc, uint64_t nextpc=-1)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:        tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:    ExecutionSignal *signal = static_cast<ExecutionSignal*>(
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CorePlugin.cpp:            tb->s2e_tb->executionSignals.push_back(new ExecutionSignal);
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ExecutionTracers/InstructionCounter.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.h:    void onTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Example.cpp:void Example::slotTranslateBlockStart(ExecutionSignal *signal, 
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.h:    void slotTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StateManager.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Searchers/MaxTbSearcher.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/FunctionMonitor.cpp:void FunctionMonitor::slotTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/RawMonitor.cpp:void RawMonitor::onTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CodeSelector.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.h:            ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Debugger.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/SyscallTracker.cpp:void SyscallTracker::onFirstInstruction( ExecutionSignal* signal, S2EExecutionState* state, TranslationBlock* tb, uint64_t pc)
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:        ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.h:    void onTranslateBlockStart(ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/X86ExceptionInterceptor.cpp:void X86ExceptionInterceptor::onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:    ExecutionSignal* signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/CacheSim.cpp:void CacheSim::onTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InstructionTracker.cpp:void InstructionTracker::onTranslateInstruction(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/EdgeKiller.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::slotTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.cpp:void InterruptMonitor::onTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:void LinuxSyscallMonitor::onTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:void StackMonitor::onModuleTranslateBlockStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:        ExecutionSignal *signal, S2EExecutionState* state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/StackMonitor.cpp:             ExecutionSignal *signal, S2EExecutionState* state, TranslationBlock* tb,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void slotTranslateBlockEnd(ExecutionSignal*, S2EExecutionState *state,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/InterruptMonitor.h:	void onTranslateJumpStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/Annotation.cpp:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.h:    void slotTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.cpp:void WindowsMonitor::slotTranslateInstructionStart(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.h:        ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.h:	void onTranslateBlockEnd(ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:    ExecutionSignal *signal,
/usr/local/src/s2e/./s2e/qemu/s2e/Plugins/ModuleExecutionDetector.cpp:        ExecutionSignal *signal,
s2e@ubuntu:~/dasos$ ls
buildPluginsQuick.sh  buildPlugins.sh  InstructionTracker  PluginsDir  PluginsMakefile  PluginsMakefile~  PluginsReadme.txt  PluginsReadme.txt~  Run  searchSource.sh  SyscallTracker
s2e@ubuntu:~/dasos$ cd SyscallTracker/
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPluginsQuick.sh 
  CXX   i386-s2e-softmmu/s2e/Plugin.o
In file included from /usr/local/src/s2e/s2e/qemu/s2e/Plugin.cpp:45:
In file included from /usr/local/src/s2e/s2e/qemu/s2e/Plugins/SyscallTracker.h:10:
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/syscallent-simple.h:33:2: error: expected unqualified-id
        { 0,    0,      "restart_syscall" }, /* 0 */
        ^
1 error generated.
make[1]: *** [s2e/Plugin.o] Error 1
make: *** [subdir-i386-s2e-softmmu] Error 2
s2e@ubuntu:~/dasos/SyscallTracker$ ./pushCode.sh 
`InterruptMonitor.cpp' -> `../PluginsDir/./InterruptMonitor.cpp'
`InterruptMonitor.h' -> `../PluginsDir/./InterruptMonitor.h'
`LinuxSyscallMonitor.cpp' -> `../PluginsDir/./LinuxSyscallMonitor.cpp'
`LinuxSyscallMonitor.h' -> `../PluginsDir/./LinuxSyscallMonitor.h'
`SyscallTracker.cpp' -> `../PluginsDir/./SyscallTracker.cpp'
`SyscallTracker.h' -> `../PluginsDir/./SyscallTracker.h'
`syscallent-simple.h' -> `../PluginsDir/./syscallent-simple.h'
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPluginsQuick.sh 
  CXX   i386-s2e-softmmu/s2e/Plugin.o
  CXX   i386-s2e-softmmu/s2e/Plugins/CorePlugin.o
  CXX   i386-s2e-softmmu/s2e/Plugins/ModuleExecutionDetector.o
  CXX   i386-s2e-softmmu/s2e/Plugins/CodeSelector.o
  CXX   i386-s2e-softmmu/s2e/Plugins/RawMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/FunctionMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/StackMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/LibraryCallMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/BaseInstructions.o
  CXX   i386-s2e-softmmu/s2e/Plugins/X86ExceptionInterceptor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsInterceptor/WindowsMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsInterceptor/BlueScreenInterceptor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsInterceptor/WindowsCrashDumpGenerator.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsInterceptor/UserModeInterceptor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsInterceptor/KernelModeInterceptor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsApi/NdisHandlers.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsApi/NdisHandlersUtils.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsApi/NdisMemoryCheck.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsApi/NdisProtocolHandlers.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsApi/NtoskrnlHandlers.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsApi/HalHandlers.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsApi/Api.o
  CXX   i386-s2e-softmmu/s2e/Plugins/WindowsApi/WindowsDriverExerciser.o
  CXX   i386-s2e-softmmu/s2e/Plugins/InterruptMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/LinuxSyscallMonitor.o
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/LinuxSyscallMonitor.cpp:197:15: error: unused variable 'cr3' [-Werror,-Wunused-variable]
        target_ulong cr3 = state->readCpuState(CPU_OFFSET(cr[3]), sizeof(target_ulong) * 8);
                     ^
1 error generated.
make[1]: *** [s2e/Plugins/LinuxSyscallMonitor.o] Error 1
make: *** [subdir-i386-s2e-softmmu] Error 2
s2e@ubuntu:~/dasos/SyscallTracker$ ./pushCode.sh 
`InterruptMonitor.cpp' -> `../PluginsDir/./InterruptMonitor.cpp'
`InterruptMonitor.h' -> `../PluginsDir/./InterruptMonitor.h'
`LinuxSyscallMonitor.cpp' -> `../PluginsDir/./LinuxSyscallMonitor.cpp'
`LinuxSyscallMonitor.h' -> `../PluginsDir/./LinuxSyscallMonitor.h'
`SyscallTracker.cpp' -> `../PluginsDir/./SyscallTracker.cpp'
`SyscallTracker.h' -> `../PluginsDir/./SyscallTracker.h'
`syscallent-simple.h' -> `../PluginsDir/./syscallent-simple.h'
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPluginsQuick.sh 
  CXX   i386-s2e-softmmu/s2e/Plugin.o
  CXX   i386-s2e-softmmu/s2e/Plugins/InterruptMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/LinuxSyscallMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/SyscallTracker.o
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/SyscallTracker.cpp:32:16: error: non-const lvalue reference to type 'std::ostream' (aka 'basic_ostream<char>') cannot bind to a value of unrelated type 'llvm::raw_ostream'
        std::ostream& stream =  s2e()->getDebugStream();
                      ^         ~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.
make[1]: *** [s2e/Plugins/SyscallTracker.o] Error 1
make: *** [subdir-i386-s2e-softmmu] Error 2
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPluginsQuick.sh 
  CXX   i386-s2e-softmmu/s2e/Plugins/SyscallTracker.o
/usr/local/src/s2e/s2e/qemu/s2e/Plugins/SyscallTracker.cpp:32:16: error: non-const lvalue reference to type 'std::ostream' (aka 'basic_ostream<char>') cannot bind to a value of unrelated type 'llvm::raw_ostream'
        std::ostream& stream =  s2e()->getDebugStream();
                      ^         ~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.
make[1]: *** [s2e/Plugins/SyscallTracker.o] Error 1
make: *** [subdir-i386-s2e-softmmu] Error 2
s2e@ubuntu:~/dasos/SyscallTracker$ ./pushCode.sh 
`InterruptMonitor.cpp' -> `../PluginsDir/./InterruptMonitor.cpp'
`InterruptMonitor.h' -> `../PluginsDir/./InterruptMonitor.h'
`LinuxSyscallMonitor.cpp' -> `../PluginsDir/./LinuxSyscallMonitor.cpp'
`LinuxSyscallMonitor.h' -> `../PluginsDir/./LinuxSyscallMonitor.h'
`SyscallTracker.cpp' -> `../PluginsDir/./SyscallTracker.cpp'
`SyscallTracker.h' -> `../PluginsDir/./SyscallTracker.h'
`syscallent-simple.h' -> `../PluginsDir/./syscallent-simple.h'
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPluginsQuick.sh 
  CXX   i386-s2e-softmmu/s2e/Plugin.o
  CXX   i386-s2e-softmmu/s2e/Plugins/InterruptMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/LinuxSyscallMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/SyscallTracker.o
  CXX   i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/ExecutionTracer.o
  CXX   i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/ModuleTracer.o
  CXX   i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/EventTracer.o
  CXX   i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/TestCaseGenerator.o
  CXX   i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/MemoryTracer.o
  CXX   i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/InstructionCounter.o
  CXX   i386-s2e-softmmu/s2e/Plugins/ExecutionTracers/TranslationBlockTracer.o
  CXX   i386-s2e-softmmu/s2e/Plugins/CacheSim.o
  CXX   i386-s2e-softmmu/s2e/Plugins/Debugger.o
  CXX   i386-s2e-softmmu/s2e/Plugins/SymbolicHardware.o
  CXX   i386-s2e-softmmu/s2e/Plugins/StateManager.o
  CXX   i386-s2e-softmmu/s2e/Plugins/Annotation.o
  CXX   i386-s2e-softmmu/s2e/Plugins/Searchers/MaxTbSearcher.o
  CXX   i386-s2e-softmmu/s2e/Plugins/Searchers/CooperativeSearcher.o
  CXX   i386-s2e-softmmu/s2e/Plugins/Searchers/ConcolicDFSSearcher.o
  CXX   i386-s2e-softmmu/s2e/Plugins/HostFiles.o
  CXX   i386-s2e-softmmu/s2e/Plugins/MemoryChecker.o
  CXX   i386-s2e-softmmu/s2e/Plugins/StackChecker.o
  CXX   i386-s2e-softmmu/s2e/ConfigFile.o
  CXX   i386-s2e-softmmu/s2e/S2EExecutor.o
  CXX   i386-s2e-softmmu/s2e/MMUFunctionHandlers.o
  CXX   i386-s2e-softmmu/s2e/S2EExecutionState.o
  CXX   i386-s2e-softmmu/s2e/S2EDeviceState.o
  CXX   i386-s2e-softmmu/s2e/S2E.o
  LINK  i386-s2e-softmmu/qemu-system-i386
  LLVMCC    i386-s2e-softmmu/op_helper.bc
  GEN   config-target.h
  CC    i386-softmmu/arch_init.o
  CC    i386-softmmu/cpus.o
  CC    i386-softmmu/monitor.o
  CC    i386-softmmu/machine.o
  CC    i386-softmmu/gdbstub.o
  CC    i386-softmmu/balloon.o
  CC    i386-softmmu/ioport.o
  CC    i386-softmmu/virtio.o
  CC    i386-softmmu/virtio-blk.o
  CC    i386-softmmu/virtio-balloon.o
  CC    i386-softmmu/virtio-net.o
  CC    i386-softmmu/virtio-serial-bus.o
  CC    i386-softmmu/virtio-scsi.o
  CC    i386-softmmu/vhost_net.o
  CC    i386-softmmu/vhost.o
  CC    i386-softmmu/kvm.o
  CC    i386-softmmu/kvm-all.o
  CC    i386-softmmu/vga.o
  CC    i386-softmmu/memory.o
  CC    i386-softmmu/savevm.o
  CC    i386-softmmu/xen-stub.o
  CC    i386-softmmu/ivshmem.o
  CC    i386-softmmu/device-hotplug.o
  CC    i386-softmmu/exec.o
  CC    i386-softmmu/translate-all.o
  CC    i386-softmmu/cpu-exec.o
  CC    i386-softmmu/translate.o
  CC    i386-softmmu/tcg/tcg.o
  CC    i386-softmmu/tcg/optimize.o
  CXX   i386-softmmu/tcg/tcg-llvm.o
  CC    i386-softmmu/op_helper.o
  CC    i386-softmmu/helper.o
  CC    i386-softmmu/cpuid.o
  CC    i386-softmmu/disas.o
  CC    i386-softmmu/hyperv.o
  CC    i386-softmmu/vl.o
  CC    i386-softmmu/pci.o
  CC    i386-softmmu/mc146818rtc.o
  CC    i386-softmmu/pc.o
  CC    i386-softmmu/apic_common.o
  CC    i386-softmmu/apic.o
  CC    i386-softmmu/kvmvapic.o
  CC    i386-softmmu/sga.o
  CC    i386-softmmu/ioapic_common.o
  CC    i386-softmmu/ioapic.o
  CC    i386-softmmu/piix_pci.o
  CC    i386-softmmu/vmport.o
  CC    i386-softmmu/pci-hotplug.o
  CC    i386-softmmu/smbios.o
  CC    i386-softmmu/wdt_ib700.o
  CC    i386-softmmu/debugcon.o
  CC    i386-softmmu/multiboot.o
  CC    i386-softmmu/pc_piix.o
  CC    i386-softmmu/pc_sysfw.o
  CC    i386-softmmu/kvm/clock.o
  CC    i386-softmmu/kvm/apic.o
  CC    i386-softmmu/kvm/i8259.o
  CC    i386-softmmu/kvm/ioapic.o
  CC    i386-softmmu/kvm/i8254.o
  LINK  i386-softmmu/qemu-system-i386
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPlugins.sh 
cp -Rup /usr/local/src/s2e/build/../s2e/stp stp
cd stp && make -j1
make[1]: Entering directory `/usr/local/src/s2e/build/stp'
make -C src/AST 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/AST'
make[2]: `libast.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/AST'
make -C src/main 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/main'
make[2]: `libmain.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/main'
make -C src/STPManager 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/STPManager'
make[2]: `libstpmgr.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/STPManager'
make -C src/printer 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/printer'
make[2]: `libprinter.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/printer'
make -C src/absrefine_counterexample 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/absrefine_counterexample'
make[2]: `libabstractionrefinement.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/absrefine_counterexample'
make -C src/to-sat 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/to-sat'
make[2]: `libtosat.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/to-sat'
make -C src/sat core
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/sat'
make -C core libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/core'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/core'
make -C core_prop libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/core_prop'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/core_prop'
make -C simp libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/simp'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/simp'
make -C utils libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/utils'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/utils'
make -C cryptominisat2 lib all
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/cryptominisat2'
make[3]: Nothing to be done for `lib'.
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/cryptominisat2'
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat'
make -C src/simplifier 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/simplifier'
make[2]: `libsimplifier.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/simplifier'
make -C src/extlib-constbv 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/extlib-constbv'
make[2]: `libconstantbv.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/extlib-constbv'
make -C src/extlib-abc 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/extlib-abc'
make[2]: `libabc.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/extlib-abc'
make -C src/c_interface 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/c_interface'
make[2]: `libcinterface.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/c_interface'
make -C src/parser 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/parser'
make[2]: `libparser.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/parser'

Compilation successful.
Type 'make install' to install STP.
make[1]: Leaving directory `/usr/local/src/s2e/build/stp'
mkdir -p stamps && touch stamps/stp-make
cd klee && make ENABLE_OPTIMIZED=1 -j1
make[1]: Entering directory `/usr/local/src/s2e/build/klee'
make[2]: Entering directory `/usr/local/src/s2e/build/klee/lib'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Basic'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Basic'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Support'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Support'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Expr'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Expr'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Solver'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Solver'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Module'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Module'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Core'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Core'
make[2]: Leaving directory `/usr/local/src/s2e/build/klee/lib'
make[2]: Entering directory `/usr/local/src/s2e/build/klee/tools'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/klee-config'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/klee-config'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/kleaver'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/kleaver'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/ktest-tool'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/ktest-tool'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/gen-random-bout'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/gen-random-bout'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/klee-stats'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/klee-stats'
make[2]: Leaving directory `/usr/local/src/s2e/build/klee/tools'
make[1]: Leaving directory `/usr/local/src/s2e/build/klee'
mkdir -p stamps && touch stamps/klee-make-release
mkdir -p qemu-release
cd qemu-release && /usr/local/src/s2e/build/../s2e/qemu/configure \
		--prefix=/usr/local/src/s2e/build/opt \
		--with-llvm=/usr/local/src/s2e/build/llvm/Release+Asserts  \
		--with-clang=/usr/local/src/s2e/build/llvm-native/Release/bin/clang \
		--with-stp=/usr/local/src/s2e/build/stp \
		--with-klee=/usr/local/src/s2e/build/klee/Release+Asserts \
		--target-list=i386-s2e-softmmu,i386-softmmu \
		--enable-llvm \
		--enable-s2e --compile-all-with-clang \
                
cc1plus: warning: command line option "-Wstrict-prototypes" is valid for Ada/C/ObjC but not for C++
cc1plus: warning: command line option "-Wmissing-prototypes" is valid for Ada/C/ObjC but not for C++
Install prefix    /usr/local/src/s2e/build/opt
BIOS directory    /usr/local/src/s2e/build/opt/share/qemu
binary directory  /usr/local/src/s2e/build/opt/bin
library directory /usr/local/src/s2e/build/opt/lib
include directory /usr/local/src/s2e/build/opt/include
config directory  /usr/local/src/s2e/build/opt/etc
Manual directory  /usr/local/src/s2e/build/opt/share/man
ELF interp prefix /usr/gnemul/qemu-%M
Source path       /usr/local/src/s2e/s2e/qemu
C compiler        gcc
C++ compiler      g++
ASAN C compiler   
ASAN C++ compiler 
Host C compiler   gcc
CFLAGS            -O2 -g -g 
CXXFLAGS          -Wno-mismatched-tags -g 
QEMU_CFLAGS       -Werror -fPIE -DPIE -m64 -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -Wstrict-prototypes -Wredundant-decls -Wall -Wundef -Wwrite-strings -Wmissing-prototypes -fno-strict-aliasing  -fstack-protector-all -Wendif-labels -Wmissing-include-dirs -Wempty-body -Wformat-security -Wformat-y2k -Winit-self -Wignored-qualifiers -Wtype-limits -I/usr/include/libpng12  
QEMU_CCFLAGS      
QEMU_CXXFLAGS     
External plugins  
LDFLAGS           -Wl,--warn-common -Wl,-z,relro -Wl,-z,now -pie -m64 -g -g 
make              make
install           install
python            python
smbd              /usr/sbin/smbd
host CPU          x86_64
host big endian   no
target list       i386-s2e-softmmu i386-softmmu
tcg debug enabled no
Mon debug enabled no
gprof enabled     no
sparse enabled    no
strip binaries    yes
profiler          no
static build      no
-Werror enabled   yes
SDL support       yes
curses support    yes
curl support      no
mingw32 support   no
Audio drivers     oss
Extra audio cards ac97 es1370 sb16 hda
Block whitelist   
Mixer emulation   no
VirtFS support    
VNC support       yes
VNC TLS support   yes
VNC SASL support  yes
VNC JPEG support  no
VNC PNG support   yes
VNC thread        no
xen support       no
brlapi support    no
bluez  support    no
Documentation     yes
NPTL support      yes
GUEST_BASE        yes
PIE               yes
vde support       no
Linux AIO support yes
ATTR/XATTR support yes
Install blobs     yes
LLVM support      yes
S2E targets       yes
KVM support       yes
TCG interpreter   no
fdt support       no
preadv support    yes
fdatasync         yes
madvise           yes
posix_madvise     yes
uuid support      yes
libcap-ng support no
vhost-net support yes
Trace backend     nop
Trace output file trace-<pid>
spice support     no
rbd support       no
xfsctl support    no
nss used          no
usb net redir     no
OpenGL support    yes
libiscsi support  no
build guest agent yes
coroutine backend ucontext
mkdir -p stamps && touch stamps/qemu-configure-release
cd qemu-release && make -j1
make[1]: Entering directory `/usr/local/src/s2e/build/qemu-release'
  GEN   config-host.h
  GEN   trace.h
  GEN   trace.c
  GEN   config-target.h
  GEN   config-target.h
make[1]: Leaving directory `/usr/local/src/s2e/build/qemu-release'
mkdir -p stamps && touch stamps/qemu-make-release
cd tools && make ENABLE_OPTIMIZED=1 REQUIRES_RTTI=1 -j1
make[1]: Entering directory `/usr/local/src/s2e/build/tools'
make[2]: Entering directory `/usr/local/src/s2e/build/tools/lib'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/lib/ExecutionTracer'
llvm[3]: Compiling CacheProfiler.cpp for Release+Asserts build
llvm[3]: Compiling InstructionCounter.cpp for Release+Asserts build
llvm[3]: Compiling LogParser.cpp for Release+Asserts build
llvm[3]: Compiling ModuleParser.cpp for Release+Asserts build
llvm[3]: Compiling PageFault.cpp for Release+Asserts build
llvm[3]: Compiling PathBuilder.cpp for Release+Asserts build
llvm[3]: Compiling TestCase.cpp for Release+Asserts build
llvm[3]: Building Release+Asserts Archive Library libexecutiontracer.a
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/lib/ExecutionTracer'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/lib/BinaryReaders'
llvm[3]: Compiling Library.cpp for Release+Asserts build
llvm[3]: Building Release+Asserts Archive Library libbinaryreaders.a
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/lib/BinaryReaders'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/lib/Utils'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/lib/Utils'
make[2]: Leaving directory `/usr/local/src/s2e/build/tools/lib'
make[2]: Entering directory `/usr/local/src/s2e/build/tools/tools'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/tbtrace'
llvm[3]: Compiling TbTrace.cpp for Release+Asserts build
llvm[3]: Linking Release+Asserts executable tbtrace (without symbols)
llvm[3]: ======= Finished Linking Release+Asserts Executable tbtrace (without symbols)
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/tbtrace'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/coverage'
llvm[3]: Compiling Coverage.cpp for Release+Asserts build
llvm[3]: Linking Release+Asserts executable coverage (without symbols)
llvm[3]: ======= Finished Linking Release+Asserts Executable coverage (without symbols)
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/coverage'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/debugger'
llvm[3]: Compiling Debugger.cpp for Release+Asserts build
llvm[3]: Linking Release+Asserts executable debugger (without symbols)
llvm[3]: ======= Finished Linking Release+Asserts Executable debugger (without symbols)
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/debugger'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/s2etools-config'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/s2etools-config'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/forkprofiler'
llvm[3]: Compiling forkprofiler.cpp for Release+Asserts build
llvm[3]: Linking Release+Asserts executable forkprofiler (without symbols)
llvm[3]: ======= Finished Linking Release+Asserts Executable forkprofiler (without symbols)
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/forkprofiler'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/icounter'
llvm[3]: Compiling icounter.cpp for Release+Asserts build
llvm[3]: Linking Release+Asserts executable icounter (without symbols)
llvm[3]: ======= Finished Linking Release+Asserts Executable icounter (without symbols)
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/icounter'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/cacheprof'
llvm[3]: Compiling cacheprof.cpp for Release+Asserts build
llvm[3]: Linking Release+Asserts executable cacheprof (without symbols)
llvm[3]: ======= Finished Linking Release+Asserts Executable cacheprof (without symbols)
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/cacheprof'
make[2]: Leaving directory `/usr/local/src/s2e/build/tools/tools'
make[1]: Leaving directory `/usr/local/src/s2e/build/tools'
mkdir -p stamps && touch stamps/tools-make-release
s2e@ubuntu:~/dasos/SyscallTracker$ ls
20120209-LinuxSyscallMonitor.patch  InterruptMonitor.cpp   InterruptMonitor.h   LinuxSyscallMonitor.cpp   LinuxSyscallMonitor.h  pushCode.sh            syscallent.h         SyscallTracker.cpp   SyscallTracker.h   transform-syscallent.sh
conf-SyscallTracker.lua             InterruptMonitor.cpp~  InterruptMonitor.h~  LinuxSyscallMonitor.cpp~  old                    runS2E-SyscallTracker  syscallent-simple.h  SyscallTracker.cpp~  SyscallTracker.h~
s2e@ubuntu:~/dasos/SyscallTracker$ ./runS2E-SyscallTracker 
S2E: output directory = "/home/s2e/dasos/SyscallTracker/s2e-out-0"
WARNING: Linking two modules of different data layouts!
ERROR: plugin 'SyscallTracker' with function 'LinuxSyscallMonitor' can not be loaded because
    this function is already provided by 'LinuxSyscallMonitor' plugin
s2e@ubuntu:~/dasos/SyscallTracker$ ./pushCode.sh 
`InterruptMonitor.cpp' -> `../PluginsDir/./InterruptMonitor.cpp'
`InterruptMonitor.h' -> `../PluginsDir/./InterruptMonitor.h'
`LinuxSyscallMonitor.cpp' -> `../PluginsDir/./LinuxSyscallMonitor.cpp'
`LinuxSyscallMonitor.h' -> `../PluginsDir/./LinuxSyscallMonitor.h'
`SyscallTracker.cpp' -> `../PluginsDir/./SyscallTracker.cpp'
`SyscallTracker.h' -> `../PluginsDir/./SyscallTracker.h'
`syscallent-simple.h' -> `../PluginsDir/./syscallent-simple.h'
s2e@ubuntu:~/dasos/SyscallTracker$ ../buildPlugins.sh 
cp -Rup /usr/local/src/s2e/build/../s2e/stp stp
cd stp && make -j1
make[1]: Entering directory `/usr/local/src/s2e/build/stp'
make -C src/AST 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/AST'
make[2]: `libast.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/AST'
make -C src/main 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/main'
make[2]: `libmain.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/main'
make -C src/STPManager 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/STPManager'
make[2]: `libstpmgr.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/STPManager'
make -C src/printer 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/printer'
make[2]: `libprinter.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/printer'
make -C src/absrefine_counterexample 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/absrefine_counterexample'
make[2]: `libabstractionrefinement.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/absrefine_counterexample'
make -C src/to-sat 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/to-sat'
make[2]: `libtosat.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/to-sat'
make -C src/sat core
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/sat'
make -C core libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/core'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/core'
make -C core_prop libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/core_prop'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/core_prop'
make -C simp libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/simp'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/simp'
make -C utils libr
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/utils'
Making Soft Link: lib_release.a -> lib.a
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/utils'
make -C cryptominisat2 lib all
make[3]: Entering directory `/usr/local/src/s2e/build/stp/src/sat/cryptominisat2'
make[3]: Nothing to be done for `lib'.
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat/cryptominisat2'
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/sat'
make -C src/simplifier 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/simplifier'
make[2]: `libsimplifier.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/simplifier'
make -C src/extlib-constbv 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/extlib-constbv'
make[2]: `libconstantbv.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/extlib-constbv'
make -C src/extlib-abc 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/extlib-abc'
make[2]: `libabc.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/extlib-abc'
make -C src/c_interface 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/c_interface'
make[2]: `libcinterface.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/c_interface'
make -C src/parser 
make[2]: Entering directory `/usr/local/src/s2e/build/stp/src/parser'
make[2]: `libparser.a' is up to date.
make[2]: Leaving directory `/usr/local/src/s2e/build/stp/src/parser'

Compilation successful.
Type 'make install' to install STP.
make[1]: Leaving directory `/usr/local/src/s2e/build/stp'
mkdir -p stamps && touch stamps/stp-make
cd klee && make ENABLE_OPTIMIZED=1 -j1
make[1]: Entering directory `/usr/local/src/s2e/build/klee'
make[2]: Entering directory `/usr/local/src/s2e/build/klee/lib'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Basic'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Basic'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Support'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Support'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Expr'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Expr'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Solver'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Solver'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Module'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Module'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/lib/Core'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/lib/Core'
make[2]: Leaving directory `/usr/local/src/s2e/build/klee/lib'
make[2]: Entering directory `/usr/local/src/s2e/build/klee/tools'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/klee-config'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/klee-config'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/kleaver'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/kleaver'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/ktest-tool'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/ktest-tool'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/gen-random-bout'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/gen-random-bout'
make[3]: Entering directory `/usr/local/src/s2e/build/klee/tools/klee-stats'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/klee/tools/klee-stats'
make[2]: Leaving directory `/usr/local/src/s2e/build/klee/tools'
make[1]: Leaving directory `/usr/local/src/s2e/build/klee'
mkdir -p stamps && touch stamps/klee-make-release
mkdir -p qemu-release
cd qemu-release && /usr/local/src/s2e/build/../s2e/qemu/configure \
		--prefix=/usr/local/src/s2e/build/opt \
		--with-llvm=/usr/local/src/s2e/build/llvm/Release+Asserts  \
		--with-clang=/usr/local/src/s2e/build/llvm-native/Release/bin/clang \
		--with-stp=/usr/local/src/s2e/build/stp \
		--with-klee=/usr/local/src/s2e/build/klee/Release+Asserts \
		--target-list=i386-s2e-softmmu,i386-softmmu \
		--enable-llvm \
		--enable-s2e --compile-all-with-clang \
                
cc1plus: warning: command line option "-Wstrict-prototypes" is valid for Ada/C/ObjC but not for C++
cc1plus: warning: command line option "-Wmissing-prototypes" is valid for Ada/C/ObjC but not for C++
Install prefix    /usr/local/src/s2e/build/opt
BIOS directory    /usr/local/src/s2e/build/opt/share/qemu
binary directory  /usr/local/src/s2e/build/opt/bin
library directory /usr/local/src/s2e/build/opt/lib
include directory /usr/local/src/s2e/build/opt/include
config directory  /usr/local/src/s2e/build/opt/etc
Manual directory  /usr/local/src/s2e/build/opt/share/man
ELF interp prefix /usr/gnemul/qemu-%M
Source path       /usr/local/src/s2e/s2e/qemu
C compiler        gcc
C++ compiler      g++
ASAN C compiler   
ASAN C++ compiler 
Host C compiler   gcc
CFLAGS            -O2 -g -g 
CXXFLAGS          -Wno-mismatched-tags -g 
QEMU_CFLAGS       -Werror -fPIE -DPIE -m64 -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -Wstrict-prototypes -Wredundant-decls -Wall -Wundef -Wwrite-strings -Wmissing-prototypes -fno-strict-aliasing  -fstack-protector-all -Wendif-labels -Wmissing-include-dirs -Wempty-body -Wformat-security -Wformat-y2k -Winit-self -Wignored-qualifiers -Wtype-limits -I/usr/include/libpng12  
QEMU_CCFLAGS      
QEMU_CXXFLAGS     
External plugins  
LDFLAGS           -Wl,--warn-common -Wl,-z,relro -Wl,-z,now -pie -m64 -g -g 
make              make
install           install
python            python
smbd              /usr/sbin/smbd
host CPU          x86_64
host big endian   no
target list       i386-s2e-softmmu i386-softmmu
tcg debug enabled no
Mon debug enabled no
gprof enabled     no
sparse enabled    no
strip binaries    yes
profiler          no
static build      no
-Werror enabled   yes
SDL support       yes
curses support    yes
curl support      no
mingw32 support   no
Audio drivers     oss
Extra audio cards ac97 es1370 sb16 hda
Block whitelist   
Mixer emulation   no
VirtFS support    
VNC support       yes
VNC TLS support   yes
VNC SASL support  yes
VNC JPEG support  no
VNC PNG support   yes
VNC thread        no
xen support       no
brlapi support    no
bluez  support    no
Documentation     yes
NPTL support      yes
GUEST_BASE        yes
PIE               yes
vde support       no
Linux AIO support yes
ATTR/XATTR support yes
Install blobs     yes
LLVM support      yes
S2E targets       yes
KVM support       yes
TCG interpreter   no
fdt support       no
preadv support    yes
fdatasync         yes
madvise           yes
posix_madvise     yes
uuid support      yes
libcap-ng support no
vhost-net support yes
Trace backend     nop
Trace output file trace-<pid>
spice support     no
rbd support       no
xfsctl support    no
nss used          no
usb net redir     no
OpenGL support    yes
libiscsi support  no
build guest agent yes
coroutine backend ucontext
mkdir -p stamps && touch stamps/qemu-configure-release
cd qemu-release && make -j1
make[1]: Entering directory `/usr/local/src/s2e/build/qemu-release'
  GEN   config-host.h
  GEN   trace.h
  GEN   trace.c
  GEN   config-target.h
  CXX   i386-s2e-softmmu/s2e/Plugin.o
  CXX   i386-s2e-softmmu/s2e/Plugins/InterruptMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/LinuxSyscallMonitor.o
  CXX   i386-s2e-softmmu/s2e/Plugins/SyscallTracker.o
  LINK  i386-s2e-softmmu/qemu-system-i386
  GEN   config-target.h
make[1]: Leaving directory `/usr/local/src/s2e/build/qemu-release'
mkdir -p stamps && touch stamps/qemu-make-release
cd tools && make ENABLE_OPTIMIZED=1 REQUIRES_RTTI=1 -j1
make[1]: Entering directory `/usr/local/src/s2e/build/tools'
make[2]: Entering directory `/usr/local/src/s2e/build/tools/lib'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/lib/ExecutionTracer'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/lib/ExecutionTracer'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/lib/BinaryReaders'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/lib/BinaryReaders'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/lib/Utils'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/lib/Utils'
make[2]: Leaving directory `/usr/local/src/s2e/build/tools/lib'
make[2]: Entering directory `/usr/local/src/s2e/build/tools/tools'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/tbtrace'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/tbtrace'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/coverage'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/coverage'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/debugger'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/debugger'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/s2etools-config'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/s2etools-config'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/forkprofiler'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/forkprofiler'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/icounter'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/icounter'
make[3]: Entering directory `/usr/local/src/s2e/build/tools/tools/cacheprof'
make[3]: Nothing to be done for `all'.
make[3]: Leaving directory `/usr/local/src/s2e/build/tools/tools/cacheprof'
make[2]: Leaving directory `/usr/local/src/s2e/build/tools/tools'
make[1]: Leaving directory `/usr/local/src/s2e/build/tools'
mkdir -p stamps && touch stamps/tools-make-release
s2e@ubuntu:~/dasos/SyscallTracker$ locate qcow
/usr/local/src/s2e/build/qemu-release/block/qcow.d
/usr/local/src/s2e/build/qemu-release/block/qcow.o
/usr/local/src/s2e/build/qemu-release/block/qcow2-cache.d
/usr/local/src/s2e/build/qemu-release/block/qcow2-cache.o
/usr/local/src/s2e/build/qemu-release/block/qcow2-cluster.d
/usr/local/src/s2e/build/qemu-release/block/qcow2-cluster.o
/usr/local/src/s2e/build/qemu-release/block/qcow2-refcount.d
/usr/local/src/s2e/build/qemu-release/block/qcow2-refcount.o
/usr/local/src/s2e/build/qemu-release/block/qcow2-snapshot.d
/usr/local/src/s2e/build/qemu-release/block/qcow2-snapshot.o
/usr/local/src/s2e/build/qemu-release/block/qcow2.d
/usr/local/src/s2e/build/qemu-release/block/qcow2.o
/usr/local/src/s2e/s2e/qemu/block/qcow.c
/usr/local/src/s2e/s2e/qemu/block/qcow2-cache.c
/usr/local/src/s2e/s2e/qemu/block/qcow2-cluster.c
/usr/local/src/s2e/s2e/qemu/block/qcow2-refcount.c
/usr/local/src/s2e/s2e/qemu/block/qcow2-snapshot.c
/usr/local/src/s2e/s2e/qemu/block/qcow2.c
/usr/local/src/s2e/s2e/qemu/block/qcow2.h
/usr/local/src/s2e/s2e/qemu/docs/specs/qcow2.txt
s2e@ubuntu:~/dasos/SyscallTracker$ locate *.qcow2
s2e@ubuntu:~/dasos/SyscallTracker$ df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/sda1             9.4G  6.7G  2.3G  75% /
none                  998M  168K  998M   1% /dev
none                 1005M  176K 1004M   1% /dev/shm
none                 1005M   92K 1005M   1% /var/run
none                 1005M     0 1005M   0% /var/lock
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e//build/qemu-release/qemu-img create -f raw s2e_disk.raw 2G
Formatting 's2e_disk.raw', fmt=raw size=2147483648 
s2e@ubuntu:~/dasos/SyscallTracker$ df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/sda1             9.4G  6.7G  2.3G  75% /
none                  998M  168K  998M   1% /dev
none                 1005M  176K 1004M   1% /dev/shm
none                 1005M   92K 1005M   1% /var/run
none                 1005M     0 1005M   0% /var/lock
s2e@ubuntu:~/dasos/SyscallTracker$ wget http://cdimage.debian.org/debian-cd/6.0.2.1/i386/iso-cd/debian-6.0.2.1-i386-businesscard.iso
--2012-08-07 23:41:08--  http://cdimage.debian.org/debian-cd/6.0.2.1/i386/iso-cd/debian-6.0.2.1-i386-businesscard.iso
Resolving cdimage.debian.org... 130.239.18.163, 130.239.18.138, 2001:6b0:e:2018::163, ...
Connecting to cdimage.debian.org|130.239.18.163|:80... connected.
HTTP request sent, awaiting response... 302 Found
Location: http://hammurabi.acc.umu.se/debian-cd/6.0.2.1/i386/iso-cd/debian-6.0.2.1-i386-businesscard.iso [following]
--2012-08-07 23:41:08--  http://hammurabi.acc.umu.se/debian-cd/6.0.2.1/i386/iso-cd/debian-6.0.2.1-i386-businesscard.iso
Resolving hammurabi.acc.umu.se... 130.239.18.165, 2001:6b0:e:2018::165
Connecting to hammurabi.acc.umu.se|130.239.18.165|:80... connected.
HTTP request sent, awaiting response... 404 Not Found
2012-08-07 23:41:09 ERROR 404: Not Found.

s2e@ubuntu:~/dasos/SyscallTracker$ wget http://cdimage.debian.org/debian-cd/current/i386/iso-cd/debian-6.0.5-i386-businesscard.iso
--2012-08-07 23:41:59--  http://cdimage.debian.org/debian-cd/current/i386/iso-cd/debian-6.0.5-i386-businesscard.iso
Resolving cdimage.debian.org... 130.239.18.163, 130.239.18.138, 2001:6b0:e:2018::163, ...
Connecting to cdimage.debian.org|130.239.18.163|:80... connected.
HTTP request sent, awaiting response... 302 Found
Location: http://napoleon.acc.umu.se/debian-cd/current/i386/iso-cd/debian-6.0.5-i386-businesscard.iso [following]
--2012-08-07 23:42:00--  http://napoleon.acc.umu.se/debian-cd/current/i386/iso-cd/debian-6.0.5-i386-businesscard.iso
Resolving napoleon.acc.umu.se... 130.239.18.173, 2001:6b0:e:2018::173
Connecting to napoleon.acc.umu.se|130.239.18.173|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 48234496 (46M) [application/octet-stream]
Saving to: `debian-6.0.5-i386-businesscard.iso'

100%[===================================================================================================================================================================================================>] 48,234,496  1.88M/s   in 21s     9

2012-08-07 23:42:21 (2.16 MB/s) - `debian-6.0.5-i386-businesscard.iso' saved [48234496/48234496]

s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/qemu-system-i386 s2e_disk.raw -cdrom debian-6.0.5-i386-businesscard.iso 
bash: /usr/local/src/s2e/build/qemu-release/qemu-system-i386: No such file or directory
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/ s2e_disk.raw -cdrom debian-6.0.5-i386-businesscard.iso 
audio/              i386-s2e-softmmu/   libdis/             libhw64/            net/                qapi-generated/     qemu-img            qga/                roms/               trace/              
block/              i386-softmmu/       libdis-user/        libuser/            pc-bios/            qemu-bridge-helper  qemu-io             QMP/                slirp/              ui/                 
fsdev/              libcacard/          libhw32/            linux-headers/      qapi/               qemu-ga             qemu-nbd            qom/                tests/              usb/                
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/ s2e_disk.raw -cdrom debian-6.0.5-i386-businesscard.iso 
9pfs/             fpu/              ide/              kvm/              qemu-system-i386  tcg/              usb/              
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 s2e_disk.raw -cdrom debian-6.0.5-i386-businesscard.iso 
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 s2e_disk.raw
^Z
[1]+  Stopped                 /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 s2e_disk.raw
s2e@ubuntu:~/dasos/SyscallTracker$ bg
[1]+ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 s2e_disk.raw &
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/
audio/              i386-s2e-softmmu/   libdis/             libhw64/            net/                qapi-generated/     qemu-img            qga/                roms/               trace/              
block/              i386-softmmu/       libdis-user/        libuser/            pc-bios/            qemu-bridge-helper  qemu-io             QMP/                slirp/              ui/                 
fsdev/              libcacard/          libhw32/            linux-headers/      qapi/               qemu-ga             qemu-nbd            qom/                tests/              usb/                
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 
20120209-LinuxSyscallMonitor.patch  InterruptMonitor.cpp~               LinuxSyscallMonitor.cpp~            runS2E-SyscallTracker               s2e-out-1/                          SyscallTracker.cpp~
conf-SyscallTracker.lua             InterruptMonitor.h                  LinuxSyscallMonitor.h               s2e_disk.raw                        syscallent.h                        SyscallTracker.h
debian-6.0.5-i386-businesscard.iso  InterruptMonitor.h~                 old/                                s2e-last/                           syscallent-simple.h                 SyscallTracker.h~
InterruptMonitor.cpp                LinuxSyscallMonitor.cpp             pushCode.sh                         s2e-out-0/                          SyscallTracker.cpp                  transform-syscallent.sh
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 
20120209-LinuxSyscallMonitor.patch  InterruptMonitor.cpp~               LinuxSyscallMonitor.cpp~            runS2E-SyscallTracker               s2e-out-1/                          SyscallTracker.cpp~
conf-SyscallTracker.lua             InterruptMonitor.h                  LinuxSyscallMonitor.h               s2e_disk.raw                        syscallent.h                        SyscallTracker.h
debian-6.0.5-i386-businesscard.iso  InterruptMonitor.h~                 old/                                s2e-last/                           syscallent-simple.h                 SyscallTracker.h~
InterruptMonitor.cpp                LinuxSyscallMonitor.cpp             pushCode.sh                         s2e-out-0/                          SyscallTracker.cpp                  transform-syscallent.sh
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 
20120209-LinuxSyscallMonitor.patch  InterruptMonitor.cpp~               LinuxSyscallMonitor.cpp~            runS2E-SyscallTracker               s2e-out-1/                          SyscallTracker.cpp~
conf-SyscallTracker.lua             InterruptMonitor.h                  LinuxSyscallMonitor.h               s2e_disk.raw                        syscallent.h                        SyscallTracker.h
debian-6.0.5-i386-businesscard.iso  InterruptMonitor.h~                 old/                                s2e-last/                           syscallent-simple.h                 SyscallTracker.h~
InterruptMonitor.cpp                LinuxSyscallMonitor.cpp             pushCode.sh                         s2e-out-0/                          SyscallTracker.cpp                  transform-syscallent.sh
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/
9pfs/             fpu/              ide/              kvm/              qemu-system-i386  tcg/              usb/              
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 -hda s2e_disk.raw -redir tcp:2222::22
[1]+  Done                    /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 s2e_disk.raw
s2e@ubuntu:~/dasos/SyscallTracker$ vi run
runPlain-SyscallTracker  runS2E-SyscallTracker    
s2e@ubuntu:~/dasos/SyscallTracker$ vi runS2E-SyscallTracker 
s2e@ubuntu:~/dasos/SyscallTracker$ ls
20120209-LinuxSyscallMonitor.patch  debian-6.0.5-i386-businesscard.iso  InterruptMonitor.h        LinuxSyscallMonitor.h    runS2E-SyscallTracker  s2e-out-0  scp.sh               SyscallTracker.cpp   transform-syscallent.sh
conf-SyscallTracker.lua             HostFiles                           InterruptMonitor.h~       old                      s2e_disk.raw           s2e-out-1  startVmRaw.sh        SyscallTracker.cpp~
conf-SyscallTracker.lua~            InterruptMonitor.cpp                LinuxSyscallMonitor.cpp   pushCode.sh              s2eget.README          s2e-out-2  syscallent.h         SyscallTracker.h
convertVmRawToQcow.sh               InterruptMonitor.cpp~               LinuxSyscallMonitor.cpp~  runPlain-SyscallTracker  s2e-last               s2e-out-3  syscallent-simple.h  SyscallTracker.h~
s2e@ubuntu:~/dasos/SyscallTracker$ chmod 755 convertVmRawToQcow.sh 
s2e@ubuntu:~/dasos/SyscallTracker$ cat convertVmRawToQcow.sh 
#! /bin/sh

$S2EDIR/build/qemu-release/qemu-img convert -O qcow2 s2e_disk.raw s2e_disk.qcow2

s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/qemu-img convert -O qcow2 s2e_disk.raw s2e_disk.qcow2
s2e@ubuntu:~/dasos/SyscallTracker$ cat runS2E-SyscallTracker 
#! /bin/sh

PATH=/usr/local/src/s2e/build/qemu-release

$PATH/i386-s2e-softmmu/qemu-system-i386 -m 8 -s2e-config-file conf-SyscallTracker.lua -hda s2e_disk.raw -redir tcp:2222::22

s2e@ubuntu:~/dasos/SyscallTracker$ vi runS2E-SyscallTracker 
s2e@ubuntu:~/dasos/SyscallTracker$ ./runS2E-SyscallTracker 
S2E: output directory = "/home/s2e/dasos/SyscallTracker/s2e-out-4"
WARNING: Linking two modules of different data layouts!
Adding CPU (addr = 0x2aaab8c5de30, size = 0x4dc80)
s2e@ubuntu:~/dasos/SyscallTracker$ cat ./runS2E-SyscallTracke
cat: ./runS2E-SyscallTracke: No such file or directory
s2e@ubuntu:~/dasos/SyscallTracker$ cat ./runS2E-SyscallTracker
#! /bin/sh

PATH=/usr/local/src/s2e/build/qemu-release

$PATH/i386-s2e-softmmu/qemu-system-i386 -m 8 -s2e-config-file conf-SyscallTracker.lua -hda s2e_disk.qcow2 -redir tcp:2222::22

s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 -m 8 -s2e-config-file conf-SyscallTracker.lua -hda s2e_disk.qcow2 -redir tcp:2222::22
qemu-system-i386: -s2e-config-file: invalid option
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 -m 8 -hda s2e_disk.qcow2 -redir tcp:2222::22
s2e@ubuntu:~/dasos/SyscallTracker$ ls
20120209-LinuxSyscallMonitor.patch  debian-6.0.5-i386-businesscard.iso  InterruptMonitor.h        LinuxSyscallMonitor.h    runS2E-SyscallTracker  s2e-last   s2e-out-3      syscallent.h         SyscallTracker.h
conf-SyscallTracker.lua             HostFiles                           InterruptMonitor.h~       old                      s2e_disk.qcow2         s2e-out-0  s2e-out-4      syscallent-simple.h  SyscallTracker.h~
conf-SyscallTracker.lua~            InterruptMonitor.cpp                LinuxSyscallMonitor.cpp   pushCode.sh              s2e_disk.raw           s2e-out-1  scp.sh         SyscallTracker.cpp   transform-syscallent.sh
convertVmRawToQcow.sh               InterruptMonitor.cpp~               LinuxSyscallMonitor.cpp~  runPlain-SyscallTracker  s2eget.README          s2e-out-2  startVmRaw.sh  SyscallTracker.cpp~
s2e@ubuntu:~/dasos/SyscallTracker$ cp s2e_disk.raw s2e_disk2.raw 
cp: writing `s2e_disk2.raw': No space left on device
s2e@ubuntu:~/dasos/SyscallTracker$ rm s2e_disk.qcow2 
s2e@ubuntu:~/dasos/SyscallTracker$ cp s2e_disk.raw s2e_disk2.raw 
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 -m 8 -hda s2e_disk.raw -redir tcp:2222::22
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 -hda s2e_disk.raw -redir tcp:2222::22
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 -hda s2e_disk2.raw -redir tcp:2222::22
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/qemu-system-i386 -s2e-config-file conf-SyscallTracker.lua -hda s2e_disk2.raw -redir tcp:2222::22
S2E: output directory = "/home/s2e/dasos/SyscallTracker/s2e-out-5"
WARNING: Linking two modules of different data layouts!
Adding CPU (addr = 0x2ac782a30930, size = 0x4dc80)
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-softmmu/qemu-system-i386 -hda s2e_disk2.raw -redir tcp:2222::22
s2e@ubuntu:~/dasos/SyscallTracker$ /usr/local/src/s2e/build/qemu-release/i386-s2e-softmmu/qemu-system-i386 -s2e-config-file conf-SyscallTracker.lua -hda s2e_disk2.raw -redir tcp:2222::22
S2E: output directory = "/home/s2e/dasos/SyscallTracker/s2e-out-6"
WARNING: Linking two modules of different data layouts!
Adding CPU (addr = 0x2b84450bc9f0, size = 0x4dc80)
s2e@ubuntu:~/dasos/SyscallTracker$ cd ..
s2e@ubuntu:~/dasos$ ls
buildPluginsQuick.sh  InstructionTracker  PluginsMakefile   PluginsReadme.txt   Run              SyscallTracker
buildPlugins.sh       PluginsDir          PluginsMakefile~  PluginsReadme.txt~  searchSource.sh
s2e@ubuntu:~/dasos$ cd ..
s2e@ubuntu:~$ cp -R dasos /mnt/hgfs/^C
s2e@ubuntu:~$ mount
/dev/sda1 on / type ext4 (rw,errors=remount-ro,commit=0)
proc on /proc type proc (rw,noexec,nosuid,nodev)
none on /sys type sysfs (rw,noexec,nosuid,nodev)
fusectl on /sys/fs/fuse/connections type fusectl (rw)
none on /sys/kernel/debug type debugfs (rw)
none on /sys/kernel/security type securityfs (rw)
none on /dev type devtmpfs (rw,mode=0755)
none on /dev/pts type devpts (rw,noexec,nosuid,gid=5,mode=0620)
none on /dev/shm type tmpfs (rw,nosuid,nodev)
none on /var/run type tmpfs (rw,nosuid,mode=0755)
none on /var/lock type tmpfs (rw,noexec,nosuid,nodev)
binfmt_misc on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,noexec,nosuid,nodev)
none on /proc/fs/vmblock/mountPoint type vmblock (rw)
gvfs-fuse-daemon on /home/s2e/.gvfs type fuse.gvfs-fuse-daemon (rw,nosuid,nodev,user=s2e)
s2e@ubuntu:~$ mount
/dev/sda1 on / type ext4 (rw,errors=remount-ro,commit=0)
proc on /proc type proc (rw,noexec,nosuid,nodev)
none on /sys type sysfs (rw,noexec,nosuid,nodev)
fusectl on /sys/fs/fuse/connections type fusectl (rw)
none on /sys/kernel/debug type debugfs (rw)
none on /sys/kernel/security type securityfs (rw)
none on /dev type devtmpfs (rw,mode=0755)
none on /dev/pts type devpts (rw,noexec,nosuid,gid=5,mode=0620)
none on /dev/shm type tmpfs (rw,nosuid,nodev)
none on /var/run type tmpfs (rw,nosuid,mode=0755)
none on /var/lock type tmpfs (rw,noexec,nosuid,nodev)
binfmt_misc on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,noexec,nosuid,nodev)
none on /proc/fs/vmblock/mountPoint type vmblock (rw)
gvfs-fuse-daemon on /home/s2e/.gvfs type fuse.gvfs-fuse-daemon (rw,nosuid,nodev,user=s2e)
.host:/ on /mnt/hgfs type vmhgfs (rw,ttl=1)
s2e@ubuntu:~$ ls /mnt/hgfs/
Downloads
s2e@ubuntu:~$ cp -R dasos /mnt/hgfs/Downloads/.


